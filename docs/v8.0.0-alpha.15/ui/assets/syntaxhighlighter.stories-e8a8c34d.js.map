{"version":3,"mappings":"kLAKA,IAAAA,EAAA,GACAC,EAAA,KAEA,MAAAC,GAAAC,OAAA,UACA,wBAAAC,GAAA,MAAAC,EAAA,qTAEA,OAAAL,EAAA,WACAA,EAAA,QAAAM,GAAA,CACAF,EAAA,oBAAAE,CAAA,EACA,EACAN,EAAA,IAGAC,IAAA,OAAAG,KAEA,CACA,QAAAG,mBAAAH,EAAA,IAAAG,EAAA,EAEA,GAEAC,GAAAL,OAAA,UACA,yBAAAC,CAAA,aAAAK,EAAA,qBAAAJ,EAAA,IACA,iTAAAA,EAAA,IACA,iJACA,EAEA,OAAAL,EAAA,WACAA,EAAA,QAAAM,GAAA,CACAF,EAAA,oBAAAE,CAAA,EACA,EACAN,EAAA,IAGAC,IAAA,OACAG,KAGA,CACA,QAAAG,GACAG,EAAA,cAAAN,EAAA,IAAAG,EAAA,UAAAE,EAAA,EAGA,GAEAL,EACAG,GAIAG,EAAA,cAAAC,YAAA,SAAAD,EAAA,yBACA,EAAAH,EAAA,YACAG,EAAA,cAAAF,IAAA,GAAAD,CAAA,GAEAG,EAAA,cAAAR,GAAA,IAAAK,CAAA,EAEA,EAGAH,EAAA,qBACAE,IACA,CACA,GAAAL,IAAA,MACAA,EAAA,oBAAAK,CAAA,EACA,MACA,CACAN,EAAA,KAAAM,CAAA,CACA","names":["languages","Comp","LazySyntaxHighlighter","lazy","SyntaxHighlighter","__vitePreload","args","props","LazySyntaxHighlighterWithFormatter","formatter","React","Suspense"],"sources":["../../ui/components/src/components/syntaxhighlighter/lazy-syntaxhighlighter.tsx"],"sourcesContent":["import React, { Suspense, lazy } from 'react';\n\nimport type { ComponentProps } from 'react';\nimport type ReactSyntaxHighlighter from './syntaxhighlighter';\n\nlet languages: Parameters<typeof ReactSyntaxHighlighter.registerLanguage>[] = [];\nlet Comp: typeof ReactSyntaxHighlighter | null = null;\n\nconst LazySyntaxHighlighter = lazy(async () => {\n  const { SyntaxHighlighter } = await import('./syntaxhighlighter');\n\n  if (languages.length > 0) {\n    languages.forEach((args) => {\n      SyntaxHighlighter.registerLanguage(...args);\n    });\n    languages = [];\n  }\n\n  if (Comp === null) Comp = SyntaxHighlighter;\n\n  return {\n    default: (props: ComponentProps<typeof SyntaxHighlighter>) => <SyntaxHighlighter {...props} />,\n  };\n});\n\nconst LazySyntaxHighlighterWithFormatter = lazy(async () => {\n  const [{ SyntaxHighlighter }, { formatter }] = await Promise.all([\n    import('./syntaxhighlighter'),\n    import('./formatter'),\n  ]);\n\n  if (languages.length > 0) {\n    languages.forEach((args) => {\n      SyntaxHighlighter.registerLanguage(...args);\n    });\n    languages = [];\n  }\n\n  if (Comp === null) {\n    Comp = SyntaxHighlighter;\n  }\n\n  return {\n    default: (props: ComponentProps<typeof SyntaxHighlighter>) => (\n      <SyntaxHighlighter {...props} formatter={formatter} />\n    ),\n  };\n});\n\nexport const SyntaxHighlighter = (\n  props:\n    | ComponentProps<typeof LazySyntaxHighlighter>\n    | ComponentProps<typeof LazySyntaxHighlighterWithFormatter>\n) => (\n  <Suspense fallback={<div />}>\n    {props.format !== false ? (\n      <LazySyntaxHighlighterWithFormatter {...props} />\n    ) : (\n      <LazySyntaxHighlighter {...props} />\n    )}\n  </Suspense>\n);\n\nSyntaxHighlighter.registerLanguage = (\n  ...args: Parameters<typeof ReactSyntaxHighlighter.registerLanguage>\n) => {\n  if (Comp !== null) {\n    Comp.registerLanguage(...args);\n    return;\n  }\n  languages.push(args);\n};\n"],"file":"assets/syntaxhighlighter.stories-e8a8c34d.js"}