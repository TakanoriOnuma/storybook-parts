{"version":3,"file":"Files-71f7b76b.js","sources":["../../ui/blocks/src/controls/Files.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport type { ChangeEvent, FC } from 'react';\nimport { styled } from '@storybook/theming';\nimport { Form } from '@storybook/components';\n\nimport type { ControlProps } from './types';\nimport { getControlId } from './helpers';\n\nexport interface FilesControlProps extends ControlProps<string[]> {\n  /**\n   * The accept attribute value is a string that defines the file types the file input should accept. This string is a comma-separated list of unique file type specifiers.\n   * @example\n   * *\\/*\n   * @example\n   * .webm,video/webm\n   * @example\n   * .doc,.docx,application/msword\n   * @defaultValue `image/*`\n   * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept\n   */\n  accept?: string;\n}\n\nconst FileInput = styled(Form.Input)({\n  padding: 10,\n});\n\nfunction revokeOldUrls(urls: string[]) {\n  urls.forEach((url) => {\n    if (url.startsWith('blob:')) {\n      URL.revokeObjectURL(url);\n    }\n  });\n}\n\nexport const FilesControl: FC<FilesControlProps> = ({\n  onChange,\n  name,\n  accept = 'image/*',\n  value,\n}) => {\n  const inputElement = useRef<HTMLInputElement>(null);\n\n  function handleFileChange(e: ChangeEvent<HTMLInputElement>) {\n    if (!e.target.files) {\n      return;\n    }\n    const fileUrls = Array.from(e.target.files).map((file) => URL.createObjectURL(file));\n    onChange(fileUrls);\n    revokeOldUrls(value);\n  }\n\n  // Added useEffect hook to reset the file value when value is null\n  useEffect(() => {\n    if (value == null && inputElement.current) {\n      inputElement.current.value = null;\n    }\n  }, [value, name]);\n\n  return (\n    <FileInput\n      ref={inputElement}\n      id={getControlId(name)}\n      type=\"file\"\n      name={name}\n      multiple\n      onChange={handleFileChange}\n      accept={accept}\n      size=\"flex\"\n    />\n  );\n};\n"],"names":["FileInput","styled","Form","revokeOldUrls","urls","url","FilesControl","onChange","name","accept","value","inputElement","useRef","handleFileChange","e","fileUrls","file","useEffect","React","getControlId"],"mappings":"yKAuBA,MAAAA,EAAAC,EAAAC,EAAA,KAAA,EAAA,CACA,QAAA,EACA,CAAA,EAEA,SAAAC,EAAAC,EAAA,CACAA,EAAA,QAAAC,GAAA,CACAA,EAAA,WAAA,OAAA,GACA,IAAA,gBAAAA,CAAA,CACA,CACA,CACA,CAEA,MAAAC,EAAA,CAAA,CACA,SAAAC,EACA,KAAAC,EACA,OAAAC,EAAA,UACA,MAAAC,CACA,IAAA,CACA,MAAAC,EAAAC,SAAA,IAAA,EAEA,SAAAC,EAAAC,EAAA,CACA,GAAA,CAAAA,EAAA,OAAA,MACA,OAEA,MAAAC,EAAA,MAAA,KAAAD,EAAA,OAAA,KAAA,EAAA,IAAAE,GAAA,IAAA,gBAAAA,CAAA,CAAA,EACAT,EAAAQ,CAAA,EACAZ,EAAAO,CAAA,CACA,CAGAO,OAAAA,EAAAA,UAAA,IAAA,CACAP,GAAA,MAAAC,EAAA,UACAA,EAAA,QAAA,MAAA,KACA,EACA,CAAAD,EAAAF,CAAA,CAAA,EAGAU,EAAA,cAAAlB,EAAA,CACA,IAAAW,EACA,GAAAQ,EAAAX,CAAA,EACA,KAAA,OACA,KAAAA,EACA,SAAA,GACA,SAAAK,EACA,OAAAJ,EACA,KAAA,MAAA,CAAA,CAGA;;;;;;;;"}