{"version":3,"mappings":"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","names":["Bar","styled","FlexBar","Wrapper","IconPlaceholder","theme","Toolbar","isLoading","storyId","baseUrl","zoom","resetZoom","rest","React","key","IconButton","e","ZoomIcon","ZoomOutIcon","ZoomResetIcon","global","ChildrenContainer","isColumn","columns","layout","StyledSource","Source","darken","PreviewContainer","withSource","isExpanded","getBlockBackgroundStyle","withToolbar","getSource","expanded","setExpanded","getStoryId","children","Children","elt","PositionedToolbar","Relative","Preview","additionalActions","className","props","useState","source","actionItem","scale","setScale","previewClasses","defaultActionItems","additionalActionItems","setAdditionalActionItems","actionItems","globalWindow","copyToClipboard","useCallback","text","createCopyToClipboardFunction","__vitePreload","n","onCopyCapture","selection","item","z","ZoomContext","Zoom","child","i","ActionBar","StyledPreview","PreviewSkeleton","StorySkeleton"],"sources":["../../ui/blocks/src/components/Toolbar.tsx","../../ui/blocks/src/components/Preview.tsx"],"sourcesContent":["import type { FC, MouseEvent } from 'react';\nimport React from 'react';\nimport { styled } from '@storybook/theming';\nimport { FlexBar, IconButton } from '@storybook/components';\nimport { ZoomIcon, ZoomOutIcon, ZoomResetIcon } from '@storybook/icons';\n\ninterface ZoomProps {\n  zoom: (val: number) => void;\n  resetZoom: () => void;\n}\n\ninterface EjectProps {\n  storyId?: string;\n  baseUrl?: string;\n}\n\ninterface BarProps {\n  border?: boolean;\n}\n\ninterface LoadingProps {\n  isLoading?: boolean;\n}\n\nexport type ToolbarProps = BarProps & ZoomProps & EjectProps & LoadingProps;\n\nconst Bar = styled(FlexBar)({\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  transition: 'transform .2s linear',\n});\n\nconst Wrapper = styled.div({\n  display: 'flex',\n  alignItems: 'center',\n  gap: 4,\n});\n\nconst IconPlaceholder = styled.div(({ theme }) => ({\n  width: 14,\n  height: 14,\n  borderRadius: 2,\n  margin: '0 7px',\n  backgroundColor: theme.appBorderColor,\n  animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,\n}));\n\nexport const Toolbar: FC<ToolbarProps> = ({\n  isLoading,\n  storyId,\n  baseUrl,\n  zoom,\n  resetZoom,\n  ...rest\n}) => (\n  <Bar {...rest}>\n    <Wrapper key=\"left\">\n      {isLoading ? (\n        [1, 2, 3].map((key) => <IconPlaceholder key={key} />)\n      ) : (\n        <>\n          <IconButton\n            key=\"zoomin\"\n            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n              e.preventDefault();\n              zoom(0.8);\n            }}\n            title=\"Zoom in\"\n          >\n            <ZoomIcon />\n          </IconButton>\n          <IconButton\n            key=\"zoomout\"\n            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n              e.preventDefault();\n              zoom(1.25);\n            }}\n            title=\"Zoom out\"\n          >\n            <ZoomOutIcon />\n          </IconButton>\n          <IconButton\n            key=\"zoomreset\"\n            onClick={(e: MouseEvent<HTMLButtonElement>) => {\n              e.preventDefault();\n              resetZoom();\n            }}\n            title=\"Reset zoom\"\n          >\n            <ZoomResetIcon />\n          </IconButton>\n        </>\n      )}\n    </Wrapper>\n  </Bar>\n);\n","import type { ClipboardEvent, FC, ReactElement, ReactNode } from 'react';\nimport React, { Children, useCallback, useState } from 'react';\nimport { darken } from 'polished';\nimport { styled } from '@storybook/theming';\n\nimport { global } from '@storybook/global';\nimport { ActionBar, Zoom } from '@storybook/components';\nimport type { ActionItem } from '@storybook/components';\n\nimport type { SourceProps } from '.';\n\nimport { Source } from '.';\nimport { getBlockBackgroundStyle } from './BlockBackgroundStyles';\nimport { Toolbar } from './Toolbar';\nimport { ZoomContext } from './ZoomContext';\nimport { StorySkeleton } from './Story';\n\nexport interface PreviewProps {\n  isLoading?: true;\n  layout?: Layout;\n  isColumn?: boolean;\n  columns?: number;\n  withSource?: SourceProps;\n  isExpanded?: boolean;\n  withToolbar?: boolean;\n  className?: string;\n  additionalActions?: ActionItem[];\n  children?: ReactNode;\n}\n\nexport type Layout = 'padded' | 'fullscreen' | 'centered';\n\nconst ChildrenContainer = styled.div<PreviewProps & { layout: Layout }>(\n  ({ isColumn, columns, layout }) => ({\n    display: isColumn || !columns ? 'block' : 'flex',\n    position: 'relative',\n    flexWrap: 'wrap',\n    overflow: 'auto',\n    flexDirection: isColumn ? 'column' : 'row',\n\n    '& .innerZoomElementWrapper > *': isColumn\n      ? {\n          width: layout !== 'fullscreen' ? 'calc(100% - 20px)' : '100%',\n          display: 'block',\n        }\n      : {\n          maxWidth: layout !== 'fullscreen' ? 'calc(100% - 20px)' : '100%',\n          display: 'inline-block',\n        },\n  }),\n  ({ layout = 'padded' }) =>\n    layout === 'centered' || layout === 'padded'\n      ? {\n          padding: '30px 20px',\n          '& .innerZoomElementWrapper > *': {\n            width: 'auto',\n            border: '10px solid transparent!important',\n          },\n        }\n      : {},\n  ({ layout = 'padded' }) =>\n    layout === 'centered'\n      ? {\n          display: 'flex',\n          justifyContent: 'center',\n          justifyItems: 'center',\n          alignContent: 'center',\n          alignItems: 'center',\n        }\n      : {},\n  ({ columns }) =>\n    columns && columns > 1\n      ? { '.innerZoomElementWrapper > *': { minWidth: `calc(100% / ${columns} - 20px)` } }\n      : {}\n);\n\nconst StyledSource = styled(Source)(({ theme }) => ({\n  margin: 0,\n  borderTopLeftRadius: 0,\n  borderTopRightRadius: 0,\n  borderBottomLeftRadius: theme.appBorderRadius,\n  borderBottomRightRadius: theme.appBorderRadius,\n  border: 'none',\n\n  background:\n    theme.base === 'light' ? 'rgba(0, 0, 0, 0.85)' : darken(0.05, theme.background.content),\n  color: theme.color.lightest,\n  button: {\n    background:\n      theme.base === 'light' ? 'rgba(0, 0, 0, 0.85)' : darken(0.05, theme.background.content),\n  },\n}));\n\nconst PreviewContainer = styled.div<PreviewProps>(\n  ({ theme, withSource, isExpanded }) => ({\n    position: 'relative',\n    overflow: 'hidden',\n    margin: '25px 0 40px',\n    ...getBlockBackgroundStyle(theme),\n    borderBottomLeftRadius: withSource && isExpanded && 0,\n    borderBottomRightRadius: withSource && isExpanded && 0,\n    borderBottomWidth: isExpanded && 0,\n\n    'h3 + &': {\n      marginTop: '16px',\n    },\n  }),\n  ({ withToolbar }) => withToolbar && { paddingTop: 40 }\n);\n\ninterface SourceItem {\n  source?: ReactElement;\n  actionItem: ActionItem;\n}\n\nconst getSource = (\n  withSource: SourceProps,\n  expanded: boolean,\n  setExpanded: Function\n): SourceItem => {\n  switch (true) {\n    case !!(withSource && withSource.error): {\n      return {\n        source: null,\n        actionItem: {\n          title: 'No code available',\n          className: 'docblock-code-toggle docblock-code-toggle--disabled',\n          disabled: true,\n          onClick: () => setExpanded(false),\n        },\n      };\n    }\n    case expanded: {\n      return {\n        source: <StyledSource {...withSource} dark />,\n        actionItem: {\n          title: 'Hide code',\n          className: 'docblock-code-toggle docblock-code-toggle--expanded',\n          onClick: () => setExpanded(false),\n        },\n      };\n    }\n    default: {\n      return {\n        source: <StyledSource {...withSource} dark />,\n        actionItem: {\n          title: 'Show code',\n          className: 'docblock-code-toggle',\n          onClick: () => setExpanded(true),\n        },\n      };\n    }\n  }\n};\nfunction getStoryId(children: ReactNode) {\n  if (Children.count(children) === 1) {\n    const elt = children as ReactElement;\n    if (elt.props) {\n      return elt.props.id;\n    }\n  }\n  return null;\n}\n\nconst PositionedToolbar = styled(Toolbar)({\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  right: 0,\n  height: 40,\n});\n\nconst Relative = styled.div({\n  overflow: 'hidden',\n  position: 'relative',\n});\n\n/**\n * A preview component for showing one or more component `Story`\n * items. The preview also shows the source for the component\n * as a drop-down.\n */\nexport const Preview: FC<PreviewProps> = ({\n  isLoading,\n  isColumn,\n  columns,\n  children,\n  withSource,\n  withToolbar = false,\n  isExpanded = false,\n  additionalActions,\n  className,\n  layout = 'padded',\n  ...props\n}) => {\n  const [expanded, setExpanded] = useState(isExpanded);\n  const { source, actionItem } = getSource(withSource, expanded, setExpanded);\n  const [scale, setScale] = useState(1);\n  const previewClasses = [className].concat(['sbdocs', 'sbdocs-preview', 'sb-unstyled']);\n\n  const defaultActionItems = withSource ? [actionItem] : [];\n  const [additionalActionItems, setAdditionalActionItems] = useState(\n    additionalActions ? [...additionalActions] : []\n  );\n  const actionItems = [...defaultActionItems, ...additionalActionItems];\n\n  const { window: globalWindow } = global;\n\n  const copyToClipboard = useCallback(async (text: string) => {\n    const { createCopyToClipboardFunction } = await import('@storybook/components');\n    createCopyToClipboardFunction();\n  }, []);\n\n  const onCopyCapture = (e: ClipboardEvent<HTMLInputElement>) => {\n    // When the selection range is neither empty nor collapsed, we can assume\n    // user's intention is to copy the selected text, instead of the story's\n    // code snippet.\n    const selection: Selection | null = globalWindow.getSelection();\n    if (selection && selection.type === 'Range') {\n      return;\n    }\n\n    e.preventDefault();\n    if (additionalActionItems.filter((item) => item.title === 'Copied').length === 0) {\n      copyToClipboard(source.props.code).then(() => {\n        setAdditionalActionItems([\n          ...additionalActionItems,\n          {\n            title: 'Copied',\n            onClick: () => {},\n          },\n        ]);\n        globalWindow.setTimeout(\n          () =>\n            setAdditionalActionItems(\n              additionalActionItems.filter((item) => item.title !== 'Copied')\n            ),\n          1500\n        );\n      });\n    }\n  };\n\n  return (\n    <PreviewContainer\n      {...{ withSource, withToolbar }}\n      {...props}\n      className={previewClasses.join(' ')}\n    >\n      {withToolbar && (\n        <PositionedToolbar\n          isLoading={isLoading}\n          border\n          zoom={(z: number) => setScale(scale * z)}\n          resetZoom={() => setScale(1)}\n          storyId={getStoryId(children)}\n          baseUrl=\"./iframe.html\"\n        />\n      )}\n      <ZoomContext.Provider value={{ scale }}>\n        <Relative className=\"docs-story\" onCopyCapture={withSource && onCopyCapture}>\n          <ChildrenContainer\n            isColumn={isColumn || !Array.isArray(children)}\n            columns={columns}\n            layout={layout}\n          >\n            <Zoom.Element scale={scale}>\n              {Array.isArray(children) ? (\n                children.map((child, i) => <div key={i}>{child}</div>)\n              ) : (\n                <div>{children}</div>\n              )}\n            </Zoom.Element>\n          </ChildrenContainer>\n          <ActionBar actionItems={actionItems} />\n        </Relative>\n      </ZoomContext.Provider>\n      {withSource && expanded && source}\n    </PreviewContainer>\n  );\n};\n\nconst StyledPreview = styled(Preview)(() => ({\n  '.docs-story': {\n    paddingTop: 32,\n    paddingBottom: 40,\n  },\n}));\n\nexport const PreviewSkeleton = () => (\n  <StyledPreview isLoading withToolbar>\n    <StorySkeleton />\n  </StyledPreview>\n);\n"],"file":"assets/Preview-3057092b.js"}