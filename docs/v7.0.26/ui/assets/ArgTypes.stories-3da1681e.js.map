{"version":3,"file":"ArgTypes.stories-3da1681e.js","sources":["../../ui/blocks/src/blocks/ArgTypes.tsx"],"sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport type { Parameters, Renderer, StrictArgTypes } from '@storybook/csf';\nimport type { ModuleExports } from '@storybook/types';\nimport type { FC } from 'react';\nimport type { PropDescriptor } from '@storybook/preview-api';\nimport { filterArgTypes } from '@storybook/preview-api';\nimport type { ArgTypesExtractor } from '@storybook/docs-tools';\nimport React from 'react';\n\nimport type { SortType } from '../components';\nimport { ArgsTable as PureArgsTable, ArgsTableError } from '../components';\nimport { useOf } from './useOf';\n\ntype ArgTypesParameters = {\n  include?: PropDescriptor;\n  exclude?: PropDescriptor;\n  sort?: SortType;\n};\n\ntype ArgTypesProps = ArgTypesParameters & {\n  of?: Renderer['component'] | ModuleExports;\n};\nfunction extractComponentArgTypes(\n  component: Renderer['component'],\n  parameters: Parameters\n): StrictArgTypes {\n  const { extractArgTypes }: { extractArgTypes: ArgTypesExtractor } = parameters.docs || {};\n  if (!extractArgTypes) {\n    throw new Error(ArgsTableError.ARGS_UNSUPPORTED);\n  }\n  return extractArgTypes(component);\n}\n\nfunction getArgTypesFromResolved(resolved: ReturnType<typeof useOf>, props: ArgTypesProps) {\n  if (resolved.type === 'component') {\n    const {\n      component,\n      projectAnnotations: { parameters },\n    } = resolved;\n    return {\n      argTypes: extractComponentArgTypes(component, parameters),\n      parameters,\n    };\n  }\n\n  if (resolved.type === 'meta') {\n    const {\n      preparedMeta: { argTypes, parameters },\n    } = resolved;\n    return { argTypes, parameters };\n  }\n\n  // In the case of the story, the enhanceArgs argTypeEnhancer has already added the extracted\n  // arg types from the component to the prepared story.\n  const {\n    story: { argTypes, parameters },\n  } = resolved;\n  return { argTypes, parameters };\n}\n\nexport const ArgTypes: FC<ArgTypesProps> = (props) => {\n  const { of } = props;\n  if ('of' in props && of === undefined) {\n    throw new Error('Unexpected `of={undefined}`, did you mistype a CSF file reference?');\n  }\n  const resolved = useOf(of || 'meta');\n  const { argTypes, parameters } = getArgTypesFromResolved(resolved, props);\n  const argTypesParameters = parameters.docs?.argTypes || ({} as ArgTypesParameters);\n\n  const include = props.include ?? argTypesParameters.include;\n  const exclude = props.exclude ?? argTypesParameters.exclude;\n  const sort = props.sort ?? argTypesParameters.sort;\n\n  const filteredArgTypes = filterArgTypes(argTypes, include, exclude);\n\n  return <PureArgsTable rows={filteredArgTypes} sort={sort} />;\n};\n"],"names":["filterArgTypes","extractComponentArgTypes","component","parameters","extractArgTypes","ArgsTableError","getArgTypesFromResolved","resolved","props","parameters2","argTypes2","argTypes","ArgTypes","of","useOf","argTypesParameters","_a","include","exclude","sort","filteredArgTypes","jsx","PureArgsTable"],"mappings":"g2CAKA,KAAA,CAAA,eAAAA,EAAA,EAAA,iCAiBA,SAAAC,GAAAC,EAAAC,EAAA,CAIE,KAAA,CAAA,gBAAAC,CAAA,EAAAD,EAAA,MAAA,CAAA,EACA,GAAA,CAAAC,EACE,MAAA,IAAA,MAAAC,GAAA,gBAAA,EAEF,OAAAD,EAAAF,CAAA,CACF,CAEA,SAAAI,GAAAC,EAAAC,EAAA,CACE,GAAAD,EAAA,OAAA,YAAA,CACE,KAAA,CAAM,UAAAL,EACJ,mBAAA,CAAA,WAAAO,CAAA,CACiC,EAAAF,EAEnC,MAAA,CAAO,SAAAN,GAAAC,EAAAO,CAAA,EACmD,WAAAA,CACxD,EAIJ,GAAAF,EAAA,OAAA,OAAA,CACE,KAAA,CAAM,aAAA,CAAA,SAAAG,EAAA,WAAAD,CAAA,CACiC,EAAAF,EAEvC,MAAA,CAAA,SAAAG,EAAA,WAAAD,CAAA,EAKF,KAAA,CAAM,MAAA,CAAA,SAAAE,EAAA,WAAAR,CAAA,CAC0B,EAAAI,EAEhC,MAAA,CAAA,SAAAI,EAAA,WAAAR,EACF,CAEO,MAAAS,EAAAJ,GAAA,OACL,KAAA,CAAA,GAAAK,CAAA,EAAAL,EACA,GAAA,OAAAA,GAAAK,IAAA,OACE,MAAA,IAAA,MAAA,oEAAA,EAEF,MAAAN,EAAAO,GAAAD,GAAA,MAAA,EACA,CAAA,SAAAF,EAAA,WAAAR,CAAA,EAAAG,GAAAC,CAAA,EACAQ,IAAAC,EAAAb,EAAA,OAAA,YAAAa,EAAA,WAAA,CAAA,EAEAC,GAAAT,EAAA,SAAAO,EAAA,QACAG,GAAAV,EAAA,SAAAO,EAAA,QACAI,GAAAX,EAAA,MAAAO,EAAA,KAEAK,GAAApB,GAAAW,EAAAM,GAAAC,EAAA,EAEA,OAAAG,GAAAC,GAAA,CAAA,KAAAF,GAAA,KAAAD,EAAA,CAAA,CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}