{"version":3,"file":"Description-504419ff.js","sources":["../../ui/blocks/src/blocks/Description.tsx"],"sourcesContent":["import type { FC } from 'react';\nimport React from 'react';\nimport type { Of } from './useOf';\nimport { useOf } from './useOf';\nimport { Markdown } from './Markdown';\n\nexport enum DescriptionType {\n  INFO = 'info',\n  NOTES = 'notes',\n  DOCGEN = 'docgen',\n  AUTO = 'auto',\n}\n\ninterface DescriptionProps {\n  /**\n   * Specify where to get the description from. Can be a component, a CSF file or a story.\n   * If not specified, the description will be extracted from the meta of the attached CSF file.\n   */\n  of?: Of;\n}\n\nconst getDescriptionFromResolvedOf = (resolvedOf: ReturnType<typeof useOf>): string | null => {\n  switch (resolvedOf.type) {\n    case 'story': {\n      return resolvedOf.story.parameters.docs?.description?.story || null;\n    }\n    case 'meta': {\n      const { parameters, component } = resolvedOf.preparedMeta;\n      const metaDescription = parameters.docs?.description?.component;\n      if (metaDescription) {\n        return metaDescription;\n      }\n      return (\n        parameters.docs?.extractComponentDescription?.(component, {\n          component,\n          parameters,\n        }) || null\n      );\n    }\n    case 'component': {\n      const {\n        component,\n        projectAnnotations: { parameters },\n      } = resolvedOf;\n      return (\n        parameters.docs?.extractComponentDescription?.(component, {\n          component,\n          parameters,\n        }) || null\n      );\n    }\n    default: {\n      throw new Error(\n        `Unrecognized module type resolved from 'useOf', got: ${(resolvedOf as any).type}`\n      );\n    }\n  }\n};\n\nconst DescriptionContainer: FC<DescriptionProps> = (props) => {\n  const { of } = props;\n\n  if ('of' in props && of === undefined) {\n    throw new Error('Unexpected `of={undefined}`, did you mistype a CSF file reference?');\n  }\n  const resolvedOf = useOf(of || 'meta');\n  const markdown = getDescriptionFromResolvedOf(resolvedOf);\n\n  return markdown ? <Markdown>{markdown}</Markdown> : null;\n};\n\nexport { DescriptionContainer as Description };\n"],"names":["getDescriptionFromResolvedOf","resolvedOf","_b","_a","parameters","component","metaDescription","_d","_c","_f","_e","_h","_g","DescriptionContainer","props","of","useOf","markdown","React","Markdown"],"mappings":"2HAqBA,MAAAA,EAAAC,GAAA,qBACA,OAAAA,EAAA,KAAA,CACA,IAAA,QACA,QAAAC,GAAAC,EAAAF,EAAA,MAAA,WAAA,OAAA,YAAAE,EAAA,cAAA,YAAAD,EAAA,QAAA,KAEA,IAAA,OAAA,CACA,KAAA,CAAA,WAAAE,EAAA,UAAAC,GAAAJ,EAAA,aACAK,GAAAC,GAAAC,EAAAJ,EAAA,OAAA,YAAAI,EAAA,cAAA,YAAAD,EAAA,UACA,OAAAD,KAIAG,GAAAC,EAAAN,EAAA,OAAA,YAAAM,EAAA,8BAAA,YAAAD,EAAA,KAAAC,EAAAL,EAAA,CACA,UAAAA,EACA,WAAAD,CACA,KAAA,IAEA,CACA,IAAA,YAAA,CACA,KAAA,CACA,UAAAC,EACA,mBAAA,CAAA,WAAAD,CAAA,CACA,EAAAH,EAEA,QAAAU,GAAAC,EAAAR,EAAA,OAAA,YAAAQ,EAAA,8BAAA,YAAAD,EAAA,KAAAC,EAAAP,EAAA,CACA,UAAAA,EACA,WAAAD,CACA,KAAA,IAEA,CACA,QACA,MAAA,IAAA,MACA,wDAAAH,EAAA,IAAA,EAAA,CAGA,CACA,EAEAY,EAAAC,GAAA,CACA,KAAA,CAAA,GAAAC,CAAA,EAAAD,EAEA,GAAA,OAAAA,GAAAC,IAAA,OACA,MAAA,IAAA,MAAA,oEAAA,EAEA,MAAAd,EAAAe,EAAAD,GAAA,MAAA,EACAE,EAAAjB,EAAAC,CAAA,EAEA,OAAAgB,EAAAC,EAAA,cAAAC,EAAA,KAAAF,CAAA,EAAA,IACA;"}