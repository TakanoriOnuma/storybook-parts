{"version":3,"file":"ArgsTable-34b95858.js","sources":["../../ui/blocks/src/components/ArgsTable/ArgJsDoc.tsx","../../ui/blocks/src/components/ArgsTable/ArgValue.tsx","../../ui/blocks/src/controls/index.tsx","../../ui/blocks/src/components/ArgsTable/ArgControl.tsx","../../ui/blocks/src/components/ArgsTable/ArgRow.tsx","../../ui/blocks/src/components/ArgsTable/SectionRow.tsx","../../ui/blocks/src/components/ArgsTable/ArgsTable.tsx"],"sourcesContent":["import type { FC } from 'react';\nimport React from 'react';\nimport { styled } from '@storybook/theming';\nimport { codeCommon } from '@storybook/components';\nimport type { JsDocTags } from './types';\n\ninterface ArgJsDocArgs {\n  tags: JsDocTags;\n}\n\nexport const Table = styled.table(({ theme }) => ({\n  '&&': {\n    // Escape default table styles\n    borderCollapse: 'collapse',\n    borderSpacing: 0,\n    border: 'none',\n\n    tr: {\n      border: 'none !important',\n      background: 'none',\n    },\n\n    'td, th': {\n      padding: 0,\n      border: 'none',\n      width: 'auto!important',\n    },\n    // End escape\n\n    marginTop: 0,\n    marginBottom: 0,\n\n    'th:first-of-type, td:first-of-type': {\n      paddingLeft: 0,\n    },\n\n    'th:last-of-type, td:last-of-type': {\n      paddingRight: 0,\n    },\n\n    td: {\n      paddingTop: 0,\n      paddingBottom: 4,\n\n      '&:not(:first-of-type)': {\n        paddingLeft: 10,\n        paddingRight: 0,\n      },\n    },\n\n    tbody: {\n      boxShadow: 'none',\n      border: 'none',\n    },\n\n    code: codeCommon({ theme }),\n\n    div: {\n      span: {\n        fontWeight: 'bold',\n      },\n    },\n\n    '& code': {\n      margin: 0,\n      display: 'inline-block',\n      fontSize: theme.typography.size.s1,\n    },\n  },\n}));\n\nexport const ArgJsDoc: FC<ArgJsDocArgs> = ({ tags }) => {\n  const params = (tags.params || []).filter((x) => x.description);\n  const hasDisplayableParams = params.length !== 0;\n  const hasDisplayableDeprecated = tags.deprecated != null;\n  const hasDisplayableReturns = tags.returns != null && tags.returns.description != null;\n\n  if (!hasDisplayableParams && !hasDisplayableReturns && !hasDisplayableDeprecated) {\n    return null;\n  }\n\n  return (\n    <>\n      <Table>\n        <tbody>\n          {hasDisplayableDeprecated && (\n            <tr key=\"deprecated\">\n              <td colSpan={2}>\n                <strong>Deprecated</strong>: {tags.deprecated}\n              </td>\n            </tr>\n          )}\n          {hasDisplayableParams &&\n            params.map((x) => {\n              return (\n                <tr key={x.name}>\n                  <td>\n                    <code>{x.name}</code>\n                  </td>\n                  <td>{x.description}</td>\n                </tr>\n              );\n            })}\n          {hasDisplayableReturns && (\n            <tr key=\"returns\">\n              <td>\n                <code>Returns</code>\n              </td>\n              <td>{tags.returns.description}</td>\n            </tr>\n          )}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport React, { useState } from 'react';\nimport memoize from 'memoizerific';\nimport uniq from 'lodash/uniq.js';\nimport { styled } from '@storybook/theming';\nimport { WithTooltipPure, Icons, SyntaxHighlighter, codeCommon } from '@storybook/components';\nimport type { PropSummaryValue } from './types';\n\ninterface ArgValueProps {\n  value?: PropSummaryValue;\n  initialExpandedArgs?: boolean;\n}\n\ninterface ArgTextProps {\n  text: string;\n  simple?: boolean;\n}\n\ninterface ArgSummaryProps {\n  value: PropSummaryValue;\n  initialExpandedArgs?: boolean;\n}\n\nconst ITEMS_BEFORE_EXPANSION = 8;\n\nconst Summary = styled.div<{ isExpanded?: boolean }>(({ isExpanded }) => ({\n  display: 'flex',\n  flexDirection: isExpanded ? 'column' : 'row',\n  flexWrap: 'wrap',\n  alignItems: 'flex-start',\n  marginBottom: '-4px',\n  minWidth: 100,\n}));\n\nconst Text = styled.span<{ simple?: boolean }>(codeCommon, ({ theme, simple = false }) => ({\n  flex: '0 0 auto',\n  fontFamily: theme.typography.fonts.mono,\n  fontSize: theme.typography.size.s1,\n  wordBreak: 'break-word',\n  whiteSpace: 'normal',\n  maxWidth: '100%',\n  margin: 0,\n  marginRight: '4px',\n  marginBottom: '4px',\n  paddingTop: '2px',\n  paddingBottom: '2px',\n  lineHeight: '13px',\n  ...(simple && {\n    background: 'transparent',\n    border: '0 none',\n    paddingLeft: 0,\n  }),\n}));\n\nconst ExpandButton = styled.button(({ theme }) => ({\n  fontFamily: theme.typography.fonts.mono,\n  color: theme.color.secondary,\n  marginBottom: '4px',\n  background: 'none',\n  border: 'none',\n}));\n\nconst Expandable = styled.div(codeCommon, ({ theme }) => ({\n  fontFamily: theme.typography.fonts.mono,\n  color: theme.color.secondary,\n  fontSize: theme.typography.size.s1, // overrides codeCommon\n  margin: 0,\n  whiteSpace: 'nowrap',\n  display: 'flex',\n  alignItems: 'center',\n}));\n\nconst Detail = styled.div<{ width: string }>(({ theme, width }) => ({\n  width,\n  minWidth: 200,\n  maxWidth: 800,\n  padding: 15,\n  // Don't remove the mono fontFamily here even if it seems useless, this is used by the browser to calculate the length of a \"ch\" unit.\n  fontFamily: theme.typography.fonts.mono,\n  fontSize: theme.typography.size.s1,\n  // Most custom stylesheet will reset the box-sizing to \"border-box\" and will break the tooltip.\n  boxSizing: 'content-box',\n\n  '& code': {\n    padding: '0 !important',\n  },\n}));\n\nconst ArrowIcon = styled(Icons)({\n  height: 10,\n  width: 10,\n  minWidth: 10,\n  marginLeft: 4,\n});\n\nconst EmptyArg = () => {\n  return <span>-</span>;\n};\n\nconst ArgText: FC<ArgTextProps> = ({ text, simple }) => {\n  return <Text simple={simple}>{text}</Text>;\n};\n\nconst calculateDetailWidth = memoize(1000)((detail: string): string => {\n  const lines = detail.split(/\\r?\\n/);\n\n  return `${Math.max(...lines.map((x) => x.length))}ch`;\n});\n\nconst getSummaryItems = (summary: string) => {\n  if (!summary) return [summary];\n  const splittedItems = summary.split('|');\n  const summaryItems = splittedItems.map((value) => value.trim());\n\n  return uniq(summaryItems);\n};\n\nconst renderSummaryItems = (summaryItems: string[], isExpanded = true) => {\n  let items = summaryItems;\n  if (!isExpanded) {\n    items = summaryItems.slice(0, ITEMS_BEFORE_EXPANSION);\n  }\n\n  return items.map((item) => <ArgText key={item} text={item === '' ? '\"\"' : item} />);\n};\n\nconst ArgSummary: FC<ArgSummaryProps> = ({ value, initialExpandedArgs }) => {\n  const { summary, detail } = value;\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(initialExpandedArgs || false);\n\n  if (summary === undefined || summary === null) return null;\n  // summary is used for the default value\n  // below check fixes not displaying default values for boolean typescript vars\n  const summaryAsString = typeof summary.toString === 'function' ? summary.toString() : summary;\n\n  if (detail == null) {\n    const cannotBeSafelySplitted = /[(){}[\\]<>]/.test(summaryAsString);\n\n    if (cannotBeSafelySplitted) {\n      return <ArgText text={summaryAsString} />;\n    }\n\n    const summaryItems = getSummaryItems(summaryAsString);\n    const itemsCount = summaryItems.length;\n    const hasManyItems = itemsCount > ITEMS_BEFORE_EXPANSION;\n\n    return hasManyItems ? (\n      <Summary isExpanded={isExpanded}>\n        {renderSummaryItems(summaryItems, isExpanded)}\n        <ExpandButton onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? 'Show less...' : `Show ${itemsCount - ITEMS_BEFORE_EXPANSION} more...`}\n        </ExpandButton>\n      </Summary>\n    ) : (\n      <Summary>{renderSummaryItems(summaryItems)}</Summary>\n    );\n  }\n\n  return (\n    <WithTooltipPure\n      closeOnOutsideClick\n      placement=\"bottom\"\n      visible={isOpen}\n      onVisibleChange={(isVisible) => {\n        setIsOpen(isVisible);\n      }}\n      tooltip={\n        <Detail width={calculateDetailWidth(detail)}>\n          <SyntaxHighlighter language=\"jsx\" format={false}>\n            {detail}\n          </SyntaxHighlighter>\n        </Detail>\n      }\n    >\n      <Expandable className=\"sbdocs-expandable\">\n        <span>{summaryAsString}</span>\n        <ArrowIcon icon={isOpen ? 'arrowup' : 'arrowdown'} />\n      </Expandable>\n    </WithTooltipPure>\n  );\n};\n\nexport const ArgValue: FC<ArgValueProps> = ({ value, initialExpandedArgs }) => {\n  return value == null ? (\n    <EmptyArg />\n  ) : (\n    <ArgSummary value={value} initialExpandedArgs={initialExpandedArgs} />\n  );\n};\n","import type { ComponentProps } from 'react';\nimport React, { lazy, Suspense } from 'react';\nimport type { ColorControlProps } from './Color';\n\nexport * from './types';\n\nexport * from './Boolean';\n\nexport type ColorProps = ColorControlProps;\n\nconst LazyColorControl = lazy(() => import('./Color'));\n\nexport const ColorControl = (props: ComponentProps<typeof LazyColorControl>) => (\n  <Suspense fallback={<div />}>\n    <LazyColorControl {...props} />\n  </Suspense>\n);\n\nexport * from './Date';\n\nexport * from './Number';\n\nexport * from './options';\nexport * from './Object';\n\nexport * from './Range';\n\nexport * from './Text';\n\nexport * from './Files';\n","import type { FC } from 'react';\nimport React, { useCallback, useState, useEffect } from 'react';\n\nimport {\n  BooleanControl,\n  ColorControl,\n  DateControl,\n  FilesControl,\n  NumberControl,\n  ObjectControl,\n  OptionsControl,\n  RangeControl,\n  TextControl,\n} from '../../controls';\nimport type { Args, ArgType } from './types';\n\nexport interface ArgControlProps {\n  row: ArgType;\n  arg: any;\n  updateArgs: (args: Args) => void;\n}\n\nconst Controls: Record<string, FC> = {\n  array: ObjectControl,\n  object: ObjectControl,\n  boolean: BooleanControl,\n  color: ColorControl,\n  date: DateControl,\n  number: NumberControl,\n  check: OptionsControl,\n  'inline-check': OptionsControl,\n  radio: OptionsControl,\n  'inline-radio': OptionsControl,\n  select: OptionsControl,\n  'multi-select': OptionsControl,\n  range: RangeControl,\n  text: TextControl,\n  file: FilesControl,\n};\n\nconst NoControl = () => <>-</>;\n\nexport const ArgControl: FC<ArgControlProps> = ({ row, arg, updateArgs }) => {\n  const { key, control } = row;\n\n  const [isFocused, setFocused] = useState(false);\n  // box because arg can be a fn (e.g. actions) and useState calls fn's\n  const [boxedValue, setBoxedValue] = useState({ value: arg });\n\n  useEffect(() => {\n    if (!isFocused) setBoxedValue({ value: arg });\n  }, [isFocused, arg]);\n\n  const onChange = useCallback(\n    (argVal: any) => {\n      setBoxedValue({ value: argVal });\n      updateArgs({ [key]: argVal });\n      return argVal;\n    },\n    [updateArgs, key]\n  );\n\n  const onBlur = useCallback(() => setFocused(false), []);\n  const onFocus = useCallback(() => setFocused(true), []);\n\n  if (!control || control.disable) return <NoControl />;\n\n  // row.name is a display name and not a suitable DOM input id or name - i might contain whitespace etc.\n  // row.key is a hash key and therefore a much safer choice\n  const props = { name: key, argType: row, value: boxedValue.value, onChange, onBlur, onFocus };\n  const Control = Controls[control.type] || NoControl;\n  return <Control {...props} {...control} controlType={control.type} />;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport { transparentize } from 'polished';\nimport { styled } from '@storybook/theming';\nimport { codeCommon } from '@storybook/components';\nimport type { ArgType, Args, TableAnnotation } from './types';\nimport { ArgJsDoc } from './ArgJsDoc';\nimport { ArgValue } from './ArgValue';\n\nimport type { ArgControlProps } from './ArgControl';\nimport { ArgControl } from './ArgControl';\n\ninterface ArgRowProps {\n  row: ArgType;\n  arg: any;\n  updateArgs?: (args: Args) => void;\n  compact?: boolean;\n  expandable?: boolean;\n  initialExpandedArgs?: boolean;\n}\n\nconst Name = styled.span({ fontWeight: 'bold' });\n\nconst Required = styled.span(({ theme }) => ({\n  color: theme.color.negative,\n  fontFamily: theme.typography.fonts.mono,\n  cursor: 'help',\n}));\n\nconst Description = styled.div(({ theme }) => ({\n  '&&': {\n    p: {\n      margin: '0 0 10px 0',\n    },\n    a: {\n      color: theme.color.secondary,\n    },\n  },\n\n  code: {\n    ...codeCommon({ theme }),\n    fontSize: 12,\n    fontFamily: theme.typography.fonts.mono,\n  },\n\n  '& code': {\n    margin: 0,\n    display: 'inline-block',\n  },\n\n  '& pre > code': {\n    whiteSpace: 'pre-wrap',\n  },\n}));\n\nconst Type = styled.div<{ hasDescription: boolean }>(({ theme, hasDescription }) => ({\n  color:\n    theme.base === 'light'\n      ? transparentize(0.1, theme.color.defaultText)\n      : transparentize(0.2, theme.color.defaultText),\n  marginTop: hasDescription ? 4 : 0,\n}));\n\nconst TypeWithJsDoc = styled.div<{ hasDescription: boolean }>(({ theme, hasDescription }) => ({\n  color:\n    theme.base === 'light'\n      ? transparentize(0.1, theme.color.defaultText)\n      : transparentize(0.2, theme.color.defaultText),\n  marginTop: hasDescription ? 12 : 0,\n  marginBottom: 12,\n}));\n\nconst StyledTd = styled.td<{ expandable: boolean }>(({ theme, expandable }) => ({\n  paddingLeft: expandable ? '40px !important' : '20px !important',\n}));\n\nexport const ArgRow: FC<ArgRowProps> = (props) => {\n  const { row, updateArgs, compact, expandable, initialExpandedArgs } = props;\n  const { name, description } = row;\n  const table = (row.table || {}) as TableAnnotation;\n  const type = table.type || row.type;\n  const defaultValue = table.defaultValue || row.defaultValue;\n  const required = row.type?.required;\n  const hasDescription = description != null && description !== '';\n\n  return (\n    <tr>\n      <StyledTd expandable={expandable}>\n        <Name>{name}</Name>\n        {required ? <Required title=\"Required\">*</Required> : null}\n      </StyledTd>\n      {compact ? null : (\n        <td>\n          {hasDescription && (\n            <Description>\n              <Markdown>{description}</Markdown>\n            </Description>\n          )}\n          {table.jsDocTags != null ? (\n            <>\n              <TypeWithJsDoc hasDescription={hasDescription}>\n                <ArgValue value={type} initialExpandedArgs={initialExpandedArgs} />\n              </TypeWithJsDoc>\n              <ArgJsDoc tags={table.jsDocTags} />\n            </>\n          ) : (\n            <Type hasDescription={hasDescription}>\n              <ArgValue value={type} initialExpandedArgs={initialExpandedArgs} />\n            </Type>\n          )}\n        </td>\n      )}\n      {compact ? null : (\n        <td>\n          <ArgValue value={defaultValue} initialExpandedArgs={initialExpandedArgs} />\n        </td>\n      )}\n      {updateArgs ? (\n        <td>\n          <ArgControl {...(props as ArgControlProps)} />\n        </td>\n      ) : null}\n    </tr>\n  );\n};\n","import type { FC } from 'react';\nimport React, { useState } from 'react';\nimport { transparentize, lighten } from 'polished';\nimport { styled } from '@storybook/theming';\nimport { Icons } from '@storybook/components';\n\ntype Level = 'section' | 'subsection';\n\nexport interface SectionRowProps {\n  children?: React.ReactNode;\n  label: string;\n  level: Level;\n  initialExpanded?: boolean;\n  colSpan: number;\n}\n\nconst ExpanderIcon = styled(Icons)(({ theme }) => ({\n  marginRight: 8,\n  marginLeft: -10,\n  marginTop: -2, // optical alignment\n  height: 12,\n  width: 12,\n  color:\n    theme.base === 'light'\n      ? transparentize(0.25, theme.color.defaultText)\n      : transparentize(0.3, theme.color.defaultText),\n  border: 'none',\n  display: 'inline-block',\n}));\n\nconst FlexWrapper = styled.span(({ theme }) => ({\n  display: 'flex',\n  lineHeight: '20px',\n  alignItems: 'center',\n}));\n\nconst Section = styled.td(({ theme }) => ({\n  position: 'relative',\n  letterSpacing: '0.35em',\n  textTransform: 'uppercase',\n  fontWeight: theme.typography.weight.bold,\n  fontSize: theme.typography.size.s1 - 1,\n  color:\n    theme.base === 'light'\n      ? transparentize(0.4, theme.color.defaultText)\n      : transparentize(0.6, theme.color.defaultText),\n  background: `${theme.background.app} !important`,\n  '& ~ td': {\n    background: `${theme.background.app} !important`,\n  },\n}));\n\nconst Subsection = styled.td(({ theme }) => ({\n  position: 'relative',\n  fontWeight: theme.typography.weight.bold,\n  fontSize: theme.typography.size.s2 - 1,\n  background: theme.background.app,\n}));\n\nconst StyledTd = styled.td(() => ({\n  position: 'relative',\n}));\n\nconst StyledTr = styled.tr(({ theme }) => ({\n  '&:hover > td': {\n    backgroundColor: `${lighten(0.005, theme.background.app)} !important`,\n    boxShadow: `${theme.color.mediumlight} 0 - 1px 0 0 inset`,\n    cursor: 'row-resize',\n  },\n}));\n\nconst ClickIntercept = styled.button(() => ({\n  // reset button style\n  background: 'none',\n  border: 'none',\n  padding: '0',\n  font: 'inherit',\n\n  // add custom style\n  position: 'absolute',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  height: '100%',\n  width: '100%',\n  color: 'transparent',\n  cursor: 'row-resize !important',\n}));\n\nexport const SectionRow: FC<SectionRowProps> = ({\n  level = 'section',\n  label,\n  children,\n  initialExpanded = true,\n  colSpan = 3,\n}) => {\n  const [expanded, setExpanded] = useState(initialExpanded);\n  const Level = level === 'subsection' ? Subsection : Section;\n  // @ts-expect-error (Converted from ts-ignore)\n  const itemCount = children?.length || 0;\n  const caption = level === 'subsection' ? `${itemCount} item${itemCount !== 1 ? 's' : ''}` : '';\n  const icon = expanded ? 'arrowdown' : 'arrowright';\n\n  const helperText = `${expanded ? 'Hide' : 'Show'} ${\n    level === 'subsection' ? itemCount : label\n  } item${itemCount !== 1 ? 's' : ''}`;\n\n  return (\n    <>\n      <StyledTr title={helperText}>\n        <Level colSpan={1}>\n          <ClickIntercept onClick={(e) => setExpanded(!expanded)} tabIndex={0}>\n            {helperText}\n          </ClickIntercept>\n          <FlexWrapper>\n            <ExpanderIcon icon={icon} />\n            {label}\n          </FlexWrapper>\n        </Level>\n        <StyledTd colSpan={colSpan - 1}>\n          <ClickIntercept\n            onClick={(e) => setExpanded(!expanded)}\n            tabIndex={-1}\n            style={{ outline: 'none' }}\n          >\n            {helperText}\n          </ClickIntercept>\n          {expanded ? null : caption}\n        </StyledTd>\n      </StyledTr>\n      {expanded ? children : null}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport pickBy from 'lodash/pickBy.js';\nimport { styled } from '@storybook/theming';\nimport { transparentize } from 'polished';\nimport { includeConditionalArg } from '@storybook/csf';\nimport { once } from '@storybook/client-logger';\nimport { IconButton, Icons, Link, ResetWrapper } from '@storybook/components';\n\nimport { ArgRow } from './ArgRow';\nimport { SectionRow } from './SectionRow';\nimport type { ArgType, ArgTypes, Args, Globals } from './types';\n// eslint-disable-next-line import/no-cycle\nimport { EmptyBlock } from '..';\n\nexport const TableWrapper = styled.table<{\n  compact?: boolean;\n  inAddonPanel?: boolean;\n  isLoading?: boolean;\n}>(\n  ({ theme, compact, inAddonPanel }) => ({\n    '&&': {\n      // Resets for cascading/system styles\n      borderSpacing: 0,\n      color: theme.color.defaultText,\n\n      'td, th': {\n        padding: 0,\n        border: 'none',\n        verticalAlign: 'top',\n        textOverflow: 'ellipsis',\n      },\n      // End Resets\n\n      fontSize: theme.typography.size.s2 - 1,\n      lineHeight: '20px',\n      textAlign: 'left',\n      width: '100%',\n\n      // Margin collapse\n      marginTop: inAddonPanel ? 0 : 25,\n      marginBottom: inAddonPanel ? 0 : 40,\n\n      'thead th:first-of-type, td:first-of-type': {\n        // intentionally specify thead here\n        width: '25%',\n      },\n\n      'th:first-of-type, td:first-of-type': {\n        paddingLeft: 20,\n      },\n\n      'th:nth-of-type(2), td:nth-of-type(2)': {\n        ...(compact\n          ? null\n          : {\n              // Description column\n              width: '35%',\n            }),\n      },\n\n      'td:nth-of-type(3)': {\n        ...(compact\n          ? null\n          : {\n              // Defaults column\n              width: '15%',\n            }),\n      },\n\n      'th:last-of-type, td:last-of-type': {\n        paddingRight: 20,\n        ...(compact\n          ? null\n          : {\n              // Controls column\n              width: '25%',\n            }),\n      },\n\n      th: {\n        color:\n          theme.base === 'light'\n            ? transparentize(0.25, theme.color.defaultText)\n            : transparentize(0.45, theme.color.defaultText),\n        paddingTop: 10,\n        paddingBottom: 10,\n        paddingLeft: 15,\n        paddingRight: 15,\n      },\n\n      td: {\n        paddingTop: '10px',\n        paddingBottom: '10px',\n\n        '&:not(:first-of-type)': {\n          paddingLeft: 15,\n          paddingRight: 15,\n        },\n\n        '&:last-of-type': {\n          paddingRight: 20,\n        },\n      },\n\n      // Makes border alignment consistent w/other DocBlocks\n      marginLeft: inAddonPanel ? 0 : 1,\n      marginRight: inAddonPanel ? 0 : 1,\n\n      tbody: {\n        // Safari doesn't love shadows on tbody so we need to use a shadow filter. In order to do this,\n        // the table cells all need to be solid so they have a background color applied.\n        // I wasn't sure what kinds of content go in these tables so I was extra specific with selectors\n        // to avoid unexpected surprises.\n        ...(inAddonPanel\n          ? null\n          : {\n              filter:\n                theme.base === 'light'\n                  ? `drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.10))`\n                  : `drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.20))`,\n            }),\n\n        '> tr > *': {\n          // For filter to work properly, the table cells all need to be opaque.\n          background: theme.background.content,\n          borderTop: `1px solid ${theme.appBorderColor}`,\n        },\n\n        ...(inAddonPanel\n          ? null\n          : {\n              // This works and I don't know why. :)\n              '> tr:first-of-type > *': {\n                borderBlockStart: `1px solid ${theme.appBorderColor}`,\n              },\n              '> tr:last-of-type > *': {\n                borderBlockEnd: `1px solid ${theme.appBorderColor}`,\n              },\n              '> tr > *:first-of-type': {\n                borderInlineStart: `1px solid ${theme.appBorderColor}`,\n              },\n              '> tr > *:last-of-type': {\n                borderInlineEnd: `1px solid ${theme.appBorderColor}`,\n              },\n\n              // Thank you, Safari, for making me write code like this.\n              '> tr:first-of-type > td:first-of-type': {\n                borderTopLeftRadius: theme.appBorderRadius,\n              },\n              '> tr:first-of-type > td:last-of-type': {\n                borderTopRightRadius: theme.appBorderRadius,\n              },\n              '> tr:last-of-type > td:first-of-type': {\n                borderBottomLeftRadius: theme.appBorderRadius,\n              },\n              '> tr:last-of-type > td:last-of-type': {\n                borderBottomRightRadius: theme.appBorderRadius,\n              },\n            }),\n      },\n      // End awesome table styling\n    },\n  }),\n  ({ isLoading, theme }) =>\n    isLoading\n      ? {\n          'th span, td span, td button': {\n            display: 'inline',\n            backgroundColor: theme.appBorderColor,\n            animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,\n            color: 'transparent',\n            boxShadow: 'none',\n            borderRadius: 0,\n          },\n        }\n      : {}\n);\n\nconst StyledIconButton = styled(IconButton as any)(({ theme }) => ({\n  color: theme.barTextColor,\n  margin: '-4px -12px -4px 0',\n}));\n\nconst ControlHeadingWrapper = styled.span({\n  display: 'flex',\n  justifyContent: 'space-between',\n});\n\nexport enum ArgsTableError {\n  NO_COMPONENT = 'No component found.',\n  ARGS_UNSUPPORTED = 'Args unsupported. See Args documentation for your framework.',\n}\n\nexport type SortType = 'alpha' | 'requiredFirst' | 'none';\ntype SortFn = (a: ArgType, b: ArgType) => number;\n\nconst sortFns: Record<SortType, SortFn | null> = {\n  alpha: (a: ArgType, b: ArgType) => a.name.localeCompare(b.name),\n  requiredFirst: (a: ArgType, b: ArgType) =>\n    Number(!!b.type?.required) - Number(!!a.type?.required) || a.name.localeCompare(b.name),\n  none: undefined,\n};\n\nexport interface ArgsTableOptionProps {\n  children?: React.ReactNode;\n  updateArgs?: (args: Args) => void;\n  resetArgs?: (argNames?: string[]) => void;\n  compact?: boolean;\n  inAddonPanel?: boolean;\n  initialExpandedArgs?: boolean;\n  isLoading?: boolean;\n  sort?: SortType;\n}\nexport interface ArgsTableDataProps {\n  rows: ArgTypes;\n  args?: Args;\n  globals?: Globals;\n}\n\nexport interface ArgsTableErrorProps {\n  error: ArgsTableError;\n}\nexport interface ArgsTableLoadingProps {\n  isLoading: true;\n}\n\nconst rowLoadingData = (key: string) => ({\n  key,\n  name: 'propertyName',\n  description: 'This is a short description',\n  control: { type: 'text' },\n  table: {\n    type: { summary: 'summary' },\n    defaultValue: { summary: 'defaultValue' },\n  },\n});\n\nexport const argsTableLoadingData: ArgsTableDataProps = {\n  rows: {\n    row1: rowLoadingData('row1'),\n    row2: rowLoadingData('row2'),\n    row3: rowLoadingData('row3'),\n  },\n};\n\nexport type ArgsTableProps = ArgsTableOptionProps &\n  (ArgsTableDataProps | ArgsTableErrorProps | ArgsTableLoadingProps);\n\ntype Rows = ArgType[];\ntype Subsection = Rows;\ntype Section = {\n  ungrouped: Rows;\n  subsections: Record<string, Subsection>;\n};\ntype Sections = {\n  ungrouped: Rows;\n  ungroupedSubsections: Record<string, Subsection>;\n  sections: Record<string, Section>;\n};\n\nconst groupRows = (rows: ArgType, sort: SortType) => {\n  const sections: Sections = { ungrouped: [], ungroupedSubsections: {}, sections: {} };\n  if (!rows) return sections;\n\n  Object.entries(rows).forEach(([key, row]) => {\n    const { category, subcategory } = row?.table || {};\n    if (category) {\n      const section = sections.sections[category] || { ungrouped: [], subsections: {} };\n      if (!subcategory) {\n        section.ungrouped.push({ key, ...row });\n      } else {\n        const subsection = section.subsections[subcategory] || [];\n        subsection.push({ key, ...row });\n        section.subsections[subcategory] = subsection;\n      }\n      sections.sections[category] = section;\n    } else if (subcategory) {\n      const subsection = sections.ungroupedSubsections[subcategory] || [];\n      subsection.push({ key, ...row });\n      sections.ungroupedSubsections[subcategory] = subsection;\n    } else {\n      sections.ungrouped.push({ key, ...row });\n    }\n  });\n\n  // apply sort\n  const sortFn = sortFns[sort];\n\n  const sortSubsection = (record: Record<string, Subsection>) => {\n    if (!sortFn) return record;\n    return Object.keys(record).reduce<Record<string, Subsection>>(\n      (acc, cur) => ({\n        ...acc,\n        [cur]: record[cur].sort(sortFn),\n      }),\n      {}\n    );\n  };\n\n  const sorted = {\n    ungrouped: sections.ungrouped.sort(sortFn),\n    ungroupedSubsections: sortSubsection(sections.ungroupedSubsections),\n    sections: Object.keys(sections.sections).reduce<Record<string, Section>>(\n      (acc, cur) => ({\n        ...acc,\n        [cur]: {\n          ungrouped: sections.sections[cur].ungrouped.sort(sortFn),\n          subsections: sortSubsection(sections.sections[cur].subsections),\n        },\n      }),\n      {}\n    ),\n  };\n\n  return sorted;\n};\n\n/**\n * Wrap CSF's `includeConditionalArg` in a try catch so that invalid\n * conditionals don't break the entire UI. We can safely swallow the\n * error because `includeConditionalArg` is also called in the preview\n * in `prepareStory`, and that exception will be bubbled up into the\n * UI in a red screen. Nevertheless, we log the error here just in case.\n */\nconst safeIncludeConditionalArg = (row: ArgType, args: Args, globals: Globals) => {\n  try {\n    return includeConditionalArg(row, args, globals);\n  } catch (err) {\n    once.warn(err.message);\n    return false;\n  }\n};\n\n/**\n * Display the props for a component as a props table. Each row is a collection of\n * ArgDefs, usually derived from docgen info for the component.\n */\nexport const ArgsTable: FC<ArgsTableProps> = (props) => {\n  if ('error' in props) {\n    return (\n      <EmptyBlock>\n        {props.error}&nbsp;\n        <Link href=\"http://storybook.js.org/docs/\" target=\"_blank\" withArrow>\n          Read the docs\n        </Link>\n      </EmptyBlock>\n    );\n  }\n\n  const {\n    updateArgs,\n    resetArgs,\n    compact,\n    inAddonPanel,\n    initialExpandedArgs,\n    sort = 'none',\n  } = props;\n  const isLoading = 'isLoading' in props;\n  const { rows, args, globals } = 'rows' in props ? props : argsTableLoadingData;\n\n  const groups = groupRows(\n    pickBy(\n      rows,\n      (row) => !row?.table?.disable && safeIncludeConditionalArg(row, args || {}, globals || {})\n    ),\n    sort\n  );\n\n  if (\n    groups.ungrouped.length === 0 &&\n    Object.entries(groups.sections).length === 0 &&\n    Object.entries(groups.ungroupedSubsections).length === 0\n  ) {\n    return (\n      <EmptyBlock>\n        No inputs found for this component.&nbsp;\n        <Link href=\"http://storybook.js.org/docs/\" target=\"_blank\" withArrow>\n          Read the docs\n        </Link>\n      </EmptyBlock>\n    );\n  }\n\n  let colSpan = 1;\n  if (updateArgs) colSpan += 1;\n  if (!compact) colSpan += 2;\n  const expandable = Object.keys(groups.sections).length > 0;\n\n  const common = { updateArgs, compact, inAddonPanel, initialExpandedArgs };\n\n  return (\n    <ResetWrapper>\n      <TableWrapper\n        aria-hidden={isLoading}\n        {...{ compact, inAddonPanel, isLoading }}\n        className=\"docblock-argstable sb-unstyled\"\n      >\n        <thead className=\"docblock-argstable-head\">\n          <tr>\n            <th>\n              <span>Name</span>\n            </th>\n            {compact ? null : (\n              <th>\n                <span>Description</span>\n              </th>\n            )}\n            {compact ? null : (\n              <th>\n                <span>Default</span>\n              </th>\n            )}\n            {updateArgs ? (\n              <th>\n                <ControlHeadingWrapper>\n                  Control{' '}\n                  {!isLoading && resetArgs && (\n                    <StyledIconButton onClick={() => resetArgs()} title=\"Reset controls\">\n                      <Icons icon=\"undo\" aria-hidden />\n                    </StyledIconButton>\n                  )}\n                </ControlHeadingWrapper>\n              </th>\n            ) : null}\n          </tr>\n        </thead>\n        <tbody className=\"docblock-argstable-body\">\n          {groups.ungrouped.map((row) => (\n            <ArgRow key={row.key} row={row} arg={args && args[row.key]} {...common} />\n          ))}\n\n          {Object.entries(groups.ungroupedSubsections).map(([subcategory, subsection]) => (\n            <SectionRow key={subcategory} label={subcategory} level=\"subsection\" colSpan={colSpan}>\n              {subsection.map((row) => (\n                <ArgRow\n                  key={row.key}\n                  row={row}\n                  arg={args && args[row.key]}\n                  expandable={expandable}\n                  {...common}\n                />\n              ))}\n            </SectionRow>\n          ))}\n\n          {Object.entries(groups.sections).map(([category, section]) => (\n            <SectionRow key={category} label={category} level=\"section\" colSpan={colSpan}>\n              {section.ungrouped.map((row) => (\n                <ArgRow key={row.key} row={row} arg={args && args[row.key]} {...common} />\n              ))}\n              {Object.entries(section.subsections).map(([subcategory, subsection]) => (\n                <SectionRow\n                  key={subcategory}\n                  label={subcategory}\n                  level=\"subsection\"\n                  colSpan={colSpan}\n                >\n                  {subsection.map((row) => (\n                    <ArgRow\n                      key={row.key}\n                      row={row}\n                      arg={args && args[row.key]}\n                      expandable={expandable}\n                      {...common}\n                    />\n                  ))}\n                </SectionRow>\n              ))}\n            </SectionRow>\n          ))}\n        </tbody>\n      </TableWrapper>\n    </ResetWrapper>\n  );\n};\n"],"names":["Table","styled","theme","codeCommon","ArgJsDoc","tags","params","x","hasDisplayableParams","hasDisplayableDeprecated","hasDisplayableReturns","jsx","Fragment","jsxs","ITEMS_BEFORE_EXPANSION","Summary","isExpanded","Text","simple","ExpandButton","Expandable","Detail","width","ArrowIcon","Icons","EmptyArg","ArgText","text","calculateDetailWidth","memoize","detail","lines","getSummaryItems","summary","summaryItems","value","uniq","renderSummaryItems","items","item","ArgSummary","initialExpandedArgs","isOpen","setIsOpen","useState","setIsExpanded","summaryAsString","itemsCount","WithTooltipPure","isVisible","SyntaxHighlighter","ArgValue","LazyColorControl","lazy","__vitePreload","ColorControl","props","Suspense","Controls","ObjectControl","BooleanControl","DateControl","NumberControl","OptionsControl","RangeControl","TextControl","FilesControl","NoControl","ArgControl","row","arg","updateArgs","key","control","isFocused","setFocused","boxedValue","setBoxedValue","useEffect","onChange","useCallback","argVal","onBlur","onFocus","Control","Name","Required","Description","Type","hasDescription","transparentize","TypeWithJsDoc","StyledTd","expandable","ArgRow","compact","name","description","table","type","defaultValue","required","_a","Markdown","ExpanderIcon","FlexWrapper","Section","Subsection","StyledTr","lighten","ClickIntercept","SectionRow","level","label","children","initialExpanded","colSpan","expanded","setExpanded","Level","itemCount","caption","icon","helperText","e","once","TableWrapper","inAddonPanel","isLoading","StyledIconButton","IconButton","ControlHeadingWrapper","ArgsTableError","ArgsTableError2","sortFns","a","b","_b","rowLoadingData","argsTableLoadingData","groupRows","rows","sort","sections","category","subcategory","section","subsection","sortFn","sortSubsection","record","acc","cur","safeIncludeConditionalArg","args","globals","includeConditionalArg","err","ArgsTable","EmptyBlock","Link","resetArgs","groups","pickBy","common","ResetWrapper"],"mappings":"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"}