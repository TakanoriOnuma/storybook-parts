{"version":3,"file":"Canvas-97014b2f.js","sources":["../../ui/blocks/src/blocks/Canvas.tsx"],"sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport React, { Children, useContext } from 'react';\nimport type { FC, ReactElement, ReactNode } from 'react';\nimport type { ModuleExport, ModuleExports, PreparedStory, Renderer } from '@storybook/types';\nimport { deprecate } from '@storybook/client-logger';\nimport dedent from 'ts-dedent';\nimport type { Layout, PreviewProps as PurePreviewProps } from '../components';\nimport { Preview as PurePreview, PreviewSkeleton } from '../components';\nimport type { DocsContextProps } from './DocsContext';\nimport { DocsContext } from './DocsContext';\nimport type { SourceContextProps } from './SourceContainer';\nimport { SourceContext } from './SourceContainer';\nimport type { SourceProps } from './Source';\nimport { useSourceProps, SourceState as DeprecatedSourceState, SourceState } from './Source';\nimport { useStories } from './useStory';\nimport type { StoryProps } from './Story';\nimport { getStoryId, Story } from './Story';\nimport { useOf } from './useOf';\n\nexport { DeprecatedSourceState as SourceState };\n\ntype DeprecatedCanvasProps = {\n  /**\n   * @deprecated multiple stories are not supported\n   */\n  isColumn?: boolean;\n  /**\n   * @deprecated multiple stories are not supported\n   */\n  columns?: number;\n  /**\n   * @deprecated use `sourceState` instead\n   */\n  withSource?: DeprecatedSourceState;\n  /**\n   * @deprecated use `source.code` instead\n   */\n  mdxSource?: string;\n  /**\n   * @deprecated reference stories with the `of` prop instead\n   */\n  children?: ReactNode;\n};\n\ntype CanvasProps = Pick<PurePreviewProps, 'withToolbar' | 'additionalActions' | 'className'> & {\n  /**\n   * Pass the export defining a story to render that story\n   *\n   * ```jsx\n   * import { Meta, Canvas } from '@storybook/blocks';\n   * import * as ButtonStories from './Button.stories';\n   *\n   * <Meta of={ButtonStories} />\n   * <Canvas of={ButtonStories.Primary} />\n   * ```\n   */\n  of?: ModuleExport;\n  /**\n   * Pass all exports of the CSF file if this MDX file is unattached\n   *\n   * ```jsx\n   * import { Canvas } from '@storybook/blocks';\n   * import * as ButtonStories from './Button.stories';\n   *\n   * <Canvas of={ButtonStories.Primary} meta={ButtonStories} />\n   * ```\n   */\n  meta?: ModuleExports;\n  /**\n   * Specify the initial state of the source panel\n   * hidden: the source panel is hidden by default\n   * shown: the source panel is shown by default\n   * none: the source panel is not available and the button to show it is hidden\n   * @default 'hidden'\n   */\n  sourceState?: 'hidden' | 'shown' | 'none';\n  /**\n   * how to layout the story within the canvas\n   * padded: the story has padding within the canvas\n   * fullscreen: the story is rendered edge to edge within the canvas\n   * centered: the story is centered within the canvas\n   * @default 'padded'\n   */\n  layout?: Layout;\n  /**\n   * @see {SourceProps}\n   */\n  source?: Omit<SourceProps, 'dark'>;\n  /**\n   * @see {StoryProps}\n   */\n  story?: Pick<StoryProps, 'inline' | 'height' | 'autoplay' | '__forceInitialArgs' | '__primary'>;\n};\n\nconst useDeprecatedPreviewProps = (\n  {\n    withSource,\n    mdxSource,\n    children,\n    layout: layoutProp,\n    ...props\n  }: DeprecatedCanvasProps & { of?: ModuleExport; layout?: Layout },\n  docsContext: DocsContextProps<Renderer>,\n  sourceContext: SourceContextProps\n) => {\n  /*\n  get all story IDs by traversing through the children,\n  filter out any non-story children (e.g. text nodes)\n  and then get the id from each story depending on available props\n  */\n  const storyIds = (Children.toArray(children) as ReactElement[])\n    .filter((c) => c.props && (c.props.id || c.props.name || c.props.of))\n    .map((c) => getStoryId(c.props, docsContext));\n\n  const stories = useStories(storyIds, docsContext);\n  const isLoading = stories.some((s) => !s);\n  const sourceProps = useSourceProps(\n    {\n      ...(mdxSource ? { code: decodeURI(mdxSource) } : { ids: storyIds }),\n      ...(props.of && { of: props.of }),\n    },\n    docsContext,\n    sourceContext\n  );\n  if (withSource === SourceState.NONE) {\n    return { isLoading, previewProps: props };\n  }\n\n  // if the user has specified a layout prop, use that...\n  let layout = layoutProp;\n  // ...otherwise, try to infer it from the children 'parameters' prop\n  Children.forEach(children, (child) => {\n    if (layout) {\n      return;\n    }\n    layout = (child as ReactElement)?.props?.parameters?.layout;\n  });\n  // ...otherwise, try to infer it from the story parameters\n  stories.forEach((story) => {\n    if (layout || !story) {\n      return;\n    }\n    layout = story?.parameters.layout ?? story.parameters.docs?.canvas?.layout;\n  });\n\n  return {\n    isLoading,\n    previewProps: {\n      ...props, // pass through columns etc.\n      layout: layout ?? 'padded',\n      withSource: sourceProps,\n      isExpanded: (withSource || sourceProps.state) === SourceState.OPEN,\n    },\n  };\n};\n\nexport const Canvas: FC<CanvasProps & DeprecatedCanvasProps> = (props) => {\n  const docsContext = useContext(DocsContext);\n  const sourceContext = useContext(SourceContext);\n  const { children, of, source } = props;\n  if ('of' in props && of === undefined) {\n    throw new Error('Unexpected `of={undefined}`, did you mistype a CSF file reference?');\n  }\n\n  const { isLoading, previewProps } = useDeprecatedPreviewProps(props, docsContext, sourceContext);\n\n  let story: PreparedStory;\n  let sourceProps;\n  /**\n   * useOf and useSourceProps will throw if they can't find the story, in the scenario where\n   * the doc is unattached (no primary story) and 'of' is undefined.\n   * That scenario is valid in the deprecated API, where children is used as story refs rather than 'of'.\n   * So if children is passed we allow the error to be swallowed and we'll use them instead.\n   * We use two separate try blocks and throw the error afterwards to not break the rules of hooks.\n   */\n  let hookError;\n  try {\n    ({ story } = useOf(of || 'story', ['story']));\n  } catch (error) {\n    if (!children) {\n      hookError = error;\n    }\n  }\n  try {\n    sourceProps = useSourceProps({ ...source, ...(of && { of }) }, docsContext, sourceContext);\n  } catch (error) {\n    if (!children) {\n      hookError = error;\n    }\n  }\n  if (hookError) {\n    // eslint-disable-next-line @typescript-eslint/no-throw-literal\n    throw hookError;\n  }\n\n  if (props.withSource) {\n    deprecate(dedent`Setting source state with \\`withSource\\` is deprecated, please use \\`sourceState\\` with 'hidden', 'shown' or 'none' instead. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#canvas-block\n    `);\n  }\n  if (props.mdxSource) {\n    deprecate(dedent`Setting source code with \\`mdxSource\\` is deprecated, please use source={{code: '...'}} instead. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#canvas-block\n    `);\n  }\n  if (props.isColumn !== undefined || props.columns !== undefined) {\n    deprecate(dedent`\\`isColumn\\` and \\`columns\\` props are deprecated as the Canvas block now only supports showing a single story. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#canvas-block\n    `);\n  }\n  if (children) {\n    deprecate(dedent`Passing children to Canvas is deprecated, please use the \\`of\\` prop instead to reference a story. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#canvas-block\n  `);\n    return isLoading ? (\n      <PreviewSkeleton />\n    ) : (\n      <PurePreview {...previewProps}>{children}</PurePreview>\n    );\n  }\n\n  const layout =\n    props.layout ?? story.parameters.layout ?? story.parameters.docs?.canvas?.layout ?? 'padded';\n  const withToolbar = props.withToolbar ?? story.parameters.docs?.canvas?.withToolbar ?? false;\n  const additionalActions =\n    props.additionalActions ?? story.parameters.docs?.canvas?.additionalActions;\n  const sourceState = props.sourceState ?? story.parameters.docs?.canvas?.sourceState ?? 'hidden';\n  const className = props.className ?? story.parameters.docs?.canvas?.className;\n\n  return (\n    <PurePreview\n      withSource={sourceState === 'none' ? undefined : sourceProps}\n      isExpanded={sourceState === 'shown'}\n      withToolbar={withToolbar}\n      additionalActions={additionalActions}\n      className={className}\n      layout={layout}\n    >\n      <Story of={of || story.moduleExport} meta={props.meta} {...props.story} />\n    </PurePreview>\n  );\n};\n"],"names":["deprecate","useDeprecatedPreviewProps","withSource","mdxSource","children","layoutProp","props","docsContext","sourceContext","storyIds","Children","c","getStoryId","stories","useStories","isLoading","s","sourceProps","useSourceProps","SourceState","layout","child","_b","_a","story","Canvas","useContext","DocsContext","SourceContext","of","source","previewProps","hookError","useOf","error","dedent","jsx","PreviewSkeleton","PurePreview","withToolbar","_d","_c","additionalActions","_f","_e","sourceState","_h","_g","className","_j","_i","Story"],"mappings":"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"}