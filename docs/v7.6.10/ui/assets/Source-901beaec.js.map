{"version":3,"file":"Source-901beaec.js","sources":["../../ui/blocks/src/blocks/SourceContainer.tsx","../../ui/blocks/src/blocks/Source.tsx"],"sourcesContent":["import type { FC, Context, PropsWithChildren } from 'react';\nimport React, { createContext, useEffect, useState } from 'react';\n\nimport type { Channel } from '@storybook/channels';\n\nimport { SNIPPET_RENDERED } from '@storybook/docs-tools';\nimport type { SyntaxHighlighterFormatTypes } from '@storybook/components';\nimport type { StoryId, Args } from '@storybook/types';\n\nimport { stringify } from 'telejson';\n\ntype ArgsHash = string;\nexport function argsHash(args: Args): ArgsHash {\n  return stringify(args);\n}\n\nexport interface SourceItem {\n  code: string;\n  format?: SyntaxHighlighterFormatTypes;\n}\n\nexport type StorySources = Record<StoryId, Record<ArgsHash, SourceItem>>;\n\nexport interface SourceContextProps {\n  sources: StorySources;\n  setSource?: (id: StoryId, item: SourceItem) => void;\n}\n\nexport const SourceContext: Context<SourceContextProps> = createContext({ sources: {} });\n\ntype SnippetRenderedEvent = {\n  id: StoryId;\n  source: string;\n  args?: Args;\n  format?: SyntaxHighlighterFormatTypes;\n};\n\nexport const UNKNOWN_ARGS_HASH = '--unknown--';\n\nexport const SourceContainer: FC<PropsWithChildren<{ channel: Channel }>> = ({\n  children,\n  channel,\n}) => {\n  const [sources, setSources] = useState<StorySources>({});\n\n  useEffect(() => {\n    const handleSnippetRendered = (\n      idOrEvent: StoryId | SnippetRenderedEvent,\n      inputSource: string = null,\n      inputFormat: SyntaxHighlighterFormatTypes = false\n    ) => {\n      const {\n        id,\n        args = undefined,\n        source,\n        format,\n      } = typeof idOrEvent === 'string'\n        ? {\n            id: idOrEvent,\n            source: inputSource,\n            format: inputFormat,\n          }\n        : idOrEvent;\n\n      const hash = args ? argsHash(args) : UNKNOWN_ARGS_HASH;\n      // FIXME: In SB8.0 when we remove the Source block deprecations,\n      // we should restore this optimizationand make the Source block\n      // smarter about understanding when its args change.\n      //\n      // See https://github.com/storybookjs/storybook/pull/22807\n      //\n      // optimization: don't update if the source is the same\n      // if (deepEqual(currentSource, { code: source, format })) return;\n\n      setSources((current) => {\n        const newSources = {\n          ...current,\n          [id]: {\n            ...current[id],\n            [hash]: { code: source, format },\n          },\n        };\n\n        return newSources;\n      });\n    };\n\n    channel.on(SNIPPET_RENDERED, handleSnippetRendered);\n\n    return () => channel.off(SNIPPET_RENDERED, handleSnippetRendered);\n  }, []);\n\n  return <SourceContext.Provider value={{ sources }}>{children}</SourceContext.Provider>;\n};\n","import type { ComponentProps, FC } from 'react';\nimport React, { useContext } from 'react';\nimport type {\n  StoryId,\n  PreparedStory,\n  ModuleExport,\n  Args,\n  StoryContextForLoaders,\n} from '@storybook/types';\nimport { SourceType } from '@storybook/docs-tools';\n\nimport { deprecate } from '@storybook/client-logger';\nimport dedent from 'ts-dedent';\nimport type { SourceCodeProps } from '../components/Source';\nimport { Source as PureSource, SourceError } from '../components/Source';\nimport type { DocsContextProps } from './DocsContext';\nimport { DocsContext } from './DocsContext';\nimport type { SourceContextProps, SourceItem } from './SourceContainer';\nimport { UNKNOWN_ARGS_HASH, argsHash, SourceContext } from './SourceContainer';\n\nimport { useStories } from './useStory';\n\nexport enum SourceState {\n  OPEN = 'open',\n  CLOSED = 'closed',\n  NONE = 'none',\n}\n\ntype SourceParameters = SourceCodeProps & {\n  /**\n   * Where to read the source code from, see `SourceType`\n   */\n  type?: SourceType;\n  /**\n   * Transform the detected source for display\n   *\n   * @deprecated use `transform` prop instead\n   */\n  transformSource?: (code: string, storyContext: StoryContextForLoaders) => string;\n  /**\n   * Transform the detected source for display\n   */\n  transform?: (code: string, storyContext: StoryContextForLoaders) => string;\n  /**\n   * Internal: set by our CSF loader (`enrichCsf` in `@storybook/csf-tools`).\n   */\n  originalSource?: string;\n};\n\nexport type SourceProps = SourceParameters & {\n  /**\n   * Pass the export defining a story to render its source\n   *\n   * ```jsx\n   * import { Source } from '@storybook/blocks';\n   * import * as ButtonStories from './Button.stories';\n   *\n   * <Source of={ButtonStories.Primary} />\n   * ```\n   */\n  of?: ModuleExport;\n\n  /** @deprecated use of={storyExport} instead */\n  id?: string;\n\n  /** @deprecated use of={storyExport} instead */\n  ids?: string[];\n\n  /**\n   * Internal prop to control if a story re-renders on args updates\n   */\n  __forceInitialArgs?: boolean;\n};\n\nconst getSourceState = (stories: PreparedStory[]) => {\n  const states = stories.map((story) => story.parameters.docs?.source?.state).filter(Boolean);\n  if (states.length === 0) return SourceState.CLOSED;\n  // FIXME: handling multiple stories is a pain\n  return states[0];\n};\n\nconst getStorySource = (\n  storyId: StoryId,\n  args: Args,\n  sourceContext: SourceContextProps\n): SourceItem => {\n  const { sources } = sourceContext;\n\n  const sourceMap = sources?.[storyId];\n  // If the source decorator hasn't provided args, we fallback to the \"unknown args\"\n  // version of the source (which means if you render a story >1 time with different args\n  // you'll get the same source value both times).\n  const source = sourceMap?.[argsHash(args)] || sourceMap?.[UNKNOWN_ARGS_HASH];\n\n  // source rendering is async so source is unavailable at the start of the render cycle,\n  // so we fail gracefully here without warning\n  return source || { code: '' };\n};\n\nconst getSnippet = ({\n  snippet,\n  storyContext,\n  typeFromProps,\n  transformFromProps,\n}: {\n  snippet: string;\n  storyContext: StoryContextForLoaders;\n  typeFromProps: SourceType;\n  transformFromProps?: SourceProps['transform'];\n}): string => {\n  const { __isArgsStory: isArgsStory } = storyContext.parameters;\n  const sourceParameters = (storyContext.parameters.docs?.source || {}) as SourceParameters;\n\n  const type = typeFromProps || sourceParameters.type || SourceType.AUTO;\n\n  // if user has hard-coded the snippet, that takes precedence\n  if (sourceParameters.code !== undefined) {\n    return sourceParameters.code;\n  }\n\n  const useSnippet =\n    // if user has explicitly set this as dynamic, use snippet\n    type === SourceType.DYNAMIC ||\n    // if this is an args story and there's a snippet\n    (type === SourceType.AUTO && snippet && isArgsStory);\n\n  const code = useSnippet ? snippet : sourceParameters.originalSource || '';\n\n  if (sourceParameters.transformSource) {\n    deprecate(dedent`The \\`transformSource\\` parameter at \\`parameters.docs.source.transformSource\\` is deprecated, please use \\`parameters.docs.source.transform\\` instead. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#source-block\n  `);\n  }\n  if (storyContext.parameters.docs?.transformSource) {\n    deprecate(dedent`The \\`transformSource\\` parameter at \\`parameters.docs.transformSource\\` is deprecated, please use \\`parameters.docs.source.transform\\` instead. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#source-block\n  `);\n  }\n  if (storyContext.parameters.jsx?.transformSource) {\n    deprecate(dedent`The \\`transformSource\\` parameter at \\`parameters.jsx.transformSource\\` is deprecated, please use \\`parameters.docs.source.transform\\` instead. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#source-block\n  `);\n  }\n\n  const transformer =\n    transformFromProps ??\n    sourceParameters.transform ??\n    sourceParameters.transformSource ?? // deprecated\n    storyContext.parameters.docs?.transformSource ?? // deprecated\n    storyContext.parameters.jsx?.transformSource; // deprecated - used to be implemented in the React renderer's jsxDecorator\n\n  return transformer?.(code, storyContext) || code;\n};\n\n// state is used by the Canvas block, which also calls useSourceProps\ntype SourceStateProps = { state: SourceState };\ntype PureSourceProps = ComponentProps<typeof PureSource>;\n\nexport const useSourceProps = (\n  props: SourceProps,\n  docsContext: DocsContextProps<any>,\n  sourceContext: SourceContextProps\n): PureSourceProps & SourceStateProps => {\n  const storyIds = props.ids || (props.id ? [props.id] : []);\n  const storiesFromIds = useStories(storyIds, docsContext);\n\n  // The check didn't actually change the type.\n  let stories: PreparedStory[] = storiesFromIds as PreparedStory[];\n  const { of } = props;\n  if ('of' in props && of === undefined) {\n    throw new Error('Unexpected `of={undefined}`, did you mistype a CSF file reference?');\n  }\n\n  if (of) {\n    const resolved = docsContext.resolveOf(of, ['story']);\n    stories = [resolved.story];\n  } else if (stories.length === 0) {\n    try {\n      // Always fall back to the primary story for source parameters, even if code is set.\n      stories = [docsContext.storyById()];\n    } catch (err) {\n      // You are allowed to use <Source code=\"...\" /> and <Canvas /> unattached.\n    }\n  }\n  if (!storiesFromIds.every(Boolean)) {\n    return { error: SourceError.SOURCE_UNAVAILABLE, state: SourceState.NONE };\n  }\n\n  const sourceParameters = (stories[0]?.parameters?.docs?.source || {}) as SourceParameters;\n  let { code } = props; // We will fall back to `sourceParameters.code`, but per story below\n  let format = props.format ?? sourceParameters.format;\n  const language = props.language ?? sourceParameters.language ?? 'jsx';\n  const dark = props.dark ?? sourceParameters.dark ?? false;\n\n  if (!code) {\n    code = stories\n      .map((story, index) => {\n        // In theory you can use a storyId from a different CSF file that hasn't loaded yet.\n        if (!story) return '';\n\n        const storyContext = docsContext.getStoryContext(story);\n\n        // eslint-disable-next-line no-underscore-dangle\n        const argsForSource = props.__forceInitialArgs\n          ? storyContext.initialArgs\n          : storyContext.unmappedArgs;\n\n        const source = getStorySource(story.id, argsForSource, sourceContext);\n        if (index === 0) {\n          // Take the format from the first story\n          format = source.format ?? story.parameters.docs?.source?.format ?? false;\n        }\n        return getSnippet({\n          snippet: source.code,\n          storyContext: { ...storyContext, args: argsForSource },\n          typeFromProps: props.type,\n          transformFromProps: props.transform,\n        });\n      })\n      .join('\\n\\n');\n  }\n\n  const state = getSourceState(stories as PreparedStory[]);\n\n  return code\n    ? {\n        code,\n        format,\n        language,\n        dark,\n        // state is used by the Canvas block when it calls this function\n        state,\n      }\n    : { error: SourceError.SOURCE_UNAVAILABLE, state };\n};\n\n/**\n * Story source doc block renders source code if provided,\n * or the source for a story if `storyId` is provided, or\n * the source for the current story if nothing is provided.\n */\nexport const Source: FC<SourceProps> = (props) => {\n  if (props.id) {\n    deprecate(dedent`The \\`id\\` prop on Source is deprecated, please use the \\`of\\` prop instead to reference a story. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#source-block\n  `);\n  }\n  if (props.ids) {\n    deprecate(dedent`The \\`ids\\` prop on Source is deprecated, please use the \\`of\\` prop instead to reference a story. \n    \n    Please refer to the migration guide: https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#source-block\n  `);\n  }\n  const sourceContext = useContext(SourceContext);\n  const docsContext = useContext(DocsContext);\n  const { state, ...sourceProps } = useSourceProps(props, docsContext, sourceContext);\n  return <PureSource {...sourceProps} />;\n};\n"],"names":["argsHash","args","stringify","SourceContext","createContext","UNKNOWN_ARGS_HASH","SourceContainer","children","channel","sources","setSources","useState","useEffect","handleSnippetRendered","idOrEvent","inputSource","inputFormat","id","source","format","hash","current","SNIPPET_RENDERED","jsx","deprecate","SourceState","SourceState2","getSourceState","stories","states","story","_b","_a","getStorySource","storyId","sourceContext","sourceMap","getSnippet","snippet","storyContext","typeFromProps","transformFromProps","isArgsStory","sourceParameters","type","SourceType","code","dedent","_c","transformer","_d","_e","useSourceProps","props","docsContext","storyIds","storiesFromIds","useStories","of","SourceError","language","dark","index","argsForSource","state","Source","useContext","DocsContext","sourceProps","PureSource"],"mappings":"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"}