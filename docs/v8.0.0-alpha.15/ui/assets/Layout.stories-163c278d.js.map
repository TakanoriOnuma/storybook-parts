{"version":3,"file":"Layout.stories-163c278d.js","sources":["../../ui/manager/src/components/layout/useDragging.ts","../../ui/manager/src/container/Notifications.tsx","../../ui/manager/src/components/layout/Layout.tsx"],"sourcesContent":["import type { Dispatch, SetStateAction } from 'react';\nimport { useEffect, useRef } from 'react';\nimport type { LayoutState } from './Layout';\n\n// the distance from the edge of the screen at which the panel/sidebar will snap to the edge\nconst SNAP_THRESHOLD_PX = 30;\nconst SIDEBAR_MIN_WIDTH_PX = 240;\nconst RIGHT_PANEL_MIN_WIDTH_PX = 270;\nconst MIN_WIDTH_STIFFNESS = 0.9;\n\n/**\n * Clamps a value between min and max.\n */\nfunction clamp(value: number, min: number, max: number): number {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Interpolates a value between min and max based on the relativeValue.\n */\nfunction interpolate(relativeValue: number, min: number, max: number): number {\n  return min + (max - min) * relativeValue;\n}\n\nexport function useDragging({\n  setState,\n  isPanelShown,\n  isDesktop,\n}: {\n  setState: Dispatch<SetStateAction<LayoutState>>;\n  isPanelShown: boolean;\n  isDesktop: boolean;\n}) {\n  const panelResizerRef = useRef<HTMLDivElement>(null);\n  const sidebarResizerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const panelResizer = panelResizerRef.current;\n    const sidebarResizer = sidebarResizerRef.current;\n    const previewIframe = document.querySelector('#storybook-preview-iframe') as HTMLIFrameElement;\n    let draggedElement: typeof panelResizer | typeof sidebarResizer | null = null;\n\n    const onDragStart = (e: MouseEvent) => {\n      e.preventDefault();\n\n      setState((state) => ({\n        ...state,\n        isDragging: true,\n      }));\n\n      if (e.currentTarget === panelResizer) {\n        draggedElement = panelResizer;\n      } else if (e.currentTarget === sidebarResizer) {\n        draggedElement = sidebarResizer;\n      }\n      window.addEventListener('mousemove', onDrag);\n      window.addEventListener('mouseup', onDragEnd);\n\n      if (previewIframe) {\n        // prevent iframe from capturing mouse events\n        previewIframe.style.pointerEvents = 'none';\n      }\n    };\n\n    const onDragEnd = (e: MouseEvent) => {\n      setState((state) => {\n        if (draggedElement === sidebarResizer) {\n          if (state.navSize < SIDEBAR_MIN_WIDTH_PX && state.navSize > 0) {\n            // snap the sidebar back to its minimum width if it's smaller than the threshold\n            return {\n              ...state,\n              isDragging: false,\n              navSize: SIDEBAR_MIN_WIDTH_PX,\n            };\n          }\n        }\n        if (draggedElement === panelResizer) {\n          if (\n            state.panelPosition === 'right' &&\n            state.rightPanelWidth < RIGHT_PANEL_MIN_WIDTH_PX &&\n            state.rightPanelWidth > 0\n          ) {\n            // snap the right panel back to its minimum width if it's smaller than the threshold\n            return {\n              ...state,\n              isDragging: false,\n              rightPanelWidth: RIGHT_PANEL_MIN_WIDTH_PX,\n            };\n          }\n        }\n        return {\n          ...state,\n          isDragging: false,\n        };\n      });\n      window.removeEventListener('mousemove', onDrag);\n      window.removeEventListener('mouseup', onDragEnd);\n      // make iframe capture pointer events again\n      previewIframe?.removeAttribute('style');\n      draggedElement = null;\n    };\n\n    const onDrag = (e: MouseEvent) => {\n      if (e.buttons === 0) {\n        onDragEnd(e);\n        return;\n      }\n\n      setState((state) => {\n        if (draggedElement === sidebarResizer) {\n          const sidebarDragX = e.clientX;\n\n          if (sidebarDragX === state.navSize) {\n            return state;\n          }\n          if (sidebarDragX <= SNAP_THRESHOLD_PX) {\n            return {\n              ...state,\n              navSize: 0,\n            };\n          }\n          if (sidebarDragX <= SIDEBAR_MIN_WIDTH_PX) {\n            // set sidebar width to a value in between the actual drag position and the min width, determined by the stiffness\n            return {\n              ...state,\n              navSize: interpolate(MIN_WIDTH_STIFFNESS, sidebarDragX, SIDEBAR_MIN_WIDTH_PX),\n            };\n          }\n          return {\n            ...state,\n            navSize: clamp(sidebarDragX, 0, e.view.innerWidth),\n          };\n        }\n        if (draggedElement === panelResizer) {\n          const sizeAxisState =\n            state.panelPosition === 'bottom' ? 'bottomPanelHeight' : 'rightPanelWidth';\n          const panelDragSize =\n            state.panelPosition === 'bottom'\n              ? e.view.innerHeight - e.clientY\n              : e.view.innerWidth - e.clientX;\n\n          if (panelDragSize === state[sizeAxisState]) {\n            return state;\n          }\n          if (panelDragSize <= SNAP_THRESHOLD_PX) {\n            return {\n              ...state,\n              [sizeAxisState]: 0,\n            };\n          }\n          if (state.panelPosition === 'right' && panelDragSize <= RIGHT_PANEL_MIN_WIDTH_PX) {\n            // set right panel width to a value in between the actual drag position and the min width, determined by the stiffness\n            return {\n              ...state,\n              [sizeAxisState]: interpolate(\n                MIN_WIDTH_STIFFNESS,\n                panelDragSize,\n                RIGHT_PANEL_MIN_WIDTH_PX\n              ),\n            };\n          }\n\n          const sizeAxisMax =\n            state.panelPosition === 'bottom' ? e.view.innerHeight : e.view.innerWidth;\n          return {\n            ...state,\n            [sizeAxisState]: clamp(panelDragSize, 0, sizeAxisMax),\n          };\n        }\n        return state;\n      });\n    };\n\n    panelResizer?.addEventListener('mousedown', onDragStart);\n    sidebarResizer?.addEventListener('mousedown', onDragStart);\n\n    return () => {\n      panelResizer?.removeEventListener('mousedown', onDragStart);\n      sidebarResizer?.removeEventListener('mousedown', onDragStart);\n      // make iframe capture pointer events again\n      previewIframe?.removeAttribute('style');\n    };\n  }, [\n    // we need to rerun this effect when the panel is shown/hidden or when changing between mobile/desktop to re-attach the event listeners\n    isPanelShown,\n    isDesktop,\n    setState,\n  ]);\n\n  return { panelResizerRef, sidebarResizerRef };\n}\n","import type { FC } from 'react';\nimport React from 'react';\n\nimport type { Combo } from '@storybook/manager-api';\nimport { Consumer } from '@storybook/manager-api';\n\nimport { NotificationList } from '../components/notifications/NotificationList';\n\nconst mapper = ({ state, api }: Combo) => {\n  return {\n    notifications: state.notifications,\n    clearNotification: api.clearNotification,\n  };\n};\n\nexport const Notifications: FC = (props) => (\n  <Consumer filter={mapper}>\n    {(fromState) => <NotificationList {...props} {...fromState} />}\n  </Consumer>\n);\n","import React, { useEffect, useLayoutEffect, useState } from 'react';\nimport { styled } from '@storybook/theming';\nimport type { API_Layout, API_ViewMode } from '@storybook/types';\nimport { useDragging } from './useDragging';\nimport { MobileNavigation } from '../mobile/navigation/MobileNavigation';\nimport { MEDIA_DESKTOP_BREAKPOINT } from '../../constants';\nimport { useLayout } from './LayoutProvider';\nimport { Notifications } from '../../container/Notifications';\n\ninterface InternalLayoutState {\n  isDragging: boolean;\n}\n\ninterface ManagerLayoutState\n  extends Pick<API_Layout, 'navSize' | 'bottomPanelHeight' | 'rightPanelWidth' | 'panelPosition'> {\n  viewMode: API_ViewMode;\n}\n\nexport type LayoutState = InternalLayoutState & ManagerLayoutState;\n\ninterface Props {\n  managerLayoutState: ManagerLayoutState;\n  setManagerLayoutState: (state: Partial<Omit<ManagerLayoutState, 'viewMode'>>) => void;\n  slotMain?: React.ReactNode;\n  slotSidebar?: React.ReactNode;\n  slotPanel?: React.ReactNode;\n  slotPages?: React.ReactNode;\n}\nconst MINIMUM_CONTENT_WIDTH_PX = 100;\n\nconst layoutStateIsEqual = (state: ManagerLayoutState, other: ManagerLayoutState) =>\n  state.navSize === other.navSize &&\n  state.bottomPanelHeight === other.bottomPanelHeight &&\n  state.rightPanelWidth === other.rightPanelWidth &&\n  state.panelPosition === other.panelPosition;\n\n/**\n * Manages the internal state of panels while dragging, and syncs it with the\n * layout state in the global manager store when the user is done dragging.\n * Also syncs the layout state from the global manager store to the internal state\n * here when necessary\n */\nconst useLayoutSyncingState = ({\n  managerLayoutState,\n  setManagerLayoutState,\n  isDesktop,\n}: {\n  managerLayoutState: Props['managerLayoutState'];\n  setManagerLayoutState: Props['setManagerLayoutState'];\n  isDesktop: boolean;\n}) => {\n  // ref to keep track of previous managerLayoutState, to check if the props change\n  const prevManagerLayoutStateRef = React.useRef<ManagerLayoutState>(managerLayoutState);\n\n  const [internalDraggingSizeState, setInternalDraggingSizeState] = useState<LayoutState>({\n    ...managerLayoutState,\n    isDragging: false,\n  });\n\n  /**\n   * Sync FROM managerLayoutState to internalDraggingState if user is not dragging\n   */\n  useEffect(() => {\n    if (\n      internalDraggingSizeState.isDragging || // don't interrupt user's drag\n      layoutStateIsEqual(managerLayoutState, prevManagerLayoutStateRef.current) // don't set any state if managerLayoutState hasn't changed\n    ) {\n      return;\n    }\n    prevManagerLayoutStateRef.current = managerLayoutState;\n    setInternalDraggingSizeState((state) => ({ ...state, ...managerLayoutState }));\n  }, [internalDraggingSizeState.isDragging, managerLayoutState, setInternalDraggingSizeState]);\n\n  /**\n   * Sync size changes TO managerLayoutState when drag is done\n   */\n  useLayoutEffect(() => {\n    if (\n      internalDraggingSizeState.isDragging || // wait with syncing managerLayoutState until user is done dragging\n      layoutStateIsEqual(prevManagerLayoutStateRef.current, internalDraggingSizeState) // don't sync managerLayoutState if it doesn't differ from internalDraggingSizeState\n    ) {\n      return;\n    }\n    const nextState = {\n      navSize: internalDraggingSizeState.navSize,\n      bottomPanelHeight: internalDraggingSizeState.bottomPanelHeight,\n      rightPanelWidth: internalDraggingSizeState.rightPanelWidth,\n    };\n    prevManagerLayoutStateRef.current = {\n      ...prevManagerLayoutStateRef.current,\n      ...nextState,\n    };\n    setManagerLayoutState(nextState);\n  }, [internalDraggingSizeState, setManagerLayoutState]);\n\n  const isPagesShown =\n    managerLayoutState.viewMode !== 'story' && managerLayoutState.viewMode !== 'docs';\n  const isPanelShown = managerLayoutState.viewMode === 'story';\n\n  const { panelResizerRef, sidebarResizerRef } = useDragging({\n    setState: setInternalDraggingSizeState,\n    isPanelShown,\n    isDesktop,\n  });\n  const { navSize, rightPanelWidth, bottomPanelHeight } = internalDraggingSizeState.isDragging\n    ? internalDraggingSizeState\n    : managerLayoutState;\n\n  return {\n    navSize,\n    rightPanelWidth,\n    bottomPanelHeight,\n    panelPosition: managerLayoutState.panelPosition,\n    panelResizerRef,\n    sidebarResizerRef,\n    showPages: isPagesShown,\n    showPanel: isPanelShown,\n    isDragging: internalDraggingSizeState.isDragging,\n  };\n};\n\nexport const Layout = ({ managerLayoutState, setManagerLayoutState, ...slots }: Props) => {\n  const { isDesktop, isMobile } = useLayout();\n\n  const {\n    navSize,\n    rightPanelWidth,\n    bottomPanelHeight,\n    panelPosition,\n    panelResizerRef,\n    sidebarResizerRef,\n    showPages,\n    showPanel,\n    isDragging,\n  } = useLayoutSyncingState({ managerLayoutState, setManagerLayoutState, isDesktop });\n\n  return (\n    <LayoutContainer\n      navSize={navSize}\n      rightPanelWidth={rightPanelWidth}\n      bottomPanelHeight={bottomPanelHeight}\n      panelPosition={managerLayoutState.panelPosition}\n      isDragging={isDragging}\n      viewMode={managerLayoutState.viewMode}\n    >\n      <Notifications />\n      {showPages && <PagesContainer>{slots.slotPages}</PagesContainer>}\n      <ContentContainer>{slots.slotMain}</ContentContainer>\n      {isDesktop && (\n        <>\n          <SidebarContainer>\n            <Drag ref={sidebarResizerRef} />\n            {slots.slotSidebar}\n          </SidebarContainer>\n          {showPanel && (\n            <PanelContainer position={panelPosition}>\n              <Drag\n                orientation={panelPosition === 'bottom' ? 'horizontal' : 'vertical'}\n                position={panelPosition === 'bottom' ? 'left' : 'right'}\n                ref={panelResizerRef}\n              />\n              {slots.slotPanel}\n            </PanelContainer>\n          )}\n        </>\n      )}\n      {isMobile && (\n        <MobileNavigation menu={slots.slotSidebar} panel={slots.slotPanel} showPanel={showPanel} />\n      )}\n    </LayoutContainer>\n  );\n};\n\nconst LayoutContainer = styled.div<LayoutState>(\n  ({ navSize, rightPanelWidth, bottomPanelHeight, viewMode, panelPosition }) => {\n    return {\n      width: '100%',\n      height: ['100vh', '100dvh'], // This array is a special Emotion syntax to set a fallback if 100dvh is not supported\n      overflow: 'hidden',\n      display: 'flex',\n      flexDirection: 'column',\n\n      [MEDIA_DESKTOP_BREAKPOINT]: {\n        display: 'grid',\n        gap: 0,\n        gridTemplateColumns: `minmax(0, ${navSize}px) minmax(${MINIMUM_CONTENT_WIDTH_PX}px, 1fr) minmax(0, ${rightPanelWidth}px)`,\n        gridTemplateRows: `1fr minmax(0, ${bottomPanelHeight}px)`,\n        gridTemplateAreas: (() => {\n          if (viewMode === 'docs') {\n            // remove panel in docs viewMode\n            return `\"sidebar content content\"\n                  \"sidebar content content\"`;\n          }\n          if (panelPosition === 'right') {\n            return `\"sidebar content panel\"\n                  \"sidebar content panel\"`;\n          }\n          return `\"sidebar content content\"\n                \"sidebar panel   panel\"`;\n        })(),\n      },\n    };\n  }\n);\n\nconst SidebarContainer = styled.div(({ theme }) => ({\n  backgroundColor: theme.background.app,\n  gridArea: 'sidebar',\n  position: 'relative',\n  borderRight: `1px solid ${theme.color.border}`,\n}));\n\nconst ContentContainer = styled.div(({ theme }) => ({\n  flex: 1,\n  position: 'relative',\n  backgroundColor: theme.background.content,\n  display: 'grid', // This is needed to make the content container fill the available space\n\n  [MEDIA_DESKTOP_BREAKPOINT]: {\n    flex: 'auto',\n    gridArea: 'content',\n  },\n}));\n\nconst PagesContainer = styled.div(({ theme }) => ({\n  gridRowStart: 'sidebar-start',\n  gridRowEnd: '-1',\n  gridColumnStart: 'sidebar-end',\n  gridColumnEnd: '-1',\n  backgroundColor: theme.background.content,\n  zIndex: 1,\n}));\n\nconst PanelContainer = styled.div<{ position: LayoutState['panelPosition'] }>(\n  ({ theme, position }) => ({\n    gridArea: 'panel',\n    position: 'relative',\n    backgroundColor: theme.background.content,\n    borderTop: position === 'bottom' ? `1px solid ${theme.color.border}` : null,\n    borderLeft: position === 'right' ? `1px solid ${theme.color.border}` : null,\n  })\n);\n\nconst Drag = styled.div<{ orientation?: 'horizontal' | 'vertical'; position?: 'left' | 'right' }>(\n  ({ theme }) => ({\n    position: 'absolute',\n    opacity: 0,\n    transition: 'opacity 0.2s ease-in-out',\n    zIndex: 100,\n\n    '&:after': {\n      content: '\"\"',\n      display: 'block',\n      backgroundColor: theme.color.secondary,\n    },\n\n    '&:hover': {\n      opacity: 1,\n    },\n  }),\n  ({ orientation = 'vertical', position = 'left' }) => {\n    if (orientation === 'vertical')\n      return {\n        width: position === 'left' ? 10 : 13,\n        height: '100%',\n        top: 0,\n        right: position === 'left' ? '-7px' : null,\n        left: position === 'right' ? '-7px' : null,\n\n        '&:after': {\n          width: 1,\n          height: '100%',\n          marginLeft: position === 'left' ? 3 : 6,\n        },\n\n        '&:hover': {\n          cursor: 'col-resize',\n        },\n      };\n    return {\n      width: '100%',\n      height: '13px',\n      top: '-7px',\n      left: 0,\n\n      '&:after': {\n        width: '100%',\n        height: 1,\n        marginTop: 6,\n      },\n\n      '&:hover': {\n        cursor: 'row-resize',\n      },\n    };\n  }\n);\n"],"names":["SNAP_THRESHOLD_PX","SIDEBAR_MIN_WIDTH_PX","RIGHT_PANEL_MIN_WIDTH_PX","MIN_WIDTH_STIFFNESS","clamp","value","min","max","interpolate","relativeValue","useDragging","setState","isPanelShown","isDesktop","panelResizerRef","useRef","sidebarResizerRef","useEffect","panelResizer","sidebarResizer","previewIframe","draggedElement","onDragStart","e","state","onDrag","onDragEnd","sidebarDragX","sizeAxisState","panelDragSize","sizeAxisMax","mapper","api","Notifications","props","React","Consumer","fromState","NotificationList","MINIMUM_CONTENT_WIDTH_PX","layoutStateIsEqual","other","useLayoutSyncingState","managerLayoutState","setManagerLayoutState","prevManagerLayoutStateRef","internalDraggingSizeState","setInternalDraggingSizeState","useState","useLayoutEffect","nextState","isPagesShown","navSize","rightPanelWidth","bottomPanelHeight","Layout","slots","isMobile","useLayout","panelPosition","showPages","showPanel","isDragging","LayoutContainer","PagesContainer","ContentContainer","SidebarContainer","Drag","PanelContainer","MobileNavigation","styled","viewMode","MEDIA_DESKTOP_BREAKPOINT","theme","position","orientation"],"mappings":"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"}