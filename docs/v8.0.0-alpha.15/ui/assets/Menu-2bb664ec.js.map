{"version":3,"file":"Menu-2bb664ec.js","sources":["../../ui/manager/src/components/sidebar/Menu.tsx"],"sourcesContent":["import type { ComponentProps, FC } from 'react';\nimport React, { useMemo, useState } from 'react';\n\nimport { styled } from '@storybook/theming';\nimport { transparentize } from 'polished';\nimport type { Button, TooltipLinkListLink } from '@storybook/components';\nimport { WithTooltip, TooltipLinkList, IconButton } from '@storybook/components';\nimport { CloseIcon, CogIcon } from '@storybook/icons';\nimport { useLayout } from '../layout/LayoutProvider';\n\nexport type MenuList = ComponentProps<typeof TooltipLinkList>['links'];\n\nexport const SidebarIconButton: FC<ComponentProps<typeof Button> & { highlighted: boolean }> =\n  styled(IconButton)<\n    ComponentProps<typeof Button> & {\n      highlighted: boolean;\n    }\n  >(({ highlighted, theme }) => ({\n    position: 'relative',\n    overflow: 'visible',\n    marginTop: 0,\n    zIndex: 1,\n\n    ...(highlighted && {\n      '&:before, &:after': {\n        content: '\"\"',\n        position: 'absolute',\n        top: 6,\n        right: 6,\n        width: 5,\n        height: 5,\n        zIndex: 2,\n        borderRadius: '50%',\n        background: theme.background.app,\n        border: `1px solid ${theme.background.app}`,\n        boxShadow: `0 0 0 2px ${theme.background.app}`,\n      },\n      '&:after': {\n        background: theme.color.positive,\n        border: `1px solid rgba(0, 0, 0, 0.1)`,\n        boxShadow: `0 0 0 2px ${theme.background.app}`,\n      },\n\n      '&:hover:after, &:focus-visible:after': {\n        boxShadow: `0 0 0 2px ${transparentize(0.88, theme.color.secondary)}`,\n      },\n    }),\n  }));\n\nconst MenuButtonGroup = styled.div({\n  display: 'flex',\n  gap: 4,\n});\n\ntype ClickHandler = TooltipLinkListLink['onClick'];\n\nconst SidebarMenuList: FC<{\n  menu: MenuList;\n  onHide: () => void;\n}> = ({ menu, onHide }) => {\n  const links = useMemo(() => {\n    return menu.map(({ onClick, ...rest }) => ({\n      ...rest,\n      onClick: ((event, item) => {\n        if (onClick) {\n          onClick(event, item);\n        }\n        onHide();\n      }) as ClickHandler,\n    }));\n  }, [menu, onHide]);\n  return <TooltipLinkList links={links} />;\n};\n\nexport interface SidebarMenuProps {\n  menu: MenuList;\n  isHighlighted?: boolean;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n}\n\nexport const SidebarMenu: FC<SidebarMenuProps> = ({ menu, isHighlighted, onClick }) => {\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n  const { isMobile, setMobileMenuOpen } = useLayout();\n\n  if (isMobile) {\n    return (\n      <MenuButtonGroup>\n        <SidebarIconButton\n          title=\"About Storybook\"\n          aria-label=\"About Storybook\"\n          highlighted={isHighlighted}\n          active={false}\n          onClick={onClick}\n        >\n          <CogIcon />\n        </SidebarIconButton>\n        <IconButton\n          title=\"Close menu\"\n          aria-label=\"Close menu\"\n          onClick={() => setMobileMenuOpen(false)}\n        >\n          <CloseIcon />\n        </IconButton>\n      </MenuButtonGroup>\n    );\n  }\n\n  return (\n    <WithTooltip\n      placement=\"top\"\n      closeOnOutsideClick\n      tooltip={({ onHide }) => <SidebarMenuList onHide={onHide} menu={menu} />}\n      onVisibleChange={setIsTooltipVisible}\n    >\n      <SidebarIconButton\n        title=\"Shortcuts\"\n        aria-label=\"Shortcuts\"\n        highlighted={isHighlighted}\n        active={isTooltipVisible}\n      >\n        <CogIcon />\n      </SidebarIconButton>\n    </WithTooltip>\n  );\n};\n"],"names":["SidebarIconButton","styled","IconButton","highlighted","theme","transparentize","MenuButtonGroup","SidebarMenuList","menu","onHide","links","useMemo","onClick","rest","event","item","React","TooltipLinkList","SidebarMenu","isHighlighted","isTooltipVisible","setIsTooltipVisible","useState","isMobile","setMobileMenuOpen","useLayout","CogIcon","CloseIcon","WithTooltip"],"mappings":"uRAYA,MAAAA,EACAC,EAAAC,CAAA,EAIA,CAAA,CAAA,YAAAC,EAAA,MAAAC,MAAA,CACA,SAAA,WACA,SAAA,UACA,UAAA,EACA,OAAA,EAEA,GAAAD,GAAA,CACA,oBAAA,CACA,QAAA,KACA,SAAA,WACA,IAAA,EACA,MAAA,EACA,MAAA,EACA,OAAA,EACA,OAAA,EACA,aAAA,MACA,WAAAC,EAAA,WAAA,IACA,OAAA,aAAAA,EAAA,WAAA,GAAA,GACA,UAAA,aAAAA,EAAA,WAAA,GAAA,EACA,EACA,UAAA,CACA,WAAAA,EAAA,MAAA,SACA,OAAA,+BACA,UAAA,aAAAA,EAAA,WAAA,GAAA,EACA,EAEA,uCAAA,CACA,UAAA,aAAAC,EAAA,IAAAD,EAAA,MAAA,SAAA,CAAA,EACA,CACA,CACA,EAAA,EAEAE,EAAAL,EAAA,IAAA,CACA,QAAA,OACA,IAAA,CACA,CAAA,EAIAM,EAGA,CAAA,CAAA,KAAAC,EAAA,OAAAC,KAAA,CACA,MAAAC,EAAAC,EAAAA,QAAA,IACAH,EAAA,IAAA,CAAA,CAAA,QAAAI,EAAA,GAAAC,MAAA,CACA,GAAAA,EACA,QAAA,CAAAC,EAAAC,IAAA,CACAH,GACAA,EAAAE,EAAAC,CAAA,EAEAN,GACA,CACA,EAAA,EACA,CAAAD,EAAAC,CAAA,CAAA,EACA,OAAAO,EAAA,cAAAC,GAAA,MAAAP,CAAA,CAAA,CACA,EAQAQ,EAAA,CAAA,CAAA,KAAAV,EAAA,cAAAW,EAAA,QAAAP,KAAA,CACA,KAAA,CAAAQ,EAAAC,CAAA,EAAAC,WAAA,EAAA,EACA,CAAA,SAAAC,EAAA,kBAAAC,CAAA,EAAAC,EAAA,EAEA,OAAAF,kBAEAjB,EACA,KAAAU,EAAA,cAAAhB,EAAA,CACA,MAAA,kBACA,aAAA,kBACA,YAAAmB,EACA,OAAA,GACA,QAAAP,CAAA,kBAEAc,EAAA,IAAA,CAEA,EAAAV,EAAA,cAAAd,EAAA,CACA,MAAA,aACA,aAAA,aACA,QAAA,IAAAsB,EAAA,EAAA,CAAA,kBAEAG,EAAA,IAAA,CAAA,CAEA,EAKAX,EAAA,cAAAY,EAAA,CACA,UAAA,MACA,oBAAA,GACA,QAAA,CAAA,CAAA,OAAAnB,CAAA,IAAAO,EAAA,cAAAT,EAAA,CAAA,OAAAE,EAAA,KAAAD,EAAA,EACA,gBAAAa,CAAA,EAEAL,EAAA,cAAAhB,EAAA,CACA,MAAA,YACA,aAAA,YACA,YAAAmB,EACA,OAAAC,CAAA,kBAEAM,EAAA,IAAA,CACA,CAAA,CAGA"}