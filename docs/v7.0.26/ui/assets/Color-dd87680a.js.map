{"version":3,"file":"Color-dd87680a.js","sources":["../../ui/blocks/src/controls/Color.tsx"],"sourcesContent":["import type { FC, ChangeEvent, FocusEvent } from 'react';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { HexColorPicker, HslaStringColorPicker, RgbaStringColorPicker } from 'react-colorful';\nimport convert from 'color-convert';\nimport throttle from 'lodash/throttle.js';\nimport { styled } from '@storybook/theming';\nimport { TooltipNote, WithTooltip, Form, Icons } from '@storybook/components';\n\nimport type { ControlProps, ColorValue, ColorConfig, PresetColor } from './types';\nimport { getControlId } from './helpers';\n\nconst Wrapper = styled.div({\n  position: 'relative',\n  maxWidth: 250,\n});\n\nconst PickerTooltip = styled(WithTooltip)({\n  position: 'absolute',\n  zIndex: 1,\n  top: 4,\n  left: 4,\n});\n\nconst TooltipContent = styled.div({\n  width: 200,\n  margin: 5,\n\n  '.react-colorful__saturation': {\n    borderRadius: '4px 4px 0 0',\n  },\n  '.react-colorful__hue': {\n    boxShadow: 'inset 0 0 0 1px rgb(0 0 0 / 5%)',\n  },\n  '.react-colorful__last-control': {\n    borderRadius: '0 0 4px 4px',\n  },\n});\n\nconst Note = styled(TooltipNote)(({ theme }) => ({\n  fontFamily: theme.typography.fonts.base,\n}));\n\nconst Swatches = styled.div({\n  display: 'grid',\n  gridTemplateColumns: 'repeat(9, 16px)',\n  gap: 6,\n  padding: 3,\n  marginTop: 5,\n  width: 200,\n});\n\nconst SwatchColor = styled.div<{ active: boolean }>(({ theme, active }) => ({\n  width: 16,\n  height: 16,\n  boxShadow: active\n    ? `${theme.appBorderColor} 0 0 0 1px inset, ${theme.textMutedColor}50 0 0 0 4px`\n    : `${theme.appBorderColor} 0 0 0 1px inset`,\n  borderRadius: theme.appBorderRadius,\n}));\n\nconst swatchBackground = `url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill-opacity=\".05\"><path d=\"M8 0h8v8H8zM0 8h8v8H0z\"/></svg>')`;\n\ntype SwatchProps = { value: string; active?: boolean; onClick?: () => void; style?: object };\nconst Swatch = ({ value, active, onClick, style, ...props }: SwatchProps) => {\n  const backgroundImage = `linear-gradient(${value}, ${value}), ${swatchBackground}, linear-gradient(#fff, #fff)`;\n  return <SwatchColor {...props} {...{ active, onClick }} style={{ ...style, backgroundImage }} />;\n};\n\nconst Input = styled(Form.Input)(({ theme }) => ({\n  width: '100%',\n  paddingLeft: 30,\n  paddingRight: 30,\n  boxSizing: 'border-box',\n  fontFamily: theme.typography.fonts.base,\n}));\n\nconst ToggleIcon = styled(Icons)(({ theme }) => ({\n  position: 'absolute',\n  zIndex: 1,\n  top: 6,\n  right: 7,\n  width: 20,\n  height: 20,\n  padding: 4,\n  boxSizing: 'border-box',\n  cursor: 'pointer',\n  color: theme.input.color,\n}));\n\nenum ColorSpace {\n  RGB = 'rgb',\n  HSL = 'hsl',\n  HEX = 'hex',\n}\n\nconst COLOR_SPACES = Object.values(ColorSpace);\nconst COLOR_REGEXP = /\\(([0-9]+),\\s*([0-9]+)%?,\\s*([0-9]+)%?,?\\s*([0-9.]+)?\\)/;\nconst RGB_REGEXP = /^\\s*rgba?\\(([0-9]+),\\s*([0-9]+),\\s*([0-9]+),?\\s*([0-9.]+)?\\)\\s*$/i;\nconst HSL_REGEXP = /^\\s*hsla?\\(([0-9]+),\\s*([0-9]+)%,\\s*([0-9]+)%,?\\s*([0-9.]+)?\\)\\s*$/i;\nconst HEX_REGEXP = /^\\s*#?([0-9a-f]{3}|[0-9a-f]{6})\\s*$/i;\nconst SHORTHEX_REGEXP = /^\\s*#?([0-9a-f]{3})\\s*$/i;\n\ntype ParsedColor = {\n  valid: boolean;\n  value: string;\n  keyword: string;\n  colorSpace: ColorSpace;\n  [ColorSpace.RGB]: string;\n  [ColorSpace.HSL]: string;\n  [ColorSpace.HEX]: string;\n};\n\nconst ColorPicker = {\n  [ColorSpace.HEX]: HexColorPicker,\n  [ColorSpace.RGB]: RgbaStringColorPicker,\n  [ColorSpace.HSL]: HslaStringColorPicker,\n};\n\nconst fallbackColor = {\n  [ColorSpace.HEX]: 'transparent',\n  [ColorSpace.RGB]: 'rgba(0, 0, 0, 0)',\n  [ColorSpace.HSL]: 'hsla(0, 0%, 0%, 0)',\n};\n\nconst stringToArgs = (value: string) => {\n  const match = value?.match(COLOR_REGEXP);\n  if (!match) return [0, 0, 0, 1];\n  const [, x, y, z, a = 1] = match;\n  return [x, y, z, a].map(Number);\n};\n\nconst parseValue = (value: string): ParsedColor | undefined => {\n  if (!value) return undefined;\n  let valid = true;\n\n  if (RGB_REGEXP.test(value)) {\n    const [r, g, b, a] = stringToArgs(value);\n    const [h, s, l] = convert.rgb.hsl([r, g, b]) || [0, 0, 0];\n    return {\n      valid,\n      value,\n      keyword: convert.rgb.keyword([r, g, b]),\n      colorSpace: ColorSpace.RGB,\n      [ColorSpace.RGB]: value,\n      [ColorSpace.HSL]: `hsla(${h}, ${s}%, ${l}%, ${a})`,\n      [ColorSpace.HEX]: `#${convert.rgb.hex([r, g, b]).toLowerCase()}`,\n    };\n  }\n\n  if (HSL_REGEXP.test(value)) {\n    const [h, s, l, a] = stringToArgs(value);\n    const [r, g, b] = convert.hsl.rgb([h, s, l]) || [0, 0, 0];\n    return {\n      valid,\n      value,\n      keyword: convert.hsl.keyword([h, s, l]),\n      colorSpace: ColorSpace.HSL,\n      [ColorSpace.RGB]: `rgba(${r}, ${g}, ${b}, ${a})`,\n      [ColorSpace.HSL]: value,\n      [ColorSpace.HEX]: `#${convert.hsl.hex([h, s, l]).toLowerCase()}`,\n    };\n  }\n\n  const plain = value.replace('#', '');\n  const rgb = convert.keyword.rgb(plain as any) || convert.hex.rgb(plain);\n  const hsl = convert.rgb.hsl(rgb);\n\n  let mapped = value;\n  if (/[^#a-f0-9]/i.test(value)) mapped = plain;\n  else if (HEX_REGEXP.test(value)) mapped = `#${plain}`;\n\n  if (mapped.startsWith('#')) {\n    valid = HEX_REGEXP.test(mapped);\n  } else {\n    try {\n      convert.keyword.hex(mapped as any);\n    } catch (e) {\n      valid = false;\n    }\n  }\n\n  return {\n    valid,\n    value: mapped,\n    keyword: convert.rgb.keyword(rgb),\n    colorSpace: ColorSpace.HEX,\n    [ColorSpace.RGB]: `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, 1)`,\n    [ColorSpace.HSL]: `hsla(${hsl[0]}, ${hsl[1]}%, ${hsl[2]}%, 1)`,\n    [ColorSpace.HEX]: mapped,\n  };\n};\n\nconst getRealValue = (value: string, color: ParsedColor, colorSpace: ColorSpace) => {\n  if (!value || !color?.valid) return fallbackColor[colorSpace];\n  if (colorSpace !== ColorSpace.HEX) return color?.[colorSpace] || fallbackColor[colorSpace];\n  if (!color.hex.startsWith('#')) {\n    try {\n      return `#${convert.keyword.hex(color.hex as any)}`;\n    } catch (e) {\n      return fallbackColor.hex;\n    }\n  }\n  const short = color.hex.match(SHORTHEX_REGEXP);\n  if (!short) return HEX_REGEXP.test(color.hex) ? color.hex : fallbackColor.hex;\n  const [r, g, b] = short[1].split('');\n  return `#${r}${r}${g}${g}${b}${b}`;\n};\n\nconst useColorInput = (\n  initialValue: string | undefined,\n  onChange: (value: string) => string | void\n) => {\n  const [value, setValue] = useState(initialValue || '');\n  const [color, setColor] = useState(() => parseValue(value));\n  const [colorSpace, setColorSpace] = useState(color?.colorSpace || ColorSpace.HEX);\n\n  // Reset state when initialValue changes (when resetting controls)\n  useEffect(() => {\n    const nextValue = initialValue || '';\n    const nextColor = parseValue(nextValue);\n    setValue(nextValue);\n    setColor(nextColor);\n    setColorSpace(nextColor?.colorSpace || ColorSpace.HEX);\n  }, [initialValue]);\n\n  const realValue = useMemo(\n    () => getRealValue(value, color, colorSpace).toLowerCase(),\n    [value, color, colorSpace]\n  );\n\n  const updateValue = useCallback(\n    (update: string) => {\n      const parsed = parseValue(update);\n      const v = parsed?.value || update || '';\n\n      setValue(v);\n\n      if (v === '') {\n        setColor(undefined);\n        onChange(undefined);\n      }\n\n      if (!parsed) {\n        return;\n      }\n\n      setColor(parsed);\n      setColorSpace(parsed.colorSpace);\n      onChange(parsed.value);\n    },\n    [onChange]\n  );\n\n  const cycleColorSpace = useCallback(() => {\n    let next = COLOR_SPACES.indexOf(colorSpace) + 1;\n    if (next >= COLOR_SPACES.length) next = 0;\n    setColorSpace(COLOR_SPACES[next]);\n    const update = color?.[COLOR_SPACES[next]] || '';\n    setValue(update);\n    onChange(update);\n  }, [color, colorSpace, onChange]);\n\n  return { value, realValue, updateValue, color, colorSpace, cycleColorSpace };\n};\n\nconst id = (value: string) => value.replace(/\\s*/, '').toLowerCase();\n\nconst usePresets = (\n  presetColors: PresetColor[],\n  currentColor: ParsedColor | undefined,\n  colorSpace: ColorSpace\n) => {\n  const [selectedColors, setSelectedColors] = useState(currentColor?.valid ? [currentColor] : []);\n\n  // Reset state when currentColor becomes undefined (when resetting controls)\n  useEffect(() => {\n    if (currentColor !== undefined) return;\n    setSelectedColors([]);\n  }, [currentColor]);\n\n  const presets = useMemo(() => {\n    const initialPresets = (presetColors || []).map((preset) => {\n      if (typeof preset === 'string') return parseValue(preset);\n      if (preset.title) return { ...parseValue(preset.color), keyword: preset.title };\n      return parseValue(preset.color);\n    });\n    return initialPresets.concat(selectedColors).filter(Boolean).slice(-27);\n  }, [presetColors, selectedColors]);\n\n  const addPreset: (color: ParsedColor) => void = useCallback(\n    (color) => {\n      if (!color?.valid) return;\n      if (presets.some((preset) => id(preset[colorSpace]) === id(color[colorSpace]))) return;\n      setSelectedColors((arr) => arr.concat(color));\n    },\n    [colorSpace, presets]\n  );\n\n  return { presets, addPreset };\n};\n\nexport type ColorControlProps = ControlProps<ColorValue> & ColorConfig;\nexport const ColorControl: FC<ColorControlProps> = ({\n  name,\n  value: initialValue,\n  onChange,\n  onFocus,\n  onBlur,\n  presetColors,\n  startOpen = false,\n}) => {\n  const throttledOnChange = useCallback(throttle(onChange, 200), [onChange]);\n  const { value, realValue, updateValue, color, colorSpace, cycleColorSpace } = useColorInput(\n    initialValue,\n    throttledOnChange\n  );\n  const { presets, addPreset } = usePresets(presetColors, color, colorSpace);\n  const Picker = ColorPicker[colorSpace];\n\n  return (\n    <Wrapper>\n      <PickerTooltip\n        startOpen={startOpen}\n        closeOnOutsideClick\n        onVisibleChange={() => addPreset(color)}\n        tooltip={\n          <TooltipContent>\n            <Picker\n              color={realValue === 'transparent' ? '#000000' : realValue}\n              {...{ onChange: updateValue, onFocus, onBlur }}\n            />\n            {presets.length > 0 && (\n              <Swatches>\n                {presets.map((preset, index: number) => (\n                  <WithTooltip\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`${preset.value}-${index}`}\n                    hasChrome={false}\n                    tooltip={<Note note={preset.keyword || preset.value} />}\n                  >\n                    <Swatch\n                      value={preset[colorSpace]}\n                      active={color && id(preset[colorSpace]) === id(color[colorSpace])}\n                      onClick={() => updateValue(preset.value)}\n                    />\n                  </WithTooltip>\n                ))}\n              </Swatches>\n            )}\n          </TooltipContent>\n        }\n      >\n        <Swatch value={realValue} style={{ margin: 4 }} />\n      </PickerTooltip>\n      <Input\n        id={getControlId(name)}\n        value={value}\n        onChange={(e: ChangeEvent<HTMLInputElement>) => updateValue(e.target.value)}\n        onFocus={(e: FocusEvent<HTMLInputElement>) => e.target.select()}\n        placeholder=\"Choose color...\"\n      />\n      {value ? <ToggleIcon icon=\"markup\" onClick={cycleColorSpace} /> : null}\n    </Wrapper>\n  );\n};\n\nexport default ColorControl;\n"],"names":["Wrapper","styled","PickerTooltip","WithTooltip","TooltipContent","Note","TooltipNote","theme","Swatches","SwatchColor","active","swatchBackground","Swatch","value","onClick","style","props","backgroundImage","jsx","Input","Form","ToggleIcon","Icons","ColorSpace","ColorSpace2","COLOR_SPACES","COLOR_REGEXP","RGB_REGEXP","HSL_REGEXP","HEX_REGEXP","SHORTHEX_REGEXP","ColorPicker","HexColorPicker","RgbaStringColorPicker","HslaStringColorPicker","fallbackColor","stringToArgs","match","x","y","z","a","parseValue","valid","r","g","b","h","s","l","convert","plain","rgb","hsl","mapped","getRealValue","color","colorSpace","short","useColorInput","initialValue","onChange","setValue","useState","setColor","setColorSpace","useEffect","nextValue","nextColor","realValue","useMemo","updateValue","useCallback","update","parsed","v","cycleColorSpace","next","id","usePresets","presetColors","currentColor","selectedColors","setSelectedColors","presets","preset","addPreset","arr","ColorControl","name","onFocus","onBlur","startOpen","throttledOnChange","throttle","Picker","jsxs","index","getControlId","e"],"mappings":"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"}