{"version":3,"file":"Text-c52b6464.js","sources":["../../ui/blocks/src/controls/Text.tsx"],"sourcesContent":["import type { FC, ChangeEvent } from 'react';\nimport React, { useCallback, useState } from 'react';\nimport { styled } from '@storybook/theming';\nimport { Form } from '@storybook/components';\nimport { getControlId, getControlSetterButtonId } from './helpers';\n\nimport type { ControlProps, TextValue, TextConfig } from './types';\n\nexport type TextProps = ControlProps<TextValue | undefined> & TextConfig;\n\nconst Wrapper = styled.label({\n  display: 'flex',\n});\n\nconst MaxLength = styled.div<{ isMaxed: boolean }>(({ isMaxed }) => ({\n  marginLeft: '0.75rem',\n  paddingTop: '0.35rem',\n  color: isMaxed ? 'red' : undefined,\n}));\n\nexport const TextControl: FC<TextProps> = ({\n  name,\n  value,\n  onChange,\n  onFocus,\n  onBlur,\n  maxLength,\n}) => {\n  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    onChange(event.target.value);\n  };\n\n  const [forceVisible, setForceVisible] = useState(false);\n  const onForceVisible = useCallback(() => {\n    onChange('');\n    setForceVisible(true);\n  }, [setForceVisible]);\n  if (value === undefined) {\n    return (\n      <Form.Button id={getControlSetterButtonId(name)} onClick={onForceVisible}>\n        Set string\n      </Form.Button>\n    );\n  }\n\n  const isValid = typeof value === 'string';\n  return (\n    <Wrapper>\n      <Form.Textarea\n        id={getControlId(name)}\n        maxLength={maxLength}\n        onChange={handleChange}\n        size=\"flex\"\n        placeholder=\"Edit string...\"\n        autoFocus={forceVisible}\n        valid={isValid ? null : 'error'}\n        {...{ name, value: isValid ? value : '', onFocus, onBlur }}\n      />\n      {maxLength && (\n        <MaxLength isMaxed={value?.length === maxLength}>\n          {value?.length ?? 0} / {maxLength}\n        </MaxLength>\n      )}\n    </Wrapper>\n  );\n};\n"],"names":["Wrapper","styled","MaxLength","isMaxed","TextControl","name","value","onChange","onFocus","onBlur","maxLength","handleChange","event","forceVisible","setForceVisible","useState","onForceVisible","useCallback","jsx","Form","getControlSetterButtonId","isValid","jsxs","getControlId"],"mappings":"8NAUA,MAAAA,EAAAC,EAAA,MAAA,CAA6B,QAAA,MAE7B,CAAA,EAEAC,EAAAD,EAAA,IAAA,CAAA,CAAA,QAAAE,CAAA,KAAA,CAAqE,WAAA,UACvD,WAAA,UACA,MAAAA,EAAA,MAAA,MAEd,EAAA,EAEOC,EAAA,CAAA,CAAoC,KAAAC,EACzC,MAAAC,EACA,SAAAC,EACA,QAAAC,EACA,OAAAC,EACA,UAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,GAAA,CACEL,EAAAK,EAAA,OAAA,KAAA,CAA2B,EAG7B,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,EAAAA,YAAA,IAAA,CACEV,EAAA,EAAA,EACAO,EAAA,EAAA,CAAoB,EAAA,CAAAA,CAAA,CAAA,EAEtB,GAAAR,IAAA,OACE,OAAAY,EAAAC,EAAA,OAAA,CAAA,GAAAC,EAAAf,CAAA,EAAA,QAAAW,EAAA,SAAA,YAAA,CAAA,EAOF,MAAAK,EAAA,OAAAf,GAAA,SACA,OAAAgB,EAAAtB,EAAA,CAAA,SAAA,CAEIkB,EAAAC,EAAA,SAAM,CAAL,GAAAI,EAAAlB,CAAA,EACsB,UAAAK,EACrB,SAAAC,EACU,KAAA,OACL,YAAA,iBACO,UAAAE,EACD,MAAAQ,EAAA,KAAA,QACa,KAAAhB,EAAA,MAAAgB,EAAAf,EAAA,GAAA,QAAAE,EAAA,OAAAC,CACiC,CAAA,EAC3DC,GAAAY,EAAApB,EAAA,CAAA,SAAAI,GAAA,YAAAA,EAAA,UAAAI,EAAA,SAAA,EAGKJ,GAAA,YAAAA,EAAA,SAAA,EAAiB,MAAEI,CAAI,EAAA,CAC1B,CAAA,CAAA,CAIR"}