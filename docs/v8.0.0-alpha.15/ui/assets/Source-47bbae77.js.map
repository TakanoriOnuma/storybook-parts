{"version":3,"file":"Source-47bbae77.js","sources":["../../ui/blocks/src/blocks/SourceContainer.tsx","../../ui/blocks/src/blocks/Source.tsx"],"sourcesContent":["import type { FC, Context, PropsWithChildren } from 'react';\nimport React, { createContext, useEffect, useState } from 'react';\n\nimport type { Channel } from '@storybook/channels';\n\nimport { SNIPPET_RENDERED } from '@storybook/docs-tools';\nimport type { SyntaxHighlighterFormatTypes } from '@storybook/components';\nimport type { StoryId, Args } from '@storybook/types';\n\nimport { stringify } from 'telejson';\n\ntype ArgsHash = string;\nexport function argsHash(args: Args): ArgsHash {\n  return stringify(args, { allowFunction: false });\n}\n\nexport interface SourceItem {\n  code: string;\n  format?: SyntaxHighlighterFormatTypes;\n}\n\nexport type StorySources = Record<StoryId, Record<ArgsHash, SourceItem>>;\n\nexport interface SourceContextProps {\n  sources: StorySources;\n  setSource?: (id: StoryId, item: SourceItem) => void;\n}\n\nexport const SourceContext: Context<SourceContextProps> = createContext({ sources: {} });\n\ntype SnippetRenderedEvent = {\n  id: StoryId;\n  source: string;\n  args?: Args;\n  format?: SyntaxHighlighterFormatTypes;\n};\n\nexport const UNKNOWN_ARGS_HASH = '--unknown--';\n\nexport const SourceContainer: FC<PropsWithChildren<{ channel: Channel }>> = ({\n  children,\n  channel,\n}) => {\n  const [sources, setSources] = useState<StorySources>({});\n\n  useEffect(() => {\n    const handleSnippetRendered = (\n      idOrEvent: StoryId | SnippetRenderedEvent,\n      inputSource: string = null,\n      inputFormat: SyntaxHighlighterFormatTypes = false\n    ) => {\n      const {\n        id,\n        args = undefined,\n        source,\n        format,\n      } = typeof idOrEvent === 'string'\n        ? {\n            id: idOrEvent,\n            source: inputSource,\n            format: inputFormat,\n          }\n        : idOrEvent;\n\n      const hash = args ? argsHash(args) : UNKNOWN_ARGS_HASH;\n      // FIXME: In SB8.0 when we remove the Source block deprecations,\n      // we should restore this optimizationand make the Source block\n      // smarter about understanding when its args change.\n      //\n      // See https://github.com/storybookjs/storybook/pull/22807\n      //\n      // optimization: don't update if the source is the same\n      // if (deepEqual(currentSource, { code: source, format })) return;\n\n      setSources((current) => {\n        const newSources = {\n          ...current,\n          [id]: {\n            ...current[id],\n            [hash]: { code: source, format },\n          },\n        };\n\n        return newSources;\n      });\n    };\n\n    channel.on(SNIPPET_RENDERED, handleSnippetRendered);\n\n    return () => channel.off(SNIPPET_RENDERED, handleSnippetRendered);\n  }, []);\n\n  return <SourceContext.Provider value={{ sources }}>{children}</SourceContext.Provider>;\n};\n","import type { ComponentProps, FC } from 'react';\nimport React, { useContext } from 'react';\nimport type {\n  StoryId,\n  PreparedStory,\n  ModuleExport,\n  Args,\n  StoryContextForLoaders,\n} from '@storybook/types';\nimport { SourceType } from '@storybook/docs-tools';\n\nimport type { SourceCodeProps } from '../components/Source';\nimport { Source as PureSource, SourceError } from '../components/Source';\nimport type { DocsContextProps } from './DocsContext';\nimport { DocsContext } from './DocsContext';\nimport type { SourceContextProps, SourceItem } from './SourceContainer';\nimport { UNKNOWN_ARGS_HASH, argsHash, SourceContext } from './SourceContainer';\n\ntype SourceParameters = SourceCodeProps & {\n  /**\n   * Where to read the source code from, see `SourceType`\n   */\n  type?: SourceType;\n  /**\n   * Transform the detected source for display\n   */\n  transform?: (code: string, storyContext: StoryContextForLoaders) => string;\n  /**\n   * Internal: set by our CSF loader (`enrichCsf` in `@storybook/csf-tools`).\n   */\n  originalSource?: string;\n};\n\nexport type SourceProps = SourceParameters & {\n  /**\n   * Pass the export defining a story to render its source\n   *\n   * ```jsx\n   * import { Source } from '@storybook/blocks';\n   * import * as ButtonStories from './Button.stories';\n   *\n   * <Source of={ButtonStories.Primary} />\n   * ```\n   */\n  of?: ModuleExport;\n\n  /**\n   * Internal prop to control if a story re-renders on args updates\n   */\n  __forceInitialArgs?: boolean;\n};\n\nconst getStorySource = (\n  storyId: StoryId,\n  args: Args,\n  sourceContext: SourceContextProps\n): SourceItem => {\n  const { sources } = sourceContext;\n\n  const sourceMap = sources?.[storyId];\n  // If the source decorator hasn't provided args, we fallback to the \"unknown args\"\n  // version of the source (which means if you render a story >1 time with different args\n  // you'll get the same source value both times).\n  const source = sourceMap?.[argsHash(args)] || sourceMap?.[UNKNOWN_ARGS_HASH];\n\n  // source rendering is async so source is unavailable at the start of the render cycle,\n  // so we fail gracefully here without warning\n  return source || { code: '' };\n};\n\nconst getSnippet = ({\n  snippet,\n  storyContext,\n  typeFromProps,\n  transformFromProps,\n}: {\n  snippet: string;\n  storyContext: StoryContextForLoaders;\n  typeFromProps: SourceType;\n  transformFromProps?: SourceProps['transform'];\n}): string => {\n  const { __isArgsStory: isArgsStory } = storyContext.parameters;\n  const sourceParameters = (storyContext.parameters.docs?.source || {}) as SourceParameters;\n\n  const type = typeFromProps || sourceParameters.type || SourceType.AUTO;\n\n  // if user has hard-coded the snippet, that takes precedence\n  if (sourceParameters.code !== undefined) {\n    return sourceParameters.code;\n  }\n\n  const useSnippet =\n    // if user has explicitly set this as dynamic, use snippet\n    type === SourceType.DYNAMIC ||\n    // if this is an args story and there's a snippet\n    (type === SourceType.AUTO && snippet && isArgsStory);\n\n  const code = useSnippet ? snippet : sourceParameters.originalSource || '';\n\n  const transformer = transformFromProps ?? sourceParameters.transform;\n\n  return transformer?.(code, storyContext) || code;\n};\n\n// state is used by the Canvas block, which also calls useSourceProps\ntype PureSourceProps = ComponentProps<typeof PureSource>;\n\nexport const useSourceProps = (\n  props: SourceProps,\n  docsContext: DocsContextProps<any>,\n  sourceContext: SourceContextProps\n): PureSourceProps => {\n  let story: PreparedStory;\n  const { of } = props;\n  if ('of' in props && of === undefined) {\n    throw new Error('Unexpected `of={undefined}`, did you mistype a CSF file reference?');\n  }\n\n  if (of) {\n    const resolved = docsContext.resolveOf(of, ['story']);\n    story = resolved.story;\n  } else {\n    try {\n      // Always fall back to the primary story for source parameters, even if code is set.\n      story = docsContext.storyById();\n    } catch (err) {\n      // You are allowed to use <Source code=\"...\" /> and <Canvas /> unattached.\n    }\n  }\n\n  const sourceParameters = (story?.parameters?.docs?.source || {}) as SourceParameters;\n  const { code } = props; // We will fall back to `sourceParameters.code`, but per story below\n  let format = props.format ?? sourceParameters.format;\n  const language = props.language ?? sourceParameters.language ?? 'jsx';\n  const dark = props.dark ?? sourceParameters.dark ?? false;\n\n  if (!code && !story) {\n    return { error: SourceError.SOURCE_UNAVAILABLE };\n  }\n  if (code) {\n    return {\n      code,\n      format,\n      language,\n      dark,\n    };\n  }\n  const storyContext = docsContext.getStoryContext(story);\n\n  // eslint-disable-next-line no-underscore-dangle\n  const argsForSource = props.__forceInitialArgs\n    ? storyContext.initialArgs\n    : storyContext.unmappedArgs;\n\n  const source = getStorySource(story.id, argsForSource, sourceContext);\n  format = source.format ?? story.parameters.docs?.source?.format ?? false;\n\n  return {\n    code: getSnippet({\n      snippet: source.code,\n      storyContext: { ...storyContext, args: argsForSource },\n      typeFromProps: props.type,\n      transformFromProps: props.transform,\n    }),\n    format,\n    language,\n    dark,\n  };\n};\n\n/**\n * Story source doc block renders source code if provided,\n * or the source for a story if `storyId` is provided, or\n * the source for the current story if nothing is provided.\n */\nexport const Source: FC<SourceProps> = (props) => {\n  const sourceContext = useContext(SourceContext);\n  const docsContext = useContext(DocsContext);\n  const sourceProps = useSourceProps(props, docsContext, sourceContext);\n  return <PureSource {...sourceProps} />;\n};\n"],"names":["argsHash","args","stringify","SourceContext","createContext","UNKNOWN_ARGS_HASH","getStorySource","storyId","sourceContext","sources","sourceMap","getSnippet","snippet","storyContext","typeFromProps","transformFromProps","isArgsStory","sourceParameters","_a","type","SourceType","code","transformer","useSourceProps","props","docsContext","story","of","_b","format","language","dark","SourceError","argsForSource","source","_d","_c","Source","useContext","DocsContext","sourceProps","React","PureSource"],"mappings":"6NAYA,SAAAA,EAAAC,EAAA,CACA,OAAAC,EAAAD,EAAA,CAAA,cAAA,EAAA,CAAA,CACA,CAcA,MAAAE,EAAAC,EAAA,cAAA,CAAA,QAAA,GAAA,EASAC,EAAA,cCeAC,EAAA,CACAC,EACAN,EACAO,IACA,CACA,KAAA,CAAA,QAAAC,CAAA,EAAAD,EAEAE,EAAAD,GAAA,YAAAA,EAAAF,GAQA,OAJAG,GAAA,YAAAA,EAAAV,EAAAC,CAAA,MAAAS,GAAA,YAAAA,EAAAL,KAIA,CAAA,KAAA,GACA,EAEAM,EAAA,CAAA,CACA,QAAAC,EACA,aAAAC,EACA,cAAAC,EACA,mBAAAC,CACA,IAKA,OACA,KAAA,CAAA,cAAAC,GAAAH,EAAA,WACAI,IAAAC,EAAAL,EAAA,WAAA,OAAA,YAAAK,EAAA,SAAA,CAAA,EAEAC,EAAAL,GAAAG,EAAA,MAAAG,EAAA,KAGA,GAAAH,EAAA,OAAA,OACA,OAAAA,EAAA,KASA,MAAAI,EAJAF,IAAAC,EAAA,SAEAD,IAAAC,EAAA,MAAAR,GAAAI,EAEAJ,EAAAK,EAAA,gBAAA,GAEAK,EAAAP,GAAAE,EAAA,UAEA,OAAAK,GAAA,YAAAA,EAAAD,EAAAR,KAAAQ,CACA,EAKAE,EAAA,CACAC,EACAC,EACAjB,IACA,aACA,IAAAkB,EACA,KAAA,CAAA,GAAAC,CAAA,EAAAH,EACA,GAAA,OAAAA,GAAAG,IAAA,OACA,MAAA,IAAA,MAAA,oEAAA,EAGA,GAAAA,EAEAD,EADAD,EAAA,UAAAE,EAAA,CAAA,OAAA,CAAA,EACA,UAEA,IAAA,CAEAD,EAAAD,EAAA,iBACA,CAEA,CAGA,MAAAR,IAAAW,GAAAV,EAAAQ,GAAA,YAAAA,EAAA,aAAA,YAAAR,EAAA,OAAA,YAAAU,EAAA,SAAA,CAAA,EACA,CAAA,KAAAP,CAAA,EAAAG,EACA,IAAAK,EAAAL,EAAA,QAAAP,EAAA,OACA,MAAAa,EAAAN,EAAA,UAAAP,EAAA,UAAA,MACAc,EAAAP,EAAA,MAAAP,EAAA,MAAA,GAEA,GAAA,CAAAI,GAAA,CAAAK,EACA,MAAA,CAAA,MAAAM,EAAA,oBAEA,GAAAX,EACA,MAAA,CACA,KAAAA,EACA,OAAAQ,EACA,SAAAC,EACA,KAAAC,CAAA,EAGA,MAAAlB,EAAAY,EAAA,gBAAAC,CAAA,EAGAO,EAAAT,EAAA,mBACAX,EAAA,YACAA,EAAA,aAEAqB,EAAA5B,EAAAoB,EAAA,GAAAO,EAAAzB,CAAA,EACA,OAAAqB,EAAAK,EAAA,UAAAC,GAAAC,EAAAV,EAAA,WAAA,OAAA,YAAAU,EAAA,SAAA,YAAAD,EAAA,SAAA,GAEA,CACA,KAAAxB,EAAA,CACA,QAAAuB,EAAA,KACA,aAAA,CAAA,GAAArB,EAAA,KAAAoB,CAAA,EACA,cAAAT,EAAA,KACA,mBAAAA,EAAA,SAAA,CACA,EACA,OAAAK,EACA,SAAAC,EACA,KAAAC,CAAA,CAEA,EAOAM,EAAAb,GAAA,CACA,MAAAhB,EAAA8B,aAAAnC,CAAA,EACAsB,EAAAa,aAAAC,CAAA,EACAC,EAAAjB,EAAAC,EAAAC,EAAAjB,CAAA,EACA,OAAAiC,EAAA,cAAAC,EAAA,CAAA,GAAAF,CAAA,CAAA,CACA;;;;;;;"}