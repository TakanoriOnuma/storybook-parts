{"version":3,"file":"Markdown-3259d281.js","sources":["../../ui/blocks/src/blocks/mdx.tsx","../../ui/blocks/src/blocks/Markdown.tsx"],"sourcesContent":["import type { FC, MouseEvent, PropsWithChildren, SyntheticEvent } from 'react';\nimport React, { useContext } from 'react';\nimport { NAVIGATE_URL } from '@storybook/core-events';\nimport { Code, components, Icons, nameSpaceClassNames } from '@storybook/components';\nimport { global } from '@storybook/global';\nimport { styled } from '@storybook/theming';\nimport { Source } from '../components';\nimport type { DocsContextProps } from './DocsContext';\nimport { DocsContext } from './DocsContext';\n\nconst { document } = global;\n\n// Hacky utility for asserting identifiers in MDX Story elements\nexport const assertIsFn = (val: any) => {\n  if (typeof val !== 'function') {\n    throw new Error(`Expected story function, got: ${val}`);\n  }\n  return val;\n};\n\n// Hacky utility for adding mdxStoryToId to the default context\nexport const AddContext: FC<DocsContextProps> = (props) => {\n  const { children, ...rest } = props;\n  const parentContext = React.useContext(DocsContext);\n  return (\n    <DocsContext.Provider value={{ ...parentContext, ...rest }}>{children}</DocsContext.Provider>\n  );\n};\n\ninterface CodeOrSourceMdxProps {\n  className?: string;\n}\n\nexport const CodeOrSourceMdx: FC<CodeOrSourceMdxProps> = ({ className, children, ...rest }) => {\n  // markdown-to-jsx does not add className to inline code\n  if (\n    typeof className !== 'string' &&\n    (typeof children !== 'string' || !(children as string).match(/[\\n\\r]/g))\n  ) {\n    return <Code>{children}</Code>;\n  }\n  // className: \"lang-jsx\"\n  const language = className && className.split('-');\n  return (\n    <Source\n      language={(language && language[1]) || 'plaintext'}\n      format={false}\n      code={children as string}\n      {...rest}\n    />\n  );\n};\n\nfunction navigate(context: DocsContextProps, url: string) {\n  context.channel.emit(NAVIGATE_URL, url);\n}\n\nconst A = components.a;\n\ninterface AnchorInPageProps {\n  hash: string;\n}\n\nconst AnchorInPage: FC<PropsWithChildren<AnchorInPageProps>> = ({ hash, children }) => {\n  const context = useContext(DocsContext);\n\n  return (\n    <A\n      href={hash}\n      target=\"_self\"\n      onClick={(event: SyntheticEvent) => {\n        const id = hash.substring(1);\n        const element = document.getElementById(id);\n        if (element) {\n          navigate(context, hash);\n        }\n      }}\n    >\n      {children}\n    </A>\n  );\n};\n\ninterface AnchorMdxProps {\n  href: string;\n  target: string;\n}\n\nexport const AnchorMdx: FC<PropsWithChildren<AnchorMdxProps>> = (props) => {\n  const { href, target, children, ...rest } = props;\n  const context = useContext(DocsContext);\n\n  if (href) {\n    // Enable scrolling for in-page anchors.\n    if (href.startsWith('#')) {\n      return <AnchorInPage hash={href}>{children}</AnchorInPage>;\n    }\n\n    // Links to other pages of SB should use the base URL of the top level iframe instead of the base URL of the preview iframe.\n    if (target !== '_blank' && !href.startsWith('https://')) {\n      return (\n        <A\n          href={href}\n          onClick={(event: MouseEvent<HTMLAnchorElement>) => {\n            // Cmd/Ctrl/Shift/Alt + Click should trigger default browser behaviour. Same applies to non-left clicks\n            const LEFT_BUTTON = 0;\n            const isLeftClick =\n              event.button === LEFT_BUTTON &&\n              !event.altKey &&\n              !event.ctrlKey &&\n              !event.metaKey &&\n              !event.shiftKey;\n\n            if (isLeftClick) {\n              event.preventDefault();\n              // use the A element's href, which has been modified for\n              // local paths without a `?path=` query param prefix\n              navigate(context, event.currentTarget.getAttribute('href'));\n            }\n          }}\n          target={target}\n          {...rest}\n        >\n          {children}\n        </A>\n      );\n    }\n  }\n\n  // External URL dont need any modification.\n  return <A {...props} />;\n};\n\nconst SUPPORTED_MDX_HEADERS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] as const;\n\nconst OcticonHeaders = SUPPORTED_MDX_HEADERS.reduce(\n  (acc, headerType) => ({\n    ...acc,\n    [headerType]: styled(headerType)({\n      '& svg': {\n        position: 'relative',\n        top: '-0.1em',\n        visibility: 'hidden',\n      },\n      '&:hover svg': {\n        visibility: 'visible',\n      },\n    }),\n  }),\n  {}\n);\n\nconst OcticonAnchor = styled.a(() => ({\n  float: 'left',\n  lineHeight: 'inherit',\n  paddingRight: '10px',\n  marginLeft: '-24px',\n  // Allow the theme's text color to override the default link color.\n  color: 'inherit',\n}));\n\ninterface HeaderWithOcticonAnchorProps {\n  as: string;\n  id: string;\n}\n\nconst HeaderWithOcticonAnchor: FC<PropsWithChildren<HeaderWithOcticonAnchorProps>> = ({\n  as,\n  id,\n  children,\n  ...rest\n}) => {\n  const context = useContext(DocsContext);\n\n  // @ts-expect-error (Converted from ts-ignore)\n  const OcticonHeader = OcticonHeaders[as];\n  const hash = `#${id}`;\n\n  return (\n    <OcticonHeader id={id} {...rest}>\n      <OcticonAnchor\n        aria-hidden=\"true\"\n        href={hash}\n        tabIndex={-1}\n        target=\"_self\"\n        onClick={(event: SyntheticEvent) => {\n          const element = document.getElementById(id);\n          if (element) {\n            navigate(context, hash);\n          }\n        }}\n      >\n        <Icons icon=\"link\" />\n      </OcticonAnchor>\n      {children}\n    </OcticonHeader>\n  );\n};\n\ninterface HeaderMdxProps {\n  as: string;\n  id: string;\n}\n\nexport const HeaderMdx: FC<PropsWithChildren<HeaderMdxProps>> = (props) => {\n  const { as, id, children, ...rest } = props;\n\n  // An id should have been added on every header by the \"remark-slug\" plugin.\n  if (id) {\n    return (\n      <HeaderWithOcticonAnchor as={as} id={id} {...rest}>\n        {children}\n      </HeaderWithOcticonAnchor>\n    );\n  }\n  // Make sure it still work if \"remark-slug\" plugin is not present.\n  const Component = as as React.ElementType;\n  const { as: omittedAs, ...withoutAs } = props;\n  return <Component {...nameSpaceClassNames(withoutAs, as)} />;\n};\n\nexport const HeadersMdx = SUPPORTED_MDX_HEADERS.reduce(\n  (acc, headerType) => ({\n    ...acc,\n    // @ts-expect-error (Converted from ts-ignore)\n    [headerType]: (props: object) => <HeaderMdx as={headerType} {...props} />,\n  }),\n  {}\n);\n","/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport PureMarkdown from 'markdown-to-jsx';\nimport dedent from 'ts-dedent';\nimport { AnchorMdx, CodeOrSourceMdx, HeadersMdx } from './mdx';\n\n// mirror props from markdown-to-jsx. From https://react-typescript-cheatsheet.netlify.app/docs/advanced/patterns_by_usecase#wrappingmirroring-a-component\ntype MarkdownProps = typeof PureMarkdown extends React.ComponentType<infer Props> ? Props : never;\n\nexport const Markdown = (props: MarkdownProps) => {\n  if (!props.children) {\n    return null;\n  }\n  if (typeof props.children !== 'string') {\n    throw new Error(\n      dedent`The Markdown block only accepts children as a single string, but children were of type: '${typeof props.children}'\n        This is often caused by not wrapping the child in a template string.\n        \n        This is invalid:\n        <Markdown>\n          # Some heading\n          A paragraph\n        </Markdown>\n\n        Instead do:\n        <Markdown>\n        {\\`\n          # Some heading\n          A paragraph\n        \\`}\n        </Markdown>\n      `\n    );\n  }\n  return (\n    <PureMarkdown\n      {...props}\n      options={{\n        forceBlock: true,\n        overrides: {\n          code: CodeOrSourceMdx,\n          a: AnchorMdx,\n          ...HeadersMdx,\n          ...props?.options?.overrides,\n        },\n        ...props?.options,\n      }}\n    />\n  );\n};\n"],"names":["NAVIGATE_URL","document","global","assertIsFn","val","AddContext","props","children","rest","parentContext","React","DocsContext","jsx","CodeOrSourceMdx","className","Code","language","Source","navigate","context","url","A","components","AnchorInPage","hash","useContext","event","id","AnchorMdx","href","target","SUPPORTED_MDX_HEADERS","OcticonHeaders","acc","headerType","styled","OcticonAnchor","HeaderWithOcticonAnchor","as","OcticonHeader","jsxs","Icons","HeaderMdx","Component","omittedAs","withoutAs","nameSpaceClassNames","HeadersMdx","Markdown","dedent","PureMarkdown","_a"],"mappings":"+ZAEA,KAAA,CAAA,aAAAA,CAAA,EAAA,iCAQA,CAAA,SAAAC,CAAA,EAAAC,EAGOC,EAAAC,GAAA,CACL,GAAA,OAAAA,GAAA,WACE,MAAA,IAAA,MAAA,iCAAAA,GAAA,EAEF,OAAAA,CACF,EAGOC,EAAAC,GAAA,CACL,KAAA,CAAA,SAAAC,EAAA,GAAAC,CAAA,EAAAF,EACAG,EAAAC,EAAA,WAAAC,CAAA,EACA,OAAAC,EAAAD,EAAA,SAAA,CAAA,MAAA,CAAA,GAAAF,EAAA,GAAAD,GAAA,SAAAD,CAAA,CAAA,CAGF,EAMOM,EAAA,CAAA,CAAA,UAAAC,EAAA,SAAAP,EAAA,GAAAC,CAAA,IAAA,CAEL,GAAA,OAAAM,GAAA,WAAA,OAAAP,GAAA,UAAA,CAAAA,EAAA,MAAA,SAAA,GAIE,OAAAK,EAAAG,EAAA,CAAA,SAAAR,CAAA,CAAA,EAGF,MAAAS,EAAAF,GAAAA,EAAA,MAAA,GAAA,EACA,OAAAF,EACEK,EAAC,CAAA,SAAAD,GAAAA,EAAA,CAAA,GAAA,YACwC,OAAA,GAC/B,KAAAT,EACF,GAAAC,CACF,CAAA,CAGV,EAEA,SAAAU,EAAAC,EAAAC,EAAA,CACED,EAAA,QAAA,KAAAnB,EAAAoB,CAAA,CACF,CAEA,MAAAC,EAAAC,EAAA,EAMAC,EAAA,CAAA,CAAA,KAAAC,EAAA,SAAAjB,KAAA,CACE,MAAAY,EAAAM,aAAAd,CAAA,EAEA,OAAAC,EACES,EAAC,CAAA,KAAAG,EACO,OAAA,QACC,QAAAE,GAAA,CAEL,MAAAC,EAAAH,EAAA,UAAA,CAAA,EACAvB,EAAA,eAAA0B,CAAA,GAEET,EAAAC,EAAAK,CAAA,CACF,EACF,SAAAjB,CAEC,CAAA,CAGP,EAOOqB,EAAAtB,GAAA,CACL,KAAA,CAAA,KAAAuB,EAAA,OAAAC,EAAA,SAAAvB,EAAA,GAAAC,CAAA,EAAAF,EACAa,EAAAM,aAAAd,CAAA,EAEA,GAAAkB,EAAA,CAEE,GAAAA,EAAA,WAAA,GAAA,EACE,OAAAjB,EAAAW,EAAA,CAAA,KAAAM,EAAA,SAAAtB,CAAA,CAAA,EAIF,GAAAuB,IAAA,UAAA,CAAAD,EAAA,WAAA,UAAA,EACE,OAAAjB,EACES,EAAC,CAAA,KAAAQ,EACC,QAAAH,GAAA,CAIEA,EAAA,SAAA,GAAA,CAAAA,EAAA,QAAA,CAAAA,EAAA,SAAA,CAAAA,EAAA,SAAA,CAAAA,EAAA,WAQEA,EAAA,eAAA,EAGAR,EAAAC,EAAAO,EAAA,cAAA,aAAA,MAAA,CAAA,EACF,EACF,OAAAI,EACA,GAAAtB,EACI,SAAAD,CAEH,CAAA,EAOT,OAAAK,EAAAS,EAAA,CAAA,GAAAf,CAAA,CAAA,CACF,EAEAyB,EAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,EAEAC,EAAAD,EAAA,OAA6C,CAAAE,EAAAC,KAAA,CACrB,GAAAD,EACjB,CAAAC,CAAA,EAAAC,EAAAD,CAAA,EAAA,CAC8B,QAAA,CACtB,SAAA,WACG,IAAA,SACL,WAAA,QACO,EACd,cAAA,CACe,WAAA,SACD,CACd,CAAA,CACD,GACH,CAAA,CAEF,EAEAE,EAAAD,EAAA,EAAA,KAAA,CAAsC,MAAA,OAC7B,WAAA,UACK,aAAA,OACE,WAAA,QACF,MAAA,SAGd,EAAA,EAOAE,EAAA,CAAA,CAAsF,GAAAC,EACpF,GAAAX,EACA,SAAApB,EACA,GAAAC,CAEF,IAAA,CACE,MAAAW,EAAAM,aAAAd,CAAA,EAGA4B,EAAAP,EAAAM,CAAA,EACAd,EAAA,IAAAG,IAEA,OAAAa,EAAAD,EAAA,CAAA,GAAAZ,EAAA,GAAAnB,EAAA,SAAA,CAEII,EAAAwB,EAAC,CAAA,cAAA,OACa,KAAAZ,EACN,SAAA,GACI,OAAA,QACH,QAAAE,GAAA,CAELzB,EAAA,eAAA0B,CAAA,GAEET,EAAAC,EAAAK,CAAA,CACF,EACF,SAAAZ,EAAA6B,EAAA,CAAA,KAAA,MAAA,CAAA,CAEmB,CAAA,EACrBlC,CACC,CAAA,CAAA,CAGP,EAOOmC,EAAApC,GAAA,CACL,KAAA,CAAA,GAAAgC,EAAA,GAAAX,EAAA,SAAApB,EAAA,GAAAC,CAAA,EAAAF,EAGA,GAAAqB,EACE,OAAAf,EAAAyB,EAAA,CAAA,GAAAC,EAAA,GAAAX,EAAA,GAAAnB,EAAA,SAAAD,CAAA,CAAA,EAOF,MAAAoC,EAAAL,EACA,CAAA,GAAAM,EAAA,GAAAC,CAAA,EAAAvC,EACA,OAAAM,EAAA+B,EAAA,CAAA,GAAAG,EAAAD,EAAAP,CAAA,CAAA,CAAA,CACF,EAEOS,EAAAhB,EAAA,OAAyC,CAAAE,EAAAC,KAAA,CACxB,GAAAD,EACjB,CAAAC,CAAA,EAAA5B,GAAAM,EAAA8B,EAAA,CAAA,GAAAR,EAAA,GAAA5B,EAAA,CAEoE,GACzE,CAAA,CAEF;;;wqEC3NO,MAAA0C,EAAA1C,GAAA,OACL,GAAA,CAAAA,EAAA,SACE,OAAA,KAEF,GAAA,OAAAA,EAAA,UAAA,SACE,MAAA,IAAA,MAAU2C,6FAAA,OAAA3C,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACuG,EAmBnH,OAAAM,EACEsC,EAAC,CAAA,GAAA5C,EACK,QAAA,CACK,WAAA,GACK,UAAA,CACD,KAAAO,EACH,EAAAe,EACH,GAAAmB,EACA,IAAAI,EAAA7C,GAAA,YAAAA,EAAA,UAAA,YAAA6C,EAAA,SACgB,EACrB,GAAA7C,GAAA,YAAAA,EAAA,OACU,CACZ,CAAA,CAGN"}