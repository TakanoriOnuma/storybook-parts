{"version":3,"file":"Description-37e083f0.js","sources":["../../ui/blocks/src/blocks/Description.tsx"],"sourcesContent":["import type { FC } from 'react';\nimport React, { useContext } from 'react';\nimport { str } from '@storybook/docs-tools';\nimport { deprecate } from '@storybook/client-logger';\n\nimport type { DocsContextProps } from './DocsContext';\nimport { DocsContext } from './DocsContext';\nimport type { Component } from './types';\nimport type { Of } from './useOf';\nimport { useOf } from './useOf';\nimport { Markdown } from './Markdown';\n\nexport enum DescriptionType {\n  INFO = 'info',\n  NOTES = 'notes',\n  DOCGEN = 'docgen',\n  AUTO = 'auto',\n}\n\ntype Notes = string | any;\ntype Info = string | any;\n\nconst DEPRECATION_MIGRATION_LINK =\n  'https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#description-block-parametersnotes-and-parametersinfo';\n\ninterface DescriptionProps {\n  /**\n   * Specify where to get the description from. Can be a component, a CSF file or a story.\n   * If not specified, the description will be extracted from the meta of the attached CSF file.\n   */\n  of?: Of;\n  /**\n   * @deprecated Manually specifying description type is deprecated. See https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#description-block-parametersnotes-and-parametersinfo\n   */\n  type?: DescriptionType;\n  /**\n   * @deprecated The 'markdown' prop on the Description block is deprecated. See https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#description-block-parametersnotes-and-parametersinfo\n   */\n  markdown?: string;\n  /**\n   * @deprecated The 'children' prop on the Description block is deprecated. See https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#description-block-parametersnotes-and-parametersinfo\n   */\n  children?: string;\n}\n\nconst getNotes = (notes?: Notes) =>\n  notes && (typeof notes === 'string' ? notes : str(notes.markdown) || str(notes.text));\n\nconst getInfo = (info?: Info) => info && (typeof info === 'string' ? info : str(info.text));\n\nconst noDescription = (component?: Component): string | null => null;\n\nconst getDescriptionFromResolvedOf = (resolvedOf: ReturnType<typeof useOf>): string | null => {\n  switch (resolvedOf.type) {\n    case 'story': {\n      return resolvedOf.story.parameters.docs?.description?.story || null;\n    }\n    case 'meta': {\n      const { parameters, component } = resolvedOf.preparedMeta;\n      const metaDescription = parameters.docs?.description?.component;\n      if (metaDescription) {\n        return metaDescription;\n      }\n      return (\n        parameters.docs?.extractComponentDescription?.(component, {\n          component,\n          parameters,\n        }) || null\n      );\n    }\n    case 'component': {\n      const {\n        component,\n        projectAnnotations: { parameters },\n      } = resolvedOf;\n      return (\n        parameters.docs?.extractComponentDescription?.(component, {\n          component,\n          parameters,\n        }) || null\n      );\n    }\n    default: {\n      throw new Error(\n        `Unrecognized module type resolved from 'useOf', got: ${(resolvedOf as any).type}`\n      );\n    }\n  }\n};\n\nconst getDescriptionFromDeprecatedProps = (\n  { type, markdown, children }: DescriptionProps,\n  { storyById }: DocsContextProps<any>\n): string => {\n  const { component, parameters } = storyById();\n  if (children || markdown) {\n    return children || markdown;\n  }\n  const { notes, info, docs } = parameters;\n  if (Boolean(notes) || Boolean(info)) {\n    deprecate(\n      `Using 'parameters.notes' or 'parameters.info' properties to describe stories is deprecated. See ${DEPRECATION_MIGRATION_LINK}`\n    );\n  }\n\n  const { extractComponentDescription = noDescription, description } = docs || {};\n\n  // override component description\n  const componentDescriptionParameter = description?.component;\n  if (componentDescriptionParameter) {\n    return componentDescriptionParameter;\n  }\n\n  switch (type) {\n    case DescriptionType.INFO:\n      return getInfo(info);\n    case DescriptionType.NOTES:\n      return getNotes(notes);\n    case DescriptionType.DOCGEN:\n    case DescriptionType.AUTO:\n    default:\n      return extractComponentDescription(component, { component, ...parameters });\n  }\n};\n\nconst DescriptionContainer: FC<DescriptionProps> = (props) => {\n  const { of, type, markdown: markdownProp, children } = props;\n\n  if ('of' in props && of === undefined) {\n    throw new Error('Unexpected `of={undefined}`, did you mistype a CSF file reference?');\n  }\n  const context = useContext(DocsContext);\n  const resolvedOf = useOf(of || 'meta');\n  let markdown;\n  if (type || markdownProp || children) {\n    // pre 7.0 mode with deprecated props\n    markdown = getDescriptionFromDeprecatedProps(props, context);\n  } else {\n    // 7.0 mode with new 'of' prop\n    // pre 7.0 with only 'of' prop only supported referencing a component, which 7.0 supports as well here\n    markdown = getDescriptionFromResolvedOf(resolvedOf);\n  }\n  if (type) {\n    deprecate(\n      `Manually specifying description type is deprecated. See ${DEPRECATION_MIGRATION_LINK}`\n    );\n  }\n  if (markdownProp) {\n    deprecate(\n      `The 'markdown' prop on the Description block is deprecated. See ${DEPRECATION_MIGRATION_LINK}`\n    );\n  }\n  if (children) {\n    deprecate(\n      `The 'children' prop on the Description block is deprecated. See ${DEPRECATION_MIGRATION_LINK}`\n    );\n  }\n  return markdown ? <Markdown>{markdown}</Markdown> : null;\n};\n\nexport { DescriptionContainer as Description };\n"],"names":["deprecate","DescriptionType","DescriptionType2","DEPRECATION_MIGRATION_LINK","getNotes","notes","str","getInfo","info","noDescription","component","getDescriptionFromResolvedOf","resolvedOf","_b","_a","parameters","metaDescription","_d","_c","_f","_e","_h","_g","getDescriptionFromDeprecatedProps","type","markdown","children","storyById","docs","extractComponentDescription","description","componentDescriptionParameter","DescriptionContainer","props","of","markdownProp","context","useContext","DocsContext","useOf","jsx","Markdown"],"mappings":"+PAGA,KAAA,CAAA,UAAAA,CAAA,EAAA,mCASO,IAAAC,GAAAC,IACLA,EAAA,KAAA,OACAA,EAAA,MAAA,QACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OAJUA,IAAAD,GAAA,CAAA,CAAA,EAUZ,MAAAE,EAAA,uHAuBAC,EAAAC,GAAAA,IAAA,OAAAA,GAAA,SAAAA,EAAAC,EAAAD,EAAA,QAAA,GAAAC,EAAAD,EAAA,IAAA,GAGAE,EAAAC,GAAAA,IAAA,OAAAA,GAAA,SAAAA,EAAAF,EAAAE,EAAA,IAAA,GAEAC,EAAAC,GAAA,KAEAC,EAAAC,GAAA,qBACE,OAAAA,EAAA,KAAA,CAAyB,IAAA,QAErB,QAAAC,GAAAC,EAAAF,EAAA,MAAA,WAAA,OAAA,YAAAE,EAAA,cAAA,YAAAD,EAAA,QAAA,KACF,IAAA,OAAA,CAEE,KAAA,CAAA,WAAAE,EAAA,UAAAL,GAAAE,EAAA,aACAI,GAAAC,GAAAC,EAAAH,EAAA,OAAA,YAAAG,EAAA,cAAA,YAAAD,EAAA,UACA,OAAAD,KAGAG,GAAAC,EAAAL,EAAA,OAAA,YAAAK,EAAA,8BAAA,YAAAD,EAAA,KAAAC,EAAAV,EAAA,CAC4D,UAAAA,EACxD,WAAAK,CACA,KAAA,IACI,CAEV,IAAA,YAAA,CAEE,KAAA,CAAM,UAAAL,EACJ,mBAAA,CAAA,WAAAK,CAAA,CACiC,EAAAH,EAEnC,QAAAS,GAAAC,EAAAP,EAAA,OAAA,YAAAO,EAAA,8BAAA,YAAAD,EAAA,KAAAC,EAAAZ,EAAA,CAC4D,UAAAA,EACxD,WAAAK,CACA,KAAA,IACI,CAEV,QAEE,MAAA,IAAA,MAAU,wDAAAH,EAAA,MACoE,CAEhF,CAEJ,EAEAW,EAAA,CAAA,CAAA,KAAAC,EAAA,SAAAC,EAAA,SAAAC,CAAA,EAAA,CAAA,UAAAC,KAAA,CAIE,KAAA,CAAA,UAAAjB,EAAA,WAAAK,CAAA,EAAAY,EAAA,EACA,GAAAD,GAAAD,EACE,OAAAC,GAAAD,EAEF,KAAA,CAAA,MAAApB,EAAA,KAAAG,EAAA,KAAAoB,CAAA,EAAAb,GACAV,GAAAG,IACER,EAAA,mGAAAG,GACqG,EAIvG,KAAA,CAAA,4BAAA0B,EAAApB,EAAA,YAAAqB,CAAA,EAAAF,GAAA,CAAA,EAGAG,EAAAD,GAAA,YAAAA,EAAA,UACA,GAAAC,EACE,OAAAA,EAGF,OAAAP,EAAA,CAAc,IAAA,OAEV,OAAAjB,EAAAC,CAAA,EAAmB,IAAA,QAEnB,OAAAJ,EAAAC,CAAA,EAAqB,IAAA,SAClB,IAAA,OACA,QAEH,OAAAwB,EAAAnB,EAAA,CAAA,UAAAA,EAAA,GAAAK,CAAA,CAAA,CAA0E,CAEhF,EAEAiB,EAAAC,GAAA,CACE,KAAA,CAAA,GAAAC,EAAA,KAAAV,EAAA,SAAAW,EAAA,SAAAT,CAAA,EAAAO,EAEA,GAAA,OAAAA,GAAAC,IAAA,OACE,MAAA,IAAA,MAAA,oEAAA,EAEF,MAAAE,EAAAC,aAAAC,CAAA,EACA1B,EAAA2B,EAAAL,GAAA,MAAA,EACA,IAAAT,EACA,OAAAD,GAAAW,GAAAT,EAEED,EAAAF,EAAAU,EAAAG,CAAA,EAIAX,EAAAd,EAAAC,CAAA,EAEFY,GACExB,EAAA,2DAAAG,GAC6D,EAG/DgC,GACEnC,EAAA,mEAAAG,GACqE,EAGvEuB,GACE1B,EAAA,mEAAAG,GACqE,EAGvEsB,EAAAe,EAAAC,EAAA,CAAA,SAAAhB,CAAA,CAAA,EAAA,IACF;"}