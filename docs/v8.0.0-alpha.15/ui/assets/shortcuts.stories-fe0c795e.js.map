{"version":3,"file":"shortcuts.stories-fe0c795e.js","sources":["../../ui/manager/src/settings/shortcuts.tsx"],"sourcesContent":["import type { ComponentProps, FC } from 'react';\nimport React, { Component } from 'react';\nimport { styled, keyframes } from '@storybook/theming';\n\nimport {\n  eventToShortcut,\n  shortcutToHumanString,\n  shortcutMatchesShortcut,\n} from '@storybook/manager-api';\nimport { Button, Form, Icons } from '@storybook/components';\nimport SettingsFooter from './SettingsFooter';\n\nconst Header = styled.header(({ theme }) => ({\n  marginBottom: 20,\n  fontSize: theme.typography.size.m3,\n  fontWeight: theme.typography.weight.bold,\n  alignItems: 'center',\n  display: 'flex',\n}));\n\n// Grid\nexport const HeaderItem = styled.div(({ theme }) => ({\n  fontWeight: theme.typography.weight.bold,\n}));\n\nexport const GridHeaderRow = styled.div({\n  alignSelf: 'flex-end',\n  display: 'grid',\n  margin: '10px 0',\n  gridTemplateColumns: '1fr 1fr 12px',\n  '& > *:last-of-type': {\n    gridColumn: '2 / 2',\n    justifySelf: 'flex-end',\n    gridRow: '1',\n  },\n});\n\nexport const Row = styled.div(({ theme }) => ({\n  padding: '6px 0',\n  borderTop: `1px solid ${theme.appBorderColor}`,\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr 0px',\n}));\n\nexport const GridWrapper = styled.div({\n  display: 'grid',\n  gridTemplateColumns: '1fr',\n  gridAutoRows: 'minmax(auto, auto)',\n  marginBottom: 20,\n});\n\n// Form\nexport const Description = styled.div({\n  alignSelf: 'center',\n});\n\nexport type ValidationStates = 'valid' | 'error' | 'warn';\n\nexport const TextInput: FC<ComponentProps<typeof Form.Input> & { valid: ValidationStates }> =\n  styled(Form.Input)<{ valid: ValidationStates }>(\n    ({ valid, theme }) =>\n      valid === 'error'\n        ? {\n            animation: `${theme.animation.jiggle} 700ms ease-out`,\n          }\n        : {},\n    {\n      display: 'flex',\n      width: 80,\n      flexDirection: 'column',\n      justifySelf: 'flex-end',\n      paddingLeft: 4,\n      paddingRight: 4,\n      textAlign: 'center',\n    }\n  );\n\nexport const Fade = keyframes`\n0%,100% { opacity: 0; }\n  50% { opacity: 1; }\n`;\n\nexport const SuccessIcon = styled(Icons)<{ valid: string }>(\n  ({ valid, theme }) =>\n    valid === 'valid'\n      ? {\n          color: theme.color.positive,\n          animation: `${Fade} 2s ease forwards`,\n        }\n      : {\n          opacity: 0,\n        },\n  {\n    alignSelf: 'center',\n    display: 'flex',\n    marginLeft: 10,\n    height: 14,\n    width: 14,\n  }\n);\n\nconst Container = styled.div(({ theme }) => ({\n  fontSize: theme.typography.size.s2,\n  padding: `3rem 20px`,\n  maxWidth: 600,\n  margin: '0 auto',\n}));\n\nconst shortcutLabels = {\n  fullScreen: 'Go full screen',\n  togglePanel: 'Toggle addons',\n  panelPosition: 'Toggle addons orientation',\n  toggleNav: 'Toggle sidebar',\n  toolbar: 'Toggle canvas toolbar',\n  search: 'Focus search',\n  focusNav: 'Focus sidebar',\n  focusIframe: 'Focus canvas',\n  focusPanel: 'Focus addons',\n  prevComponent: 'Previous component',\n  nextComponent: 'Next component',\n  prevStory: 'Previous story',\n  nextStory: 'Next story',\n  shortcutsPage: 'Go to shortcuts page',\n  aboutPage: 'Go to about page',\n  collapseAll: 'Collapse all items on sidebar',\n  expandAll: 'Expand all items on sidebar',\n  remount: 'Remount component',\n};\n\nexport type Feature = keyof typeof shortcutLabels;\n\n// Shortcuts that cannot be configured\nconst fixedShortcuts = ['escape'];\n\nfunction toShortcutState(shortcutKeys: ShortcutsScreenProps['shortcutKeys']) {\n  return Object.entries(shortcutKeys).reduce(\n    (acc, [feature, shortcut]: [Feature, string]) =>\n      fixedShortcuts.includes(feature) ? acc : { ...acc, [feature]: { shortcut, error: false } },\n    {} as Record<Feature, any>\n  );\n}\n\nexport interface ShortcutsScreenState {\n  activeFeature: Feature;\n  successField: Feature;\n  shortcutKeys: Record<Feature, any>;\n  addonsShortcutLabels?: Record<string, string>;\n}\n\nexport interface ShortcutsScreenProps {\n  shortcutKeys: Record<Feature, any>;\n  addonsShortcutLabels?: Record<string, string>;\n  setShortcut: Function;\n  restoreDefaultShortcut: Function;\n  restoreAllDefaultShortcuts: Function;\n}\n\nclass ShortcutsScreen extends Component<ShortcutsScreenProps, ShortcutsScreenState> {\n  constructor(props: ShortcutsScreenProps) {\n    super(props);\n    this.state = {\n      activeFeature: undefined,\n      successField: undefined,\n      // The initial shortcutKeys that come from props are the defaults/what was saved\n      // As the user interacts with the page, the state stores the temporary, unsaved shortcuts\n      // This object also includes the error attached to each shortcut\n      shortcutKeys: toShortcutState(props.shortcutKeys),\n      addonsShortcutLabels: props.addonsShortcutLabels,\n    };\n  }\n\n  onKeyDown = (e: KeyboardEvent) => {\n    const { activeFeature, shortcutKeys } = this.state;\n\n    if (e.key === 'Backspace') {\n      return this.restoreDefault();\n    }\n\n    const shortcut = eventToShortcut(e);\n\n    // Keypress is not a potential shortcut\n    if (!shortcut) {\n      return false;\n    }\n\n    // Check we don't match any other shortcuts\n    const error = !!Object.entries(shortcutKeys).find(\n      ([feature, { shortcut: existingShortcut }]) =>\n        feature !== activeFeature &&\n        existingShortcut &&\n        shortcutMatchesShortcut(shortcut, existingShortcut)\n    );\n\n    return this.setState({\n      shortcutKeys: { ...shortcutKeys, [activeFeature]: { shortcut, error } },\n    });\n  };\n\n  onFocus = (focusedInput: Feature) => () => {\n    const { shortcutKeys } = this.state;\n\n    this.setState({\n      activeFeature: focusedInput,\n      shortcutKeys: {\n        ...shortcutKeys,\n        [focusedInput]: { shortcut: null, error: false },\n      },\n    });\n  };\n\n  onBlur = async () => {\n    const { shortcutKeys, activeFeature } = this.state;\n\n    if (shortcutKeys[activeFeature]) {\n      const { shortcut, error } = shortcutKeys[activeFeature];\n      if (!shortcut || error) {\n        return this.restoreDefault();\n      }\n      return this.saveShortcut();\n    }\n    return false;\n  };\n\n  saveShortcut = async () => {\n    const { activeFeature, shortcutKeys } = this.state;\n\n    const { setShortcut } = this.props;\n    await setShortcut(activeFeature, shortcutKeys[activeFeature].shortcut);\n    this.setState({ successField: activeFeature });\n  };\n\n  restoreDefaults = async () => {\n    const { restoreAllDefaultShortcuts } = this.props;\n\n    const defaultShortcuts = await restoreAllDefaultShortcuts();\n    return this.setState({ shortcutKeys: toShortcutState(defaultShortcuts) });\n  };\n\n  restoreDefault = async () => {\n    const { activeFeature, shortcutKeys } = this.state;\n\n    const { restoreDefaultShortcut } = this.props;\n\n    const defaultShortcut = await restoreDefaultShortcut(activeFeature);\n    return this.setState({\n      shortcutKeys: {\n        ...shortcutKeys,\n        ...toShortcutState({ [activeFeature]: defaultShortcut } as Record<Feature, any>),\n      },\n    });\n  };\n\n  displaySuccessMessage = (activeElement: Feature) => {\n    const { successField, shortcutKeys } = this.state;\n    return activeElement === successField && shortcutKeys[activeElement].error === false\n      ? 'valid'\n      : undefined;\n  };\n\n  displayError = (activeElement: Feature): ValidationStates => {\n    const { activeFeature, shortcutKeys } = this.state;\n    return activeElement === activeFeature && shortcutKeys[activeElement].error === true\n      ? 'error'\n      : undefined;\n  };\n\n  renderKeyInput = () => {\n    const { shortcutKeys, addonsShortcutLabels } = this.state;\n    const arr = Object.entries(shortcutKeys).map(([feature, { shortcut }]: [Feature, any]) => (\n      <Row key={feature}>\n        <Description>{shortcutLabels[feature] || addonsShortcutLabels[feature]}</Description>\n\n        <TextInput\n          spellCheck=\"false\"\n          valid={this.displayError(feature)}\n          className=\"modalInput\"\n          onBlur={this.onBlur}\n          onFocus={this.onFocus(feature)}\n          // @ts-expect-error (Converted from ts-ignore)\n          onKeyDown={this.onKeyDown}\n          value={shortcut ? shortcutToHumanString(shortcut) : ''}\n          placeholder=\"Type keys\"\n          readOnly\n        />\n\n        <SuccessIcon valid={this.displaySuccessMessage(feature)} icon=\"check\" />\n      </Row>\n    ));\n\n    return arr;\n  };\n\n  renderKeyForm = () => (\n    <GridWrapper>\n      <GridHeaderRow>\n        <HeaderItem>Commands</HeaderItem>\n        <HeaderItem>Shortcut</HeaderItem>\n      </GridHeaderRow>\n      {this.renderKeyInput()}\n    </GridWrapper>\n  );\n\n  render() {\n    const layout = this.renderKeyForm();\n    return (\n      <Container>\n        <Header>Keyboard shortcuts</Header>\n\n        {layout}\n        <Button\n          variant=\"outline\"\n          size=\"small\"\n          id=\"restoreDefaultsHotkeys\"\n          onClick={this.restoreDefaults}\n        >\n          Restore defaults\n        </Button>\n\n        <SettingsFooter />\n      </Container>\n    );\n  }\n}\n\nexport { ShortcutsScreen };\n"],"names":["Header","styled","theme","HeaderItem","GridHeaderRow","Row","GridWrapper","Description","TextInput","Form","valid","Fade","keyframes","SuccessIcon","Icons","Container","shortcutLabels","fixedShortcuts","toShortcutState","shortcutKeys","acc","feature","shortcut","ShortcutsScreen","Component","props","activeFeature","eventToShortcut","error","existingShortcut","shortcutMatchesShortcut","focusedInput","setShortcut","restoreAllDefaultShortcuts","defaultShortcuts","restoreDefaultShortcut","defaultShortcut","activeElement","successField","addonsShortcutLabels","React","shortcutToHumanString","layout","Button","SettingsFooter"],"mappings":"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"}