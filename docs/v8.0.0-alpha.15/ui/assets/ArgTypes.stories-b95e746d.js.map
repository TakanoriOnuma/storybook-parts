{"version":3,"file":"ArgTypes.stories-b95e746d.js","sources":["../../ui/blocks/src/blocks/ArgTypes.tsx"],"sourcesContent":["/* eslint-disable react/destructuring-assignment */\nimport type { Parameters, Renderer, StrictArgTypes } from '@storybook/csf';\nimport type { ModuleExports } from '@storybook/types';\nimport type { FC } from 'react';\nimport type { PropDescriptor } from '@storybook/preview-api';\nimport { filterArgTypes } from '@storybook/preview-api';\nimport type { ArgTypesExtractor } from '@storybook/docs-tools';\nimport React from 'react';\n\nimport { mapValues } from 'lodash';\nimport type { SortType } from '../components';\nimport { ArgsTable as PureArgsTable, ArgsTableError, TabbedArgsTable } from '../components';\nimport { useOf } from './useOf';\nimport { getComponentName } from './utils';\n\ntype ArgTypesParameters = {\n  include?: PropDescriptor;\n  exclude?: PropDescriptor;\n  sort?: SortType;\n};\n\ntype ArgTypesProps = ArgTypesParameters & {\n  of?: Renderer['component'] | ModuleExports;\n};\nfunction extractComponentArgTypes(\n  component: Renderer['component'],\n  parameters: Parameters\n): StrictArgTypes {\n  const { extractArgTypes }: { extractArgTypes: ArgTypesExtractor } = parameters.docs || {};\n  if (!extractArgTypes) {\n    throw new Error(ArgsTableError.ARGS_UNSUPPORTED);\n  }\n  return extractArgTypes(component);\n}\n\nfunction getArgTypesFromResolved(resolved: ReturnType<typeof useOf>) {\n  if (resolved.type === 'component') {\n    const {\n      component,\n      projectAnnotations: { parameters },\n    } = resolved;\n    return {\n      argTypes: extractComponentArgTypes(component, parameters),\n      parameters,\n      component,\n    };\n  }\n\n  if (resolved.type === 'meta') {\n    const {\n      preparedMeta: { argTypes, parameters, component, subcomponents },\n    } = resolved;\n    return { argTypes, parameters, component, subcomponents };\n  }\n\n  // In the case of the story, the enhanceArgs argTypeEnhancer has already added the extracted\n  // arg types from the component to the prepared story.\n  const {\n    story: { argTypes, parameters, component, subcomponents },\n  } = resolved;\n  return { argTypes, parameters, component, subcomponents };\n}\n\nexport const ArgTypes: FC<ArgTypesProps> = (props) => {\n  const { of } = props;\n  if ('of' in props && of === undefined) {\n    throw new Error('Unexpected `of={undefined}`, did you mistype a CSF file reference?');\n  }\n  const resolved = useOf(of || 'meta');\n  const { argTypes, parameters, component, subcomponents } = getArgTypesFromResolved(resolved);\n  const argTypesParameters = parameters.docs?.argTypes || ({} as ArgTypesParameters);\n\n  const include = props.include ?? argTypesParameters.include;\n  const exclude = props.exclude ?? argTypesParameters.exclude;\n  const sort = props.sort ?? argTypesParameters.sort;\n\n  const filteredArgTypes = filterArgTypes(argTypes, include, exclude);\n\n  const hasSubcomponents = Boolean(subcomponents) && Object.keys(subcomponents).length > 0;\n\n  if (!hasSubcomponents) {\n    return <PureArgsTable rows={filteredArgTypes} sort={sort} />;\n  }\n\n  const mainComponentName = getComponentName(component);\n  const subcomponentTabs = mapValues(subcomponents, (comp) => ({\n    rows: filterArgTypes(extractComponentArgTypes(comp, parameters), include, exclude),\n    sort,\n  }));\n  const tabs = {\n    [mainComponentName]: { rows: filteredArgTypes, sort },\n    ...subcomponentTabs,\n  };\n  return <TabbedArgsTable tabs={tabs} sort={sort} />;\n};\n"],"names":["filterArgTypes","extractComponentArgTypes","component","parameters","extractArgTypes","ArgsTableError","getArgTypesFromResolved","resolved","argTypes","subcomponents","ArgTypes","props","of","useOf","argTypesParameters","_a","include","exclude","sort","filteredArgTypes","React","PureArgsTable","mainComponentName","getComponentName","subcomponentTabs","mapValues","comp","tabs","TabbedArgsTable"],"mappings":"uiDAKA,KAAA,CAAA,eAAAA,CAAA,EAAA,iCAmBA,SAAAC,GACAC,EACAC,EACA,CACA,KAAA,CAAA,gBAAAC,CAAA,EAAAD,EAAA,MAAA,CAAA,EACA,GAAA,CAAAC,EACA,MAAA,IAAA,MAAAC,GAAA,gBAAA,EAEA,OAAAD,EAAAF,CAAA,CACA,CAEA,SAAAI,GAAAC,EAAA,CACA,GAAAA,EAAA,OAAA,YAAA,CACA,KAAA,CACA,UAAAL,EACA,mBAAA,CAAA,WAAAC,CAAA,CACA,EAAAI,EACA,MAAA,CACA,SAAAN,GAAAC,EAAAC,CAAA,EACA,WAAAA,EACA,UAAAD,CAAA,CAEA,CAEA,GAAAK,EAAA,OAAA,OAAA,CACA,KAAA,CACA,aAAA,CAAA,SAAAC,EAAA,WAAAL,EAAA,UAAAD,EAAA,cAAAO,CAAA,CACA,EAAAF,EACA,MAAA,CAAA,SAAAC,EAAA,WAAAL,EAAA,UAAAD,EAAA,cAAAO,EACA,CAIA,KAAA,CACA,MAAA,CAAA,SAAAD,EAAA,WAAAL,EAAA,UAAAD,EAAA,cAAAO,CAAA,CACA,EAAAF,EACA,MAAA,CAAA,SAAAC,EAAA,WAAAL,EAAA,UAAAD,EAAA,cAAAO,CAAA,CACA,CAEA,MAAAC,GAAAC,GAAA,OACA,KAAA,CAAA,GAAAC,CAAA,EAAAD,EACA,GAAA,OAAAA,GAAAC,IAAA,OACA,MAAA,IAAA,MAAA,oEAAA,EAEA,MAAAL,EAAAM,GAAAD,GAAA,MAAA,EACA,CAAA,SAAAJ,EAAA,WAAAL,EAAA,UAAAD,EAAA,cAAAO,GAAAH,GAAAC,CAAA,EACAO,IAAAC,EAAAZ,EAAA,OAAA,YAAAY,EAAA,WAAA,CAAA,EAEAC,EAAAL,EAAA,SAAAG,EAAA,QACAG,EAAAN,EAAA,SAAAG,EAAA,QACAI,EAAAP,EAAA,MAAAG,EAAA,KAEAK,EAAAnB,EAAAQ,EAAAQ,EAAAC,CAAA,EAIA,GAAA,EAFA,EAAAR,GAAA,OAAA,KAAAA,CAAA,EAAA,OAAA,GAGA,OAAAW,EAAA,cAAAC,GAAA,CAAA,KAAAF,EAAA,KAAAD,CAAA,CAAA,EAGA,MAAAI,GAAAC,GAAArB,CAAA,EACAsB,GAAAC,GAAAA,UAAAhB,EAAAiB,KAAA,CACA,KAAA1B,EAAAC,GAAAyB,GAAAvB,CAAA,EAAAa,EAAAC,CAAA,EACA,KAAAC,CACA,EAAA,EACAS,GAAA,CACA,CAAAL,EAAA,EAAA,CAAA,KAAAH,EAAA,KAAAD,CAAA,EACA,GAAAM,EAAA,EAEA,OAAAJ,EAAA,cAAAQ,GAAA,CAAA,KAAAD,GAAA,KAAAT,CAAA,CAAA,CACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}