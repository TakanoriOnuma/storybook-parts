{"version":3,"mappings":"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","names":["Table","styled","theme","codeCommon","ArgJsDoc","tags","params","x","hasDisplayableParams","hasDisplayableDeprecated","hasDisplayableReturns","jsx","Fragment","jsxs","ITEMS_BEFORE_EXPANSION","Summary","isExpanded","Text","simple","ExpandButton","Expandable","Detail","width","ArrowIcon","Icons","EmptyArg","ArgText","text","calculateDetailWidth","memoize","detail","lines","getSummaryItems","summary","summaryItems","value","uniq","renderSummaryItems","items","item","ArgSummary","initialExpandedArgs","isOpen","setIsOpen","useState","setIsExpanded","summaryAsString","itemsCount","WithTooltipPure","isVisible","SyntaxHighlighter","ArgValue","LazyColorControl","lazy","__vitePreload","ColorControl","props","Suspense","Controls","ObjectControl","BooleanControl","DateControl","NumberControl","OptionsControl","RangeControl","TextControl","FilesControl","NoControl","ArgControl","row","arg","updateArgs","isHovered","key","control","isFocused","setFocused","boxedValue","setBoxedValue","useEffect","onChange","useCallback","argVal","onBlur","onFocus","Link","Control","Name","Required","Description","Type","hasDescription","transparentize","TypeWithJsDoc","StyledTd","expandable","ArgRow","setIsHovered","compact","name","description","table","type","defaultValue","required","_a","Markdown","ExpanderIcon","FlexWrapper","Section","Subsection","StyledTr","lighten","ClickIntercept","SectionRow","level","label","children","initialExpanded","colSpan","expanded","setExpanded","Level","itemCount","caption","icon","helperText","e","Row","Column","numColumn","SkeletonText","height","columnWidth","Skeleton","Wrapper","inAddonPanel","Content","Title","Links","Divider","Empty","isLoading","setIsLoading","load","once","TableWrapper","StyledIconButton","IconButton","ControlHeadingWrapper","ArgsTableError","ArgsTableError2","sortFns","a","b","_b","groupRows","rows","sort","sections","category","subcategory","section","subsection","sortFn","sortSubsection","record","acc","cur","safeIncludeConditionalArg","args","globals","includeConditionalArg","err","ArgsTable","resetArgs","error","EmptyBlock","groups","pickBy","hasNoUngrouped","hasNoSections","hasNoUngroupedSubsections","common","ResetWrapper"],"sources":["../../ui/blocks/src/components/ArgsTable/ArgJsDoc.tsx","../../ui/blocks/src/components/ArgsTable/ArgValue.tsx","../../ui/blocks/src/controls/index.tsx","../../ui/blocks/src/components/ArgsTable/ArgControl.tsx","../../ui/blocks/src/components/ArgsTable/ArgRow.tsx","../../ui/blocks/src/components/ArgsTable/SectionRow.tsx","../../ui/blocks/src/components/ArgsTable/Skeleton.tsx","../../ui/blocks/src/components/ArgsTable/Empty.tsx","../../ui/blocks/src/components/ArgsTable/ArgsTable.tsx"],"sourcesContent":["import type { FC } from 'react';\nimport React from 'react';\nimport type { CSSObject } from '@storybook/theming';\nimport { styled } from '@storybook/theming';\nimport { codeCommon } from '@storybook/components';\nimport type { JsDocTags } from './types';\n\ninterface ArgJsDocArgs {\n  tags: JsDocTags;\n}\n\nexport const Table = styled.table(({ theme }) => ({\n  '&&': {\n    // Escape default table styles\n    borderCollapse: 'collapse',\n    borderSpacing: 0,\n    border: 'none',\n\n    tr: {\n      border: 'none !important',\n      background: 'none',\n    },\n\n    'td, th': {\n      padding: 0,\n      border: 'none',\n      width: 'auto!important',\n    },\n    // End escape\n\n    marginTop: 0,\n    marginBottom: 0,\n\n    'th:first-of-type, td:first-of-type': {\n      paddingLeft: 0,\n    },\n\n    'th:last-of-type, td:last-of-type': {\n      paddingRight: 0,\n    },\n\n    td: {\n      paddingTop: 0,\n      paddingBottom: 4,\n\n      '&:not(:first-of-type)': {\n        paddingLeft: 10,\n        paddingRight: 0,\n      },\n    },\n\n    tbody: {\n      boxShadow: 'none',\n      border: 'none',\n    },\n\n    code: codeCommon({ theme }) as CSSObject,\n\n    div: {\n      span: {\n        fontWeight: 'bold',\n      },\n    },\n\n    '& code': {\n      margin: 0,\n      display: 'inline-block',\n      fontSize: theme.typography.size.s1,\n    },\n  },\n}));\n\nexport const ArgJsDoc: FC<ArgJsDocArgs> = ({ tags }) => {\n  const params = (tags.params || []).filter((x) => x.description);\n  const hasDisplayableParams = params.length !== 0;\n  const hasDisplayableDeprecated = tags.deprecated != null;\n  const hasDisplayableReturns = tags.returns != null && tags.returns.description != null;\n\n  if (!hasDisplayableParams && !hasDisplayableReturns && !hasDisplayableDeprecated) {\n    return null;\n  }\n\n  return (\n    <>\n      <Table>\n        <tbody>\n          {hasDisplayableDeprecated && (\n            <tr key=\"deprecated\">\n              <td colSpan={2}>\n                <strong>Deprecated</strong>: {tags.deprecated}\n              </td>\n            </tr>\n          )}\n          {hasDisplayableParams &&\n            params.map((x) => {\n              return (\n                <tr key={x.name}>\n                  <td>\n                    <code>{x.name}</code>\n                  </td>\n                  <td>{x.description}</td>\n                </tr>\n              );\n            })}\n          {hasDisplayableReturns && (\n            <tr key=\"returns\">\n              <td>\n                <code>Returns</code>\n              </td>\n              <td>{tags.returns.description}</td>\n            </tr>\n          )}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport React, { useState } from 'react';\nimport memoize from 'memoizerific';\nimport uniq from 'lodash/uniq.js';\nimport { styled } from '@storybook/theming';\nimport { WithTooltipPure, Icons, SyntaxHighlighter, codeCommon } from '@storybook/components';\nimport type { PropSummaryValue } from './types';\n\ninterface ArgValueProps {\n  value?: PropSummaryValue;\n  initialExpandedArgs?: boolean;\n}\n\ninterface ArgTextProps {\n  text: string;\n  simple?: boolean;\n}\n\ninterface ArgSummaryProps {\n  value: PropSummaryValue;\n  initialExpandedArgs?: boolean;\n}\n\nconst ITEMS_BEFORE_EXPANSION = 8;\n\nconst Summary = styled.div<{ isExpanded?: boolean }>(({ isExpanded }) => ({\n  display: 'flex',\n  flexDirection: isExpanded ? 'column' : 'row',\n  flexWrap: 'wrap',\n  alignItems: 'flex-start',\n  marginBottom: '-4px',\n  minWidth: 100,\n}));\n\nconst Text = styled.span<{ simple?: boolean }>(codeCommon, ({ theme, simple = false }) => ({\n  flex: '0 0 auto',\n  fontFamily: theme.typography.fonts.mono,\n  fontSize: theme.typography.size.s1,\n  wordBreak: 'break-word',\n  whiteSpace: 'normal',\n  maxWidth: '100%',\n  margin: 0,\n  marginRight: '4px',\n  marginBottom: '4px',\n  paddingTop: '2px',\n  paddingBottom: '2px',\n  lineHeight: '13px',\n  ...(simple && {\n    background: 'transparent',\n    border: '0 none',\n    paddingLeft: 0,\n  }),\n}));\n\nconst ExpandButton = styled.button(({ theme }) => ({\n  fontFamily: theme.typography.fonts.mono,\n  color: theme.color.secondary,\n  marginBottom: '4px',\n  background: 'none',\n  border: 'none',\n}));\n\nconst Expandable = styled.div(codeCommon, ({ theme }) => ({\n  fontFamily: theme.typography.fonts.mono,\n  color: theme.color.secondary,\n  fontSize: theme.typography.size.s1, // overrides codeCommon\n  margin: 0,\n  whiteSpace: 'nowrap',\n  display: 'flex',\n  alignItems: 'center',\n}));\n\nconst Detail = styled.div<{ width: string }>(({ theme, width }) => ({\n  width,\n  minWidth: 200,\n  maxWidth: 800,\n  padding: 15,\n  // Don't remove the mono fontFamily here even if it seems useless, this is used by the browser to calculate the length of a \"ch\" unit.\n  fontFamily: theme.typography.fonts.mono,\n  fontSize: theme.typography.size.s1,\n  // Most custom stylesheet will reset the box-sizing to \"border-box\" and will break the tooltip.\n  boxSizing: 'content-box',\n\n  '& code': {\n    padding: '0 !important',\n  },\n}));\n\nconst ArrowIcon = styled(Icons)({\n  height: 10,\n  width: 10,\n  minWidth: 10,\n  marginLeft: 4,\n});\n\nconst EmptyArg = () => {\n  return <span>-</span>;\n};\n\nconst ArgText: FC<ArgTextProps> = ({ text, simple }) => {\n  return <Text simple={simple}>{text}</Text>;\n};\n\nconst calculateDetailWidth = memoize(1000)((detail: string): string => {\n  const lines = detail.split(/\\r?\\n/);\n\n  return `${Math.max(...lines.map((x) => x.length))}ch`;\n});\n\nconst getSummaryItems = (summary: string) => {\n  if (!summary) return [summary];\n  const splittedItems = summary.split('|');\n  const summaryItems = splittedItems.map((value) => value.trim());\n\n  return uniq(summaryItems);\n};\n\nconst renderSummaryItems = (summaryItems: string[], isExpanded = true) => {\n  let items = summaryItems;\n  if (!isExpanded) {\n    items = summaryItems.slice(0, ITEMS_BEFORE_EXPANSION);\n  }\n\n  return items.map((item) => <ArgText key={item} text={item === '' ? '\"\"' : item} />);\n};\n\nconst ArgSummary: FC<ArgSummaryProps> = ({ value, initialExpandedArgs }) => {\n  const { summary, detail } = value;\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(initialExpandedArgs || false);\n\n  if (summary === undefined || summary === null) return null;\n  // summary is used for the default value\n  // below check fixes not displaying default values for boolean typescript vars\n  const summaryAsString = typeof summary.toString === 'function' ? summary.toString() : summary;\n\n  if (detail == null) {\n    const cannotBeSafelySplitted = /[(){}[\\]<>]/.test(summaryAsString);\n\n    if (cannotBeSafelySplitted) {\n      return <ArgText text={summaryAsString} />;\n    }\n\n    const summaryItems = getSummaryItems(summaryAsString);\n    const itemsCount = summaryItems.length;\n    const hasManyItems = itemsCount > ITEMS_BEFORE_EXPANSION;\n\n    return hasManyItems ? (\n      <Summary isExpanded={isExpanded}>\n        {renderSummaryItems(summaryItems, isExpanded)}\n        <ExpandButton onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? 'Show less...' : `Show ${itemsCount - ITEMS_BEFORE_EXPANSION} more...`}\n        </ExpandButton>\n      </Summary>\n    ) : (\n      <Summary>{renderSummaryItems(summaryItems)}</Summary>\n    );\n  }\n\n  return (\n    <WithTooltipPure\n      closeOnOutsideClick\n      placement=\"bottom\"\n      visible={isOpen}\n      onVisibleChange={(isVisible) => {\n        setIsOpen(isVisible);\n      }}\n      tooltip={\n        <Detail width={calculateDetailWidth(detail)}>\n          <SyntaxHighlighter language=\"jsx\" format={false}>\n            {detail}\n          </SyntaxHighlighter>\n        </Detail>\n      }\n    >\n      <Expandable className=\"sbdocs-expandable\">\n        <span>{summaryAsString}</span>\n        <ArrowIcon icon={isOpen ? 'arrowup' : 'arrowdown'} />\n      </Expandable>\n    </WithTooltipPure>\n  );\n};\n\nexport const ArgValue: FC<ArgValueProps> = ({ value, initialExpandedArgs }) => {\n  return value == null ? (\n    <EmptyArg />\n  ) : (\n    <ArgSummary value={value} initialExpandedArgs={initialExpandedArgs} />\n  );\n};\n","import type { ComponentProps } from 'react';\nimport React, { lazy, Suspense } from 'react';\nimport type { ColorControlProps } from './Color';\n\nexport * from './types';\n\nexport * from './Boolean';\n\nexport type ColorProps = ColorControlProps;\n\nconst LazyColorControl = lazy(() => import('./Color'));\n\nexport const ColorControl = (props: ComponentProps<typeof LazyColorControl>) => (\n  <Suspense fallback={<div />}>\n    <LazyColorControl {...props} />\n  </Suspense>\n);\n\nexport * from './Date';\n\nexport * from './Number';\n\nexport * from './options';\nexport * from './Object';\n\nexport * from './Range';\n\nexport * from './Text';\n\nexport * from './Files';\n","import type { FC } from 'react';\nimport React, { useCallback, useState, useEffect } from 'react';\n\nimport { Link } from '@storybook/components';\nimport {\n  BooleanControl,\n  ColorControl,\n  DateControl,\n  FilesControl,\n  NumberControl,\n  ObjectControl,\n  OptionsControl,\n  RangeControl,\n  TextControl,\n} from '../../controls';\nimport type { Args, ArgType } from './types';\n\nexport interface ArgControlProps {\n  row: ArgType;\n  arg: any;\n  updateArgs: (args: Args) => void;\n  isHovered: boolean;\n}\n\nconst Controls: Record<string, FC> = {\n  array: ObjectControl,\n  object: ObjectControl,\n  boolean: BooleanControl,\n  color: ColorControl,\n  date: DateControl,\n  number: NumberControl,\n  check: OptionsControl,\n  'inline-check': OptionsControl,\n  radio: OptionsControl,\n  'inline-radio': OptionsControl,\n  select: OptionsControl,\n  'multi-select': OptionsControl,\n  range: RangeControl,\n  text: TextControl,\n  file: FilesControl,\n};\n\nconst NoControl = () => <>-</>;\n\nexport const ArgControl: FC<ArgControlProps> = ({ row, arg, updateArgs, isHovered }) => {\n  const { key, control } = row;\n\n  const [isFocused, setFocused] = useState(false);\n  // box because arg can be a fn (e.g. actions) and useState calls fn's\n  const [boxedValue, setBoxedValue] = useState({ value: arg });\n\n  useEffect(() => {\n    if (!isFocused) setBoxedValue({ value: arg });\n  }, [isFocused, arg]);\n\n  const onChange = useCallback(\n    (argVal: any) => {\n      setBoxedValue({ value: argVal });\n      updateArgs({ [key]: argVal });\n      return argVal;\n    },\n    [updateArgs, key]\n  );\n\n  const onBlur = useCallback(() => setFocused(false), []);\n  const onFocus = useCallback(() => setFocused(true), []);\n\n  if (!control || control.disable)\n    return isHovered ? (\n      <Link\n        href=\"https://storybook.js.org/docs/react/essentials/controls\"\n        target=\"_blank\"\n        withArrow\n      >\n        Setup controls\n      </Link>\n    ) : (\n      <NoControl />\n    );\n\n  // row.name is a display name and not a suitable DOM input id or name - i might contain whitespace etc.\n  // row.key is a hash key and therefore a much safer choice\n  const props = { name: key, argType: row, value: boxedValue.value, onChange, onBlur, onFocus };\n  const Control = Controls[control.type] || NoControl;\n  return <Control {...props} {...control} controlType={control.type} />;\n};\n","import type { FC } from 'react';\nimport React, { useState } from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport { transparentize } from 'polished';\nimport type { CSSObject } from '@storybook/theming';\nimport { styled } from '@storybook/theming';\nimport { codeCommon } from '@storybook/components';\nimport type { ArgType, Args, TableAnnotation } from './types';\nimport { ArgJsDoc } from './ArgJsDoc';\nimport { ArgValue } from './ArgValue';\n\nimport type { ArgControlProps } from './ArgControl';\nimport { ArgControl } from './ArgControl';\n\ninterface ArgRowProps {\n  row: ArgType;\n  arg: any;\n  updateArgs?: (args: Args) => void;\n  compact?: boolean;\n  expandable?: boolean;\n  initialExpandedArgs?: boolean;\n}\n\nconst Name = styled.span({ fontWeight: 'bold' });\n\nconst Required = styled.span(({ theme }) => ({\n  color: theme.color.negative,\n  fontFamily: theme.typography.fonts.mono,\n  cursor: 'help',\n}));\n\nconst Description = styled.div(({ theme }) => ({\n  '&&': {\n    p: {\n      margin: '0 0 10px 0',\n    },\n    a: {\n      color: theme.color.secondary,\n    },\n  },\n\n  code: {\n    ...(codeCommon({ theme }) as CSSObject),\n    fontSize: 12,\n    fontFamily: theme.typography.fonts.mono,\n  } as CSSObject,\n\n  '& code': {\n    margin: 0,\n    display: 'inline-block',\n  },\n\n  '& pre > code': {\n    whiteSpace: 'pre-wrap',\n  },\n}));\n\nconst Type = styled.div<{ hasDescription: boolean }>(({ theme, hasDescription }) => ({\n  color:\n    theme.base === 'light'\n      ? transparentize(0.1, theme.color.defaultText)\n      : transparentize(0.2, theme.color.defaultText),\n  marginTop: hasDescription ? 4 : 0,\n}));\n\nconst TypeWithJsDoc = styled.div<{ hasDescription: boolean }>(({ theme, hasDescription }) => ({\n  color:\n    theme.base === 'light'\n      ? transparentize(0.1, theme.color.defaultText)\n      : transparentize(0.2, theme.color.defaultText),\n  marginTop: hasDescription ? 12 : 0,\n  marginBottom: 12,\n}));\n\nconst StyledTd = styled.td<{ expandable: boolean }>(({ theme, expandable }) => ({\n  paddingLeft: expandable ? '40px !important' : '20px !important',\n}));\n\nexport const ArgRow: FC<ArgRowProps> = (props) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const { row, updateArgs, compact, expandable, initialExpandedArgs } = props;\n  const { name, description } = row;\n  const table = (row.table || {}) as TableAnnotation;\n  const type = table.type || row.type;\n  const defaultValue = table.defaultValue || row.defaultValue;\n  const required = row.type?.required;\n  const hasDescription = description != null && description !== '';\n\n  return (\n    <tr onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>\n      <StyledTd expandable={expandable}>\n        <Name>{name}</Name>\n        {required ? <Required title=\"Required\">*</Required> : null}\n      </StyledTd>\n      {compact ? null : (\n        <td>\n          {hasDescription && (\n            <Description>\n              <Markdown>{description}</Markdown>\n            </Description>\n          )}\n          {table.jsDocTags != null ? (\n            <>\n              <TypeWithJsDoc hasDescription={hasDescription}>\n                <ArgValue value={type} initialExpandedArgs={initialExpandedArgs} />\n              </TypeWithJsDoc>\n              <ArgJsDoc tags={table.jsDocTags} />\n            </>\n          ) : (\n            <Type hasDescription={hasDescription}>\n              <ArgValue value={type} initialExpandedArgs={initialExpandedArgs} />\n            </Type>\n          )}\n        </td>\n      )}\n      {compact ? null : (\n        <td>\n          <ArgValue value={defaultValue} initialExpandedArgs={initialExpandedArgs} />\n        </td>\n      )}\n      {updateArgs ? (\n        <td>\n          <ArgControl {...(props as ArgControlProps)} isHovered={isHovered} />\n        </td>\n      ) : null}\n    </tr>\n  );\n};\n","import type { FC } from 'react';\nimport React, { useState } from 'react';\nimport { transparentize, lighten } from 'polished';\nimport { styled } from '@storybook/theming';\nimport { Icons } from '@storybook/components';\n\ntype Level = 'section' | 'subsection';\n\nexport interface SectionRowProps {\n  children?: React.ReactNode;\n  label: string;\n  level: Level;\n  initialExpanded?: boolean;\n  colSpan: number;\n}\n\nconst ExpanderIcon = styled(Icons)(({ theme }) => ({\n  marginRight: 8,\n  marginLeft: -10,\n  marginTop: -2, // optical alignment\n  height: 12,\n  width: 12,\n  color:\n    theme.base === 'light'\n      ? transparentize(0.25, theme.color.defaultText)\n      : transparentize(0.3, theme.color.defaultText),\n  border: 'none',\n  display: 'inline-block',\n}));\n\nconst FlexWrapper = styled.span(({ theme }) => ({\n  display: 'flex',\n  lineHeight: '20px',\n  alignItems: 'center',\n}));\n\nconst Section = styled.td(({ theme }) => ({\n  position: 'relative',\n  letterSpacing: '0.35em',\n  textTransform: 'uppercase',\n  fontWeight: theme.typography.weight.bold,\n  fontSize: theme.typography.size.s1 - 1,\n  color:\n    theme.base === 'light'\n      ? transparentize(0.4, theme.color.defaultText)\n      : transparentize(0.6, theme.color.defaultText),\n  background: `${theme.background.app} !important`,\n  '& ~ td': {\n    background: `${theme.background.app} !important`,\n  },\n}));\n\nconst Subsection = styled.td(({ theme }) => ({\n  position: 'relative',\n  fontWeight: theme.typography.weight.bold,\n  fontSize: theme.typography.size.s2 - 1,\n  background: theme.background.app,\n}));\n\nconst StyledTd = styled.td(() => ({\n  position: 'relative',\n}));\n\nconst StyledTr = styled.tr(({ theme }) => ({\n  '&:hover > td': {\n    backgroundColor: `${lighten(0.005, theme.background.app)} !important`,\n    boxShadow: `${theme.color.mediumlight} 0 - 1px 0 0 inset`,\n    cursor: 'row-resize',\n  },\n}));\n\nconst ClickIntercept = styled.button(() => ({\n  // reset button style\n  background: 'none',\n  border: 'none',\n  padding: '0',\n  font: 'inherit',\n\n  // add custom style\n  position: 'absolute',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0,\n  height: '100%',\n  width: '100%',\n  color: 'transparent',\n  cursor: 'row-resize !important',\n}));\n\nexport const SectionRow: FC<SectionRowProps> = ({\n  level = 'section',\n  label,\n  children,\n  initialExpanded = true,\n  colSpan = 3,\n}) => {\n  const [expanded, setExpanded] = useState(initialExpanded);\n  const Level = level === 'subsection' ? Subsection : Section;\n  // @ts-expect-error (Converted from ts-ignore)\n  const itemCount = children?.length || 0;\n  const caption = level === 'subsection' ? `${itemCount} item${itemCount !== 1 ? 's' : ''}` : '';\n  const icon = expanded ? 'arrowdown' : 'arrowright';\n\n  const helperText = `${expanded ? 'Hide' : 'Show'} ${\n    level === 'subsection' ? itemCount : label\n  } item${itemCount !== 1 ? 's' : ''}`;\n\n  return (\n    <>\n      <StyledTr title={helperText}>\n        <Level colSpan={1}>\n          <ClickIntercept onClick={(e) => setExpanded(!expanded)} tabIndex={0}>\n            {helperText}\n          </ClickIntercept>\n          <FlexWrapper>\n            <ExpanderIcon icon={icon} />\n            {label}\n          </FlexWrapper>\n        </Level>\n        <StyledTd colSpan={colSpan - 1}>\n          <ClickIntercept\n            onClick={(e) => setExpanded(!expanded)}\n            tabIndex={-1}\n            style={{ outline: 'none' }}\n          >\n            {helperText}\n          </ClickIntercept>\n          {expanded ? null : caption}\n        </StyledTd>\n      </StyledTr>\n      {expanded ? children : null}\n    </>\n  );\n};\n","import { styled } from '@storybook/theming';\nimport type { FC } from 'react';\nimport React from 'react';\n\nconst Row = styled.div(({ theme }) => ({\n  display: 'flex',\n  gap: 16,\n  borderBottom: `1px solid ${theme.appBorderColor}`,\n\n  '&:last-child': {\n    borderBottom: 0,\n  },\n}));\n\nconst Column = styled.div<{ numColumn: number }>(({ numColumn }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  flex: numColumn || 1,\n  gap: 5,\n  padding: '12px 20px',\n}));\n\nconst SkeletonText = styled.div<{ width?: number | string; height?: number }>(\n  ({ theme, width, height }) => ({\n    animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,\n    background: theme.appBorderColor,\n    width: width || '100%',\n    height: height || 16,\n    borderRadius: 3,\n  })\n);\n\nconst columnWidth = [2, 4, 2, 2];\n\nexport const Skeleton: FC = () => (\n  <>\n    <Row>\n      <Column numColumn={columnWidth[0]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n      <Column numColumn={columnWidth[1]}>\n        <SkeletonText width=\"30%\" />\n      </Column>\n      <Column numColumn={columnWidth[2]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n      <Column numColumn={columnWidth[3]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n    </Row>\n    <Row>\n      <Column numColumn={columnWidth[0]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n      <Column numColumn={columnWidth[1]}>\n        <SkeletonText width=\"80%\" />\n        <SkeletonText width=\"30%\" />\n      </Column>\n      <Column numColumn={columnWidth[2]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n      <Column numColumn={columnWidth[3]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n    </Row>\n    <Row>\n      <Column numColumn={columnWidth[0]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n      <Column numColumn={columnWidth[1]}>\n        <SkeletonText width=\"80%\" />\n        <SkeletonText width=\"30%\" />\n      </Column>\n      <Column numColumn={columnWidth[2]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n      <Column numColumn={columnWidth[3]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n    </Row>\n    <Row>\n      <Column numColumn={columnWidth[0]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n      <Column numColumn={columnWidth[1]}>\n        <SkeletonText width=\"80%\" />\n        <SkeletonText width=\"30%\" />\n      </Column>\n      <Column numColumn={columnWidth[2]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n      <Column numColumn={columnWidth[3]}>\n        <SkeletonText width=\"60%\" />\n      </Column>\n    </Row>\n  </>\n);\n","import type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { styled } from '@storybook/theming';\nimport { Icons, Link } from '@storybook/components';\n\ninterface EmptyProps {\n  inAddonPanel?: boolean;\n}\n\nconst Wrapper = styled.div<{ inAddonPanel?: boolean }>(({ inAddonPanel, theme }) => ({\n  height: inAddonPanel ? '100%' : 'auto',\n  display: 'flex',\n  border: inAddonPanel ? 'none' : `1px solid ${theme.appBorderColor}`,\n  borderRadius: inAddonPanel ? 0 : theme.appBorderRadius,\n  padding: inAddonPanel ? 0 : 40,\n  alignItems: 'center',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  gap: 15,\n  background: theme.background.content,\n  boxShadow: 'rgba(0, 0, 0, 0.10) 0 1px 3px 0',\n}));\n\nconst Content = styled.div({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 4,\n  maxWidth: 415,\n});\n\nconst Title = styled.div(({ theme }) => ({\n  fontWeight: theme.typography.weight.bold,\n  fontSize: theme.typography.size.s2 - 1,\n  textAlign: 'center',\n  color: theme.textColor,\n}));\n\nconst Description = styled.div(({ theme }) => ({\n  fontWeight: theme.typography.weight.regular,\n  fontSize: theme.typography.size.s2 - 1,\n  textAlign: 'center',\n  color: theme.textMutedColor,\n}));\n\nconst Links = styled.div(({ theme }) => ({\n  display: 'flex',\n  fontSize: theme.typography.size.s2 - 1,\n  gap: 25,\n}));\n\nconst Divider = styled.div(({ theme }) => ({\n  width: 1,\n  height: 16,\n  backgroundColor: theme.appBorderColor,\n}));\n\nexport const Empty: FC<EmptyProps> = ({ inAddonPanel }) => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  // We are adding a small delay to avoid flickering when the story is loading.\n  // It takes a bit of time for the controls to appear, so we don't want\n  // to show the empty state for a split second.\n  useEffect(() => {\n    const load = setTimeout(() => {\n      setIsLoading(false);\n    }, 100);\n\n    return () => clearTimeout(load);\n  }, []);\n\n  if (isLoading) return null;\n\n  return (\n    <Wrapper inAddonPanel={inAddonPanel}>\n      <Content>\n        <Title>\n          {inAddonPanel\n            ? 'Interactive story playground'\n            : \"Args table with interactive controls couldn't be auto-generated\"}\n        </Title>\n        <Description>\n          Controls give you an easy to use interface to test your components. Set your story args\n          and you&apos;ll see controls appearing here automatically.\n        </Description>\n      </Content>\n      <Links>\n        {inAddonPanel && (\n          <>\n            <Link href=\"https://youtu.be/0gOfS6K0x0E\" target=\"_blank\" withArrow>\n              <Icons icon=\"video\" /> Watch 5m video\n            </Link>\n            <Divider />\n            <Link\n              href=\"https://storybook.js.org/docs/react/essentials/controls\"\n              target=\"_blank\"\n              withArrow\n            >\n              Read docs\n            </Link>\n          </>\n        )}\n        {!inAddonPanel && (\n          <Link\n            href=\"https://storybook.js.org/docs/react/essentials/controls\"\n            target=\"_blank\"\n            withArrow\n          >\n            Learn how to set that up\n          </Link>\n        )}\n      </Links>\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport pickBy from 'lodash/pickBy.js';\nimport { styled } from '@storybook/theming';\nimport { transparentize } from 'polished';\nimport { includeConditionalArg } from '@storybook/csf';\nimport { once } from '@storybook/client-logger';\nimport { IconButton, Icons, ResetWrapper, Link } from '@storybook/components';\n\nimport { ArgRow } from './ArgRow';\nimport { SectionRow } from './SectionRow';\nimport type { ArgType, ArgTypes, Args, Globals } from './types';\n// eslint-disable-next-line import/no-cycle\nimport { EmptyBlock } from '..';\nimport { Skeleton } from './Skeleton';\nimport { Empty } from './Empty';\n\nexport const TableWrapper = styled.table<{\n  compact?: boolean;\n  inAddonPanel?: boolean;\n  isLoading?: boolean;\n}>(({ theme, compact, inAddonPanel }) => ({\n  '&&': {\n    // Resets for cascading/system styles\n    borderSpacing: 0,\n    color: theme.color.defaultText,\n\n    'td, th': {\n      padding: 0,\n      border: 'none',\n      verticalAlign: 'top',\n      textOverflow: 'ellipsis',\n    },\n    // End Resets\n\n    fontSize: theme.typography.size.s2 - 1,\n    lineHeight: '20px',\n    textAlign: 'left',\n    width: '100%',\n\n    // Margin collapse\n    marginTop: inAddonPanel ? 0 : 25,\n    marginBottom: inAddonPanel ? 0 : 40,\n\n    'thead th:first-of-type, td:first-of-type': {\n      // intentionally specify thead here\n      width: '25%',\n    },\n\n    'th:first-of-type, td:first-of-type': {\n      paddingLeft: 20,\n    },\n\n    'th:nth-of-type(2), td:nth-of-type(2)': {\n      ...(compact\n        ? null\n        : {\n            // Description column\n            width: '35%',\n          }),\n    },\n\n    'td:nth-of-type(3)': {\n      ...(compact\n        ? null\n        : {\n            // Defaults column\n            width: '15%',\n          }),\n    },\n\n    'th:last-of-type, td:last-of-type': {\n      paddingRight: 20,\n      ...(compact\n        ? null\n        : {\n            // Controls column\n            width: '25%',\n          }),\n    },\n\n    th: {\n      color:\n        theme.base === 'light'\n          ? transparentize(0.25, theme.color.defaultText)\n          : transparentize(0.45, theme.color.defaultText),\n      paddingTop: 10,\n      paddingBottom: 10,\n      paddingLeft: 15,\n      paddingRight: 15,\n    },\n\n    td: {\n      paddingTop: '10px',\n      paddingBottom: '10px',\n\n      '&:not(:first-of-type)': {\n        paddingLeft: 15,\n        paddingRight: 15,\n      },\n\n      '&:last-of-type': {\n        paddingRight: 20,\n      },\n    },\n\n    // Makes border alignment consistent w/other DocBlocks\n    marginLeft: inAddonPanel ? 0 : 1,\n    marginRight: inAddonPanel ? 0 : 1,\n\n    tbody: {\n      // Safari doesn't love shadows on tbody so we need to use a shadow filter. In order to do this,\n      // the table cells all need to be solid so they have a background color applied.\n      // I wasn't sure what kinds of content go in these tables so I was extra specific with selectors\n      // to avoid unexpected surprises.\n      ...(inAddonPanel\n        ? null\n        : {\n            filter:\n              theme.base === 'light'\n                ? `drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.10))`\n                : `drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.20))`,\n          }),\n\n      '> tr > *': {\n        // For filter to work properly, the table cells all need to be opaque.\n        background: theme.background.content,\n        borderTop: `1px solid ${theme.appBorderColor}`,\n      },\n\n      ...(inAddonPanel\n        ? null\n        : {\n            // This works and I don't know why. :)\n            '> tr:first-of-type > *': {\n              borderBlockStart: `1px solid ${theme.appBorderColor}`,\n            },\n            '> tr:last-of-type > *': {\n              borderBlockEnd: `1px solid ${theme.appBorderColor}`,\n            },\n            '> tr > *:first-of-type': {\n              borderInlineStart: `1px solid ${theme.appBorderColor}`,\n            },\n            '> tr > *:last-of-type': {\n              borderInlineEnd: `1px solid ${theme.appBorderColor}`,\n            },\n\n            // Thank you, Safari, for making me write code like this.\n            '> tr:first-of-type > td:first-of-type': {\n              borderTopLeftRadius: theme.appBorderRadius,\n            },\n            '> tr:first-of-type > td:last-of-type': {\n              borderTopRightRadius: theme.appBorderRadius,\n            },\n            '> tr:last-of-type > td:first-of-type': {\n              borderBottomLeftRadius: theme.appBorderRadius,\n            },\n            '> tr:last-of-type > td:last-of-type': {\n              borderBottomRightRadius: theme.appBorderRadius,\n            },\n          }),\n    },\n    // End awesome table styling\n  },\n}));\n\nconst StyledIconButton = styled(IconButton as any)(({ theme }) => ({\n  color: theme.barTextColor,\n  margin: '-4px -12px -4px 0',\n}));\n\nconst ControlHeadingWrapper = styled.span({\n  display: 'flex',\n  justifyContent: 'space-between',\n});\n\nexport enum ArgsTableError {\n  NO_COMPONENT = 'No component found.',\n  ARGS_UNSUPPORTED = 'Args unsupported. See Args documentation for your framework.',\n}\n\nexport type SortType = 'alpha' | 'requiredFirst' | 'none';\ntype SortFn = (a: ArgType, b: ArgType) => number;\n\nconst sortFns: Record<SortType, SortFn | null> = {\n  alpha: (a: ArgType, b: ArgType) => a.name.localeCompare(b.name),\n  requiredFirst: (a: ArgType, b: ArgType) =>\n    Number(!!b.type?.required) - Number(!!a.type?.required) || a.name.localeCompare(b.name),\n  none: undefined,\n};\n\nexport interface ArgsTableOptionProps {\n  children?: React.ReactNode;\n  updateArgs?: (args: Args) => void;\n  resetArgs?: (argNames?: string[]) => void;\n  compact?: boolean;\n  inAddonPanel?: boolean;\n  initialExpandedArgs?: boolean;\n  isLoading?: boolean;\n  sort?: SortType;\n}\ninterface ArgsTableDataProps {\n  rows: ArgTypes;\n  args?: Args;\n  globals?: Globals;\n}\n\ninterface ArgsTableErrorProps {\n  error: ArgsTableError;\n}\n\nexport interface ArgsTableLoadingProps {\n  isLoading: boolean;\n}\n\nexport type ArgsTableProps = ArgsTableOptionProps &\n  (ArgsTableDataProps | ArgsTableErrorProps | ArgsTableLoadingProps);\n\ntype Rows = ArgType[];\ntype Subsection = Rows;\ntype Section = {\n  ungrouped: Rows;\n  subsections: Record<string, Subsection>;\n};\ntype Sections = {\n  ungrouped: Rows;\n  ungroupedSubsections: Record<string, Subsection>;\n  sections: Record<string, Section>;\n};\n\nconst groupRows = (rows: ArgType, sort: SortType) => {\n  const sections: Sections = { ungrouped: [], ungroupedSubsections: {}, sections: {} };\n  if (!rows) return sections;\n\n  Object.entries(rows).forEach(([key, row]) => {\n    const { category, subcategory } = row?.table || {};\n    if (category) {\n      const section = sections.sections[category] || { ungrouped: [], subsections: {} };\n      if (!subcategory) {\n        section.ungrouped.push({ key, ...row });\n      } else {\n        const subsection = section.subsections[subcategory] || [];\n        subsection.push({ key, ...row });\n        section.subsections[subcategory] = subsection;\n      }\n      sections.sections[category] = section;\n    } else if (subcategory) {\n      const subsection = sections.ungroupedSubsections[subcategory] || [];\n      subsection.push({ key, ...row });\n      sections.ungroupedSubsections[subcategory] = subsection;\n    } else {\n      sections.ungrouped.push({ key, ...row });\n    }\n  });\n\n  // apply sort\n  const sortFn = sortFns[sort];\n\n  const sortSubsection = (record: Record<string, Subsection>) => {\n    if (!sortFn) return record;\n    return Object.keys(record).reduce<Record<string, Subsection>>(\n      (acc, cur) => ({\n        ...acc,\n        [cur]: record[cur].sort(sortFn),\n      }),\n      {}\n    );\n  };\n\n  const sorted = {\n    ungrouped: sections.ungrouped.sort(sortFn),\n    ungroupedSubsections: sortSubsection(sections.ungroupedSubsections),\n    sections: Object.keys(sections.sections).reduce<Record<string, Section>>(\n      (acc, cur) => ({\n        ...acc,\n        [cur]: {\n          ungrouped: sections.sections[cur].ungrouped.sort(sortFn),\n          subsections: sortSubsection(sections.sections[cur].subsections),\n        },\n      }),\n      {}\n    ),\n  };\n\n  return sorted;\n};\n\n/**\n * Wrap CSF's `includeConditionalArg` in a try catch so that invalid\n * conditionals don't break the entire UI. We can safely swallow the\n * error because `includeConditionalArg` is also called in the preview\n * in `prepareStory`, and that exception will be bubbled up into the\n * UI in a red screen. Nevertheless, we log the error here just in case.\n */\nconst safeIncludeConditionalArg = (row: ArgType, args: Args, globals: Globals) => {\n  try {\n    return includeConditionalArg(row, args, globals);\n  } catch (err) {\n    once.warn(err.message);\n    return false;\n  }\n};\n\n/**\n * Display the props for a component as a props table. Each row is a collection of\n * ArgDefs, usually derived from docgen info for the component.\n */\nexport const ArgsTable: FC<ArgsTableProps> = (props) => {\n  const {\n    updateArgs,\n    resetArgs,\n    compact,\n    inAddonPanel,\n    initialExpandedArgs,\n    sort = 'none',\n    isLoading,\n  } = props;\n\n  if ('error' in props) {\n    const { error } = props;\n    return (\n      <EmptyBlock>\n        {error}&nbsp;\n        <Link href=\"http://storybook.js.org/docs/\" target=\"_blank\" withArrow>\n          Read the docs\n        </Link>\n      </EmptyBlock>\n    );\n  }\n\n  // If the story is loading, show a skeleton\n  // This happen when you load the manager and the story is not yet loaded\n  if (isLoading) return <Skeleton />;\n\n  const { rows, args, globals } = 'rows' in props && props;\n  const groups = groupRows(\n    pickBy(\n      rows,\n      (row) => !row?.table?.disable && safeIncludeConditionalArg(row, args || {}, globals || {})\n    ),\n    sort\n  );\n\n  // If there are no controls, show the empty state\n  const hasNoUngrouped = groups.ungrouped.length === 0;\n  const hasNoSections = Object.entries(groups.sections).length === 0;\n  const hasNoUngroupedSubsections = Object.entries(groups.ungroupedSubsections).length === 0;\n  if (hasNoUngrouped && hasNoSections && hasNoUngroupedSubsections)\n    return <Empty inAddonPanel={inAddonPanel} />;\n\n  let colSpan = 1;\n  if (updateArgs) colSpan += 1;\n  if (!compact) colSpan += 2;\n  const expandable = Object.keys(groups.sections).length > 0;\n\n  const common = { updateArgs, compact, inAddonPanel, initialExpandedArgs };\n\n  return (\n    <ResetWrapper>\n      <TableWrapper {...{ compact, inAddonPanel }} className=\"docblock-argstable sb-unstyled\">\n        <thead className=\"docblock-argstable-head\">\n          <tr>\n            <th>\n              <span>Name</span>\n            </th>\n            {compact ? null : (\n              <th>\n                <span>Description</span>\n              </th>\n            )}\n            {compact ? null : (\n              <th>\n                <span>Default</span>\n              </th>\n            )}\n            {updateArgs ? (\n              <th>\n                <ControlHeadingWrapper>\n                  Control{' '}\n                  {!isLoading && resetArgs && (\n                    <StyledIconButton onClick={() => resetArgs()} title=\"Reset controls\">\n                      <Icons icon=\"undo\" aria-hidden />\n                    </StyledIconButton>\n                  )}\n                </ControlHeadingWrapper>\n              </th>\n            ) : null}\n          </tr>\n        </thead>\n        <tbody className=\"docblock-argstable-body\">\n          {groups.ungrouped.map((row) => (\n            <ArgRow key={row.key} row={row} arg={args && args[row.key]} {...common} />\n          ))}\n\n          {Object.entries(groups.ungroupedSubsections).map(([subcategory, subsection]) => (\n            <SectionRow key={subcategory} label={subcategory} level=\"subsection\" colSpan={colSpan}>\n              {subsection.map((row) => (\n                <ArgRow\n                  key={row.key}\n                  row={row}\n                  arg={args && args[row.key]}\n                  expandable={expandable}\n                  {...common}\n                />\n              ))}\n            </SectionRow>\n          ))}\n\n          {Object.entries(groups.sections).map(([category, section]) => (\n            <SectionRow key={category} label={category} level=\"section\" colSpan={colSpan}>\n              {section.ungrouped.map((row) => (\n                <ArgRow key={row.key} row={row} arg={args && args[row.key]} {...common} />\n              ))}\n              {Object.entries(section.subsections).map(([subcategory, subsection]) => (\n                <SectionRow\n                  key={subcategory}\n                  label={subcategory}\n                  level=\"subsection\"\n                  colSpan={colSpan}\n                >\n                  {subsection.map((row) => (\n                    <ArgRow\n                      key={row.key}\n                      row={row}\n                      arg={args && args[row.key]}\n                      expandable={expandable}\n                      {...common}\n                    />\n                  ))}\n                </SectionRow>\n              ))}\n            </SectionRow>\n          ))}\n        </tbody>\n      </TableWrapper>\n    </ResetWrapper>\n  );\n};\n"],"file":"assets/ArgsTable-15838607.js"}