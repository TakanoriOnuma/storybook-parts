{"version":3,"file":"Text-92f16433.js","sources":["../../ui/blocks/src/controls/Text.tsx"],"sourcesContent":["import type { FC, ChangeEvent } from 'react';\nimport React, { useCallback, useState } from 'react';\nimport { styled } from '@storybook/theming';\nimport { Button, Form } from '@storybook/components';\nimport { getControlId, getControlSetterButtonId } from './helpers';\n\nimport type { ControlProps, TextValue, TextConfig } from './types';\n\nexport type TextProps = ControlProps<TextValue | undefined> & TextConfig;\n\nconst Wrapper = styled.label({\n  display: 'flex',\n});\n\nconst MaxLength = styled.div<{ isMaxed: boolean }>(({ isMaxed }) => ({\n  marginLeft: '0.75rem',\n  paddingTop: '0.35rem',\n  color: isMaxed ? 'red' : undefined,\n}));\n\nexport const TextControl: FC<TextProps> = ({\n  name,\n  value,\n  onChange,\n  onFocus,\n  onBlur,\n  maxLength,\n}) => {\n  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    onChange(event.target.value);\n  };\n\n  const [forceVisible, setForceVisible] = useState(false);\n  const onForceVisible = useCallback(() => {\n    onChange('');\n    setForceVisible(true);\n  }, [setForceVisible]);\n  if (value === undefined) {\n    return (\n      <Button\n        variant=\"outline\"\n        size=\"medium\"\n        id={getControlSetterButtonId(name)}\n        onClick={onForceVisible}\n      >\n        Set string\n      </Button>\n    );\n  }\n\n  const isValid = typeof value === 'string';\n  return (\n    <Wrapper>\n      <Form.Textarea\n        id={getControlId(name)}\n        maxLength={maxLength}\n        onChange={handleChange}\n        size=\"flex\"\n        placeholder=\"Edit string...\"\n        autoFocus={forceVisible}\n        valid={isValid ? null : 'error'}\n        {...{ name, value: isValid ? value : '', onFocus, onBlur }}\n      />\n      {maxLength && (\n        <MaxLength isMaxed={value?.length === maxLength}>\n          {value?.length ?? 0} / {maxLength}\n        </MaxLength>\n      )}\n    </Wrapper>\n  );\n};\n"],"names":["Wrapper","styled","MaxLength","isMaxed","TextControl","name","value","onChange","onFocus","onBlur","maxLength","handleChange","event","forceVisible","setForceVisible","useState","onForceVisible","useCallback","React","Button","getControlSetterButtonId","isValid","Form","getControlId"],"mappings":"uLAUA,MAAAA,EAAAC,EAAA,MAAA,CACA,QAAA,MACA,CAAA,EAEAC,EAAAD,EAAA,IAAA,CAAA,CAAA,QAAAE,MAAA,CACA,WAAA,UACA,WAAA,UACA,MAAAA,EAAA,MAAA,MACA,EAAA,EAEAC,EAAA,CAAA,CACA,KAAAC,EACA,MAAAC,EACA,SAAAC,EACA,QAAAC,EACA,OAAAC,EACA,UAAAC,CACA,IAAA,CACA,MAAAC,EAAAC,GAAA,CACAL,EAAAK,EAAA,OAAA,KAAA,CAAA,EAGA,CAAAC,EAAAC,CAAA,EAAAC,WAAA,EAAA,EACAC,EAAAC,EAAAA,YAAA,IAAA,CACAV,EAAA,EAAA,EACAO,EAAA,EAAA,CAAA,EACA,CAAAA,CAAA,CAAA,EACA,GAAAR,IAAA,OAEA,OAAAY,EAAA,cAAAC,EAAA,CACA,QAAA,UACA,KAAA,SACA,GAAAC,EAAAf,CAAA,EACA,QAAAW,CAAA,EACA,YAAA,EAMA,MAAAK,EAAA,OAAAf,GAAA,SACA,uBACAN,EACA,KAAAkB,EAAA,cAAAI,EAAA,SAAA,CACA,GAAAC,EAAAlB,CAAA,EACA,UAAAK,EACA,SAAAC,EACA,KAAA,OACA,YAAA,iBACA,UAAAE,EACA,MAAAQ,EAAA,KAAA,QACA,KAAAhB,EAAA,MAAAgB,EAAAf,EAAA,GAAA,QAAAE,EAAA,OAAAC,CAAA,CAAA,EAEAC,GACAQ,EAAA,cAAAhB,EAAA,CAAA,SAAAI,GAAA,YAAAA,EAAA,UAAAI,CAAA,GACAJ,GAAA,YAAAA,EAAA,SAAA,EAAA,MAAAI,CACA,CAEA,CAEA"}