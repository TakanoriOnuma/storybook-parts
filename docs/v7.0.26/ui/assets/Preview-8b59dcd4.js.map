{"version":3,"file":"Preview-8b59dcd4.js","sources":["../../ui/blocks/src/components/Toolbar.tsx","../../ui/blocks/src/components/Preview.tsx"],"sourcesContent":["import type { FC, MouseEvent } from 'react';\nimport React, { Fragment } from 'react';\nimport { styled } from '@storybook/theming';\nimport { FlexBar, Icons, IconButton, IconButtonSkeleton } from '@storybook/components';\n\ninterface ZoomProps {\n  zoom: (val: number) => void;\n  resetZoom: () => void;\n}\n\ninterface EjectProps {\n  storyId?: string;\n  baseUrl?: string;\n}\n\ninterface BarProps {\n  border?: boolean;\n}\n\ninterface LoadingProps {\n  isLoading?: boolean;\n}\n\nexport type ToolbarProps = BarProps & ZoomProps & EjectProps & LoadingProps;\n\nconst Zoom: FC<ZoomProps> = ({ zoom, resetZoom }) => (\n  <>\n    <IconButton\n      key=\"zoomin\"\n      onClick={(e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        zoom(0.8);\n      }}\n      title=\"Zoom in\"\n    >\n      <Icons icon=\"zoom\" />\n    </IconButton>\n    <IconButton\n      key=\"zoomout\"\n      onClick={(e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        zoom(1.25);\n      }}\n      title=\"Zoom out\"\n    >\n      <Icons icon=\"zoomout\" />\n    </IconButton>\n    <IconButton\n      key=\"zoomreset\"\n      onClick={(e: MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n        resetZoom();\n      }}\n      title=\"Reset zoom\"\n    >\n      <Icons icon=\"zoomreset\" />\n    </IconButton>\n  </>\n);\n\nconst Bar = styled(FlexBar)({\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  transition: 'transform .2s linear',\n});\n\nexport const Toolbar: FC<ToolbarProps> = ({\n  isLoading,\n  storyId,\n  baseUrl,\n  zoom,\n  resetZoom,\n  ...rest\n}) => (\n  <Bar {...rest}>\n    <Fragment key=\"left\">\n      {isLoading ? (\n        [1, 2, 3].map((key) => <IconButtonSkeleton key={key} />)\n      ) : (\n        <Zoom {...{ zoom, resetZoom }} />\n      )}\n    </Fragment>\n  </Bar>\n);\n","import type { ClipboardEvent, FC, ReactElement, ReactNode } from 'react';\nimport React, { Children, useCallback, useState } from 'react';\nimport { darken } from 'polished';\nimport { styled } from '@storybook/theming';\n\nimport { global } from '@storybook/global';\nimport { ActionBar, Zoom } from '@storybook/components';\nimport type { ActionItem } from '@storybook/components';\n\nimport type { SourceProps } from '.';\n// eslint-disable-next-line import/no-cycle\nimport { Source } from '.';\nimport { getBlockBackgroundStyle } from './BlockBackgroundStyles';\nimport { Toolbar } from './Toolbar';\nimport { ZoomContext } from './ZoomContext';\nimport { StorySkeleton } from './Story';\n\nexport interface PreviewProps {\n  isLoading?: true;\n  layout?: Layout;\n  isColumn?: boolean;\n  columns?: number;\n  withSource?: SourceProps;\n  isExpanded?: boolean;\n  withToolbar?: boolean;\n  className?: string;\n  additionalActions?: ActionItem[];\n  children?: ReactNode;\n}\n\nexport type Layout = 'padded' | 'fullscreen' | 'centered';\n\nconst ChildrenContainer = styled.div<PreviewProps & { layout: Layout }>(\n  ({ isColumn, columns, layout }) => ({\n    display: isColumn || !columns ? 'block' : 'flex',\n    position: 'relative',\n    flexWrap: 'wrap',\n    overflow: 'auto',\n    flexDirection: isColumn ? 'column' : 'row',\n\n    '& .innerZoomElementWrapper > *': isColumn\n      ? {\n          width: layout !== 'fullscreen' ? 'calc(100% - 20px)' : '100%',\n          display: 'block',\n        }\n      : {\n          maxWidth: layout !== 'fullscreen' ? 'calc(100% - 20px)' : '100%',\n          display: 'inline-block',\n        },\n  }),\n  ({ layout = 'padded' }) =>\n    layout === 'centered' || layout === 'padded'\n      ? {\n          padding: '30px 20px',\n          margin: -10,\n          '& .innerZoomElementWrapper > *': {\n            width: 'auto',\n            border: '10px solid transparent!important',\n          },\n        }\n      : {},\n  ({ layout = 'padded' }) =>\n    layout === 'centered'\n      ? {\n          display: 'flex',\n          justifyContent: 'center',\n          justifyItems: 'center',\n          alignContent: 'center',\n          alignItems: 'center',\n        }\n      : {},\n  ({ columns }) =>\n    columns && columns > 1\n      ? { '.innerZoomElementWrapper > *': { minWidth: `calc(100% / ${columns} - 20px)` } }\n      : {}\n);\n\nconst StyledSource = styled(Source)(({ theme }) => ({\n  margin: 0,\n  borderTopLeftRadius: 0,\n  borderTopRightRadius: 0,\n  borderBottomLeftRadius: theme.appBorderRadius,\n  borderBottomRightRadius: theme.appBorderRadius,\n  border: 'none',\n\n  background:\n    theme.base === 'light' ? 'rgba(0, 0, 0, 0.85)' : darken(0.05, theme.background.content),\n  color: theme.color.lightest,\n  button: {\n    background:\n      theme.base === 'light' ? 'rgba(0, 0, 0, 0.85)' : darken(0.05, theme.background.content),\n  },\n}));\n\nconst PreviewContainer = styled.div<PreviewProps>(\n  ({ theme, withSource, isExpanded }) => ({\n    position: 'relative',\n    overflow: 'hidden',\n    margin: '25px 0 40px',\n    ...getBlockBackgroundStyle(theme),\n    borderBottomLeftRadius: withSource && isExpanded && 0,\n    borderBottomRightRadius: withSource && isExpanded && 0,\n    borderBottomWidth: isExpanded && 0,\n\n    'h3 + &': {\n      marginTop: '16px',\n    },\n  }),\n  ({ withToolbar }) => withToolbar && { paddingTop: 40 }\n);\n\ninterface SourceItem {\n  source?: ReactElement;\n  actionItem: ActionItem;\n}\n\nconst getSource = (\n  withSource: SourceProps,\n  expanded: boolean,\n  setExpanded: Function\n): SourceItem => {\n  switch (true) {\n    case !!(withSource && withSource.error): {\n      return {\n        source: null,\n        actionItem: {\n          title: 'No code available',\n          className: 'docblock-code-toggle docblock-code-toggle--disabled',\n          disabled: true,\n          onClick: () => setExpanded(false),\n        },\n      };\n    }\n    case expanded: {\n      return {\n        source: <StyledSource {...withSource} dark />,\n        actionItem: {\n          title: 'Hide code',\n          className: 'docblock-code-toggle docblock-code-toggle--expanded',\n          onClick: () => setExpanded(false),\n        },\n      };\n    }\n    default: {\n      return {\n        source: <StyledSource {...withSource} dark />,\n        actionItem: {\n          title: 'Show code',\n          className: 'docblock-code-toggle',\n          onClick: () => setExpanded(true),\n        },\n      };\n    }\n  }\n};\nfunction getStoryId(children: ReactNode) {\n  if (Children.count(children) === 1) {\n    const elt = children as ReactElement;\n    if (elt.props) {\n      return elt.props.id;\n    }\n  }\n  return null;\n}\n\nconst PositionedToolbar = styled(Toolbar)({\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  right: 0,\n  height: 40,\n});\n\nconst Relative = styled.div({\n  overflow: 'hidden',\n  position: 'relative',\n});\n\n/**\n * A preview component for showing one or more component `Story`\n * items. The preview also shows the source for the component\n * as a drop-down.\n */\nexport const Preview: FC<PreviewProps> = ({\n  isLoading,\n  isColumn,\n  columns,\n  children,\n  withSource,\n  withToolbar = false,\n  isExpanded = false,\n  additionalActions,\n  className,\n  layout = 'padded',\n  ...props\n}) => {\n  const [expanded, setExpanded] = useState(isExpanded);\n  const { source, actionItem } = getSource(withSource, expanded, setExpanded);\n  const [scale, setScale] = useState(1);\n  const previewClasses = [className].concat(['sbdocs', 'sbdocs-preview', 'sb-unstyled']);\n\n  const defaultActionItems = withSource ? [actionItem] : [];\n  const [additionalActionItems, setAdditionalActionItems] = useState(\n    additionalActions ? [...additionalActions] : []\n  );\n  const actionItems = [...defaultActionItems, ...additionalActionItems];\n\n  const { window: globalWindow } = global;\n\n  const copyToClipboard = useCallback(async (text: string) => {\n    const { createCopyToClipboardFunction } = await import('@storybook/components');\n    createCopyToClipboardFunction();\n  }, []);\n\n  const onCopyCapture = (e: ClipboardEvent<HTMLInputElement>) => {\n    // When the selection range is neither empty nor collapsed, we can assume\n    // user's intention is to copy the selected text, instead of the story's\n    // code snippet.\n    const selection: Selection | null = globalWindow.getSelection();\n    if (selection && selection.type === 'Range') {\n      return;\n    }\n\n    e.preventDefault();\n    if (additionalActionItems.filter((item) => item.title === 'Copied').length === 0) {\n      copyToClipboard(source.props.code).then(() => {\n        setAdditionalActionItems([\n          ...additionalActionItems,\n          {\n            title: 'Copied',\n            onClick: () => {},\n          },\n        ]);\n        globalWindow.setTimeout(\n          () =>\n            setAdditionalActionItems(\n              additionalActionItems.filter((item) => item.title !== 'Copied')\n            ),\n          1500\n        );\n      });\n    }\n  };\n\n  return (\n    <PreviewContainer\n      {...{ withSource, withToolbar }}\n      {...props}\n      className={previewClasses.join(' ')}\n    >\n      {withToolbar && (\n        <PositionedToolbar\n          isLoading={isLoading}\n          border\n          zoom={(z: number) => setScale(scale * z)}\n          resetZoom={() => setScale(1)}\n          storyId={getStoryId(children)}\n          baseUrl=\"./iframe.html\"\n        />\n      )}\n      <ZoomContext.Provider value={{ scale }}>\n        <Relative className=\"docs-story\" onCopyCapture={withSource && onCopyCapture}>\n          <ChildrenContainer\n            isColumn={isColumn || !Array.isArray(children)}\n            columns={columns}\n            layout={layout}\n          >\n            <Zoom.Element scale={scale}>\n              {Array.isArray(children) ? (\n                // eslint-disable-next-line react/no-array-index-key\n                children.map((child, i) => <div key={i}>{child}</div>)\n              ) : (\n                <div>{children}</div>\n              )}\n            </Zoom.Element>\n          </ChildrenContainer>\n          <ActionBar actionItems={actionItems} />\n        </Relative>\n      </ZoomContext.Provider>\n      {withSource && expanded && source}\n    </PreviewContainer>\n  );\n};\n\nconst StyledPreview = styled(Preview)(() => ({\n  '.docs-story': {\n    paddingTop: 32,\n    paddingBottom: 40,\n  },\n}));\n\nexport const PreviewSkeleton = () => (\n  <StyledPreview isLoading withToolbar>\n    <StorySkeleton />\n  </StyledPreview>\n);\n"],"names":["Zoom","zoom","resetZoom","jsxs","Fragment","jsx","IconButton","e","Icons","Bar","styled","FlexBar","Toolbar","isLoading","storyId","baseUrl","rest","Fragment2","key","IconButtonSkeleton","ChildrenContainer","isColumn","columns","layout","StyledSource","Source","theme","darken","PreviewContainer","withSource","isExpanded","getBlockBackgroundStyle","withToolbar","getSource","expanded","setExpanded","getStoryId","children","Children","elt","PositionedToolbar","Relative","Preview","additionalActions","className","props","useState","source","actionItem","scale","setScale","previewClasses","defaultActionItems","additionalActionItems","setAdditionalActionItems","actionItems","globalWindow","global","copyToClipboard","useCallback","text","createCopyToClipboardFunction","__vitePreload","onCopyCapture","selection","item","z","ZoomContext","child","i","ActionBar","StyledPreview","PreviewSkeleton","StorySkeleton"],"mappings":"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"}