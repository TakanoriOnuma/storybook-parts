{"version":3,"file":"useStory-cba48327.js","sources":["../../ui/blocks/src/blocks/useStory.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport type { StoryId, Renderer, PreparedStory } from '@storybook/types';\n\nimport type { DocsContextProps } from './DocsContext';\n\nexport function useStory<TRenderer extends Renderer = Renderer>(\n  storyId: StoryId,\n  context: DocsContextProps<TRenderer>\n): PreparedStory<TRenderer> | void {\n  const stories = useStories([storyId], context);\n  return stories && stories[0];\n}\n\nexport function useStories<TRenderer extends Renderer = Renderer>(\n  storyIds: StoryId[],\n  context: DocsContextProps<TRenderer>\n): (PreparedStory<TRenderer> | void)[] {\n  // Legacy docs pages can reference any story by id. Those stories will need to be\n  // asyncronously loaded; we use the state for this\n  const [storiesById, setStories] = useState<Record<StoryId, PreparedStory<TRenderer>>>({});\n\n  useEffect(() => {\n    // deepscan-disable-next-line NO_EFFECT_CALL\n    Promise.all(\n      storyIds.map(async (storyId) => {\n        // loadStory will be called every single time useStory is called\n        // because useEffect does not use storyIds as an input. This is because\n        // HMR can change the story even when the storyId hasn't changed. However, it\n        // will be a no-op once the story has loaded. Furthermore, the `story` will\n        // have an exact equality when the story hasn't changed, so it won't trigger\n        // any unnecessary re-renders\n        const story = await context.loadStory(storyId);\n        setStories((current) =>\n          current[storyId] === story ? current : { ...current, [storyId]: story }\n        );\n      })\n    );\n  });\n\n  return storyIds.map((storyId) => {\n    if (storiesById[storyId]) return storiesById[storyId];\n\n    try {\n      // If we are allowed to load this story id synchonously, this will work\n      return context.storyById(storyId);\n    } catch (err) {\n      return null;\n    }\n  });\n}\n"],"names":["useStory","storyId","context","stories","useStories","storyIds","storiesById","setStories","useState","useEffect","story","current"],"mappings":"wCAKgB,SAAAA,EACdC,EACAC,EACiC,CACjC,MAAMC,EAAUC,EAAW,CAACH,CAAO,EAAGC,CAAO,EACtC,OAAAC,GAAWA,EAAQ,CAAC,CAC7B,CAEgB,SAAAC,EACdC,EACAH,EACqC,CAGrC,KAAM,CAACI,EAAaC,CAAU,EAAIC,EAAA,SAAoD,CAAE,CAAA,EAExFC,OAAAA,EAAAA,UAAU,IAAM,CAEN,QAAA,IACNJ,EAAS,IAAI,MAAOJ,GAAY,CAO9B,MAAMS,EAAQ,MAAMR,EAAQ,UAAUD,CAAO,EAC7CM,EAAYI,GACVA,EAAQV,CAAO,IAAMS,EAAQC,EAAU,CAAE,GAAGA,EAAS,CAACV,CAAO,EAAGS,CAAM,CAAA,CACxE,CACD,CAAA,CACH,CACD,EAEML,EAAS,IAAKJ,GAAY,CAC/B,GAAIK,EAAYL,CAAO,EAAG,OAAOK,EAAYL,CAAO,EAEhD,GAAA,CAEK,OAAAC,EAAQ,UAAUD,CAAO,QAEzB,OAAA,IACT,CAAA,CACD,CACH"}