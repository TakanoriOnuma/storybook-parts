{"version":3,"mappings":"gQAKA,IAAAA,EAAA,GACAC,EAAA,KAEA,MAAAC,GAAAC,EAAA,eACE,wBAAAC,CAAA,QAAAC,EAAA,uRAEA,OAAAL,EAAA,WACEA,EAAA,QAAAM,GAAA,CACEF,EAAA,oBAAAE,CAAA,CAA0C,GAE5CN,EAAA,IAGFC,IAAA,OAAmBA,EAAAG,GAEnB,CAAO,QAAAG,GAAAC,EAAAJ,EAAA,IAAAG,EAAA,CACuF,CAEhG,GAEAE,GAAAN,EAAA,eACE,yBAAAC,CAAA,aAAAM,EAAA,qBAAiEL,EAAA,uRACnCA,EAAA,qLACR,GAGtB,OAAAL,EAAA,WACEA,EAAA,QAAAM,GAAA,CACEF,EAAA,oBAAAE,CAAA,CAA0C,GAE5CN,EAAA,IAGFC,IAAA,OACEA,EAAAG,GAGF,CAAO,QAAAG,GAAAC,EAAAJ,EAAA,IAAAG,EAAA,UAAAG,EAAA,CAEiD,CAG1D,GAEOC,EAAAJ,GAAAC,EAAAI,EAAA,mBAAAJ,EAAA,mBAAAD,EAAA,YAAAC,EAAAC,GAAA,IAAAF,CAAA,GAAAC,EAAAN,GAAA,IAAAK,CAAA,KAcPI,EAAA,qBAAAL,IAAA,CAGE,GAAAL,IAAA,MACEA,EAAA,oBAAAK,CAAA,EACA,OAEFN,EAAA,KAAAM,CAAA,CACF","names":["languages","Comp","LazySyntaxHighlighter","lazy","SyntaxHighlighter2","__vitePreload","args","props","jsx","LazySyntaxHighlighterWithFormatter","formatter","SyntaxHighlighter","Suspense"],"sources":["../../ui/components/src/components/syntaxhighlighter/lazy-syntaxhighlighter.tsx"],"sourcesContent":["import React, { Suspense, lazy } from 'react';\n\nimport type { ComponentProps } from 'react';\nimport type ReactSyntaxHighlighter from './syntaxhighlighter';\n\nlet languages: Parameters<typeof ReactSyntaxHighlighter.registerLanguage>[] = [];\nlet Comp: typeof ReactSyntaxHighlighter | null = null;\n\nconst LazySyntaxHighlighter = lazy(async () => {\n  const { SyntaxHighlighter } = await import('./syntaxhighlighter');\n\n  if (languages.length > 0) {\n    languages.forEach((args) => {\n      SyntaxHighlighter.registerLanguage(...args);\n    });\n    languages = [];\n  }\n\n  if (Comp === null) Comp = SyntaxHighlighter;\n\n  return {\n    default: (props: ComponentProps<typeof SyntaxHighlighter>) => <SyntaxHighlighter {...props} />,\n  };\n});\n\nconst LazySyntaxHighlighterWithFormatter = lazy(async () => {\n  const [{ SyntaxHighlighter }, { formatter }] = await Promise.all([\n    import('./syntaxhighlighter'),\n    import('./formatter'),\n  ]);\n\n  if (languages.length > 0) {\n    languages.forEach((args) => {\n      SyntaxHighlighter.registerLanguage(...args);\n    });\n    languages = [];\n  }\n\n  if (Comp === null) {\n    Comp = SyntaxHighlighter;\n  }\n\n  return {\n    default: (props: ComponentProps<typeof SyntaxHighlighter>) => (\n      <SyntaxHighlighter {...props} formatter={formatter} />\n    ),\n  };\n});\n\nexport const SyntaxHighlighter = (\n  props:\n    | ComponentProps<typeof LazySyntaxHighlighter>\n    | ComponentProps<typeof LazySyntaxHighlighterWithFormatter>\n) => (\n  <Suspense fallback={<div />}>\n    {props.format !== false ? (\n      <LazySyntaxHighlighterWithFormatter {...props} />\n    ) : (\n      <LazySyntaxHighlighter {...props} />\n    )}\n  </Suspense>\n);\n\nSyntaxHighlighter.registerLanguage = (\n  ...args: Parameters<typeof ReactSyntaxHighlighter.registerLanguage>\n) => {\n  if (Comp !== null) {\n    Comp.registerLanguage(...args);\n    return;\n  }\n  languages.push(args);\n};\n"],"file":"assets/syntaxhighlighter.stories-ec71fba6.js"}