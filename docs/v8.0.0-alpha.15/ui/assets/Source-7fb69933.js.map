{"version":3,"file":"Source-7fb69933.js","sources":["../../ui/blocks/src/components/Source.tsx"],"sourcesContent":["import type { ComponentProps, FunctionComponent } from 'react';\nimport React from 'react';\nimport {\n  styled,\n  ThemeProvider,\n  convert,\n  themes,\n  ignoreSsrWarning,\n  useTheme,\n} from '@storybook/theming';\n\nimport type { SupportedLanguage, SyntaxHighlighterProps } from '@storybook/components';\nimport { SyntaxHighlighter } from '@storybook/components';\nimport { EmptyBlock } from './EmptyBlock';\n\nconst StyledSyntaxHighlighter: React.FunctionComponent<SyntaxHighlighterProps> = styled(\n  SyntaxHighlighter\n)(({ theme }) => ({\n  // DocBlocks-specific styling and overrides\n  fontSize: `${theme.typography.size.s2 - 1}px`,\n  lineHeight: '19px',\n  margin: '25px 0 40px',\n  borderRadius: theme.appBorderRadius,\n  boxShadow:\n    theme.base === 'light' ? 'rgba(0, 0, 0, 0.10) 0 1px 3px 0' : 'rgba(0, 0, 0, 0.20) 0 2px 5px 0',\n  'pre.prismjs': {\n    padding: 20,\n    background: 'inherit',\n  },\n}));\n\nexport enum SourceError {\n  NO_STORY = 'There\\u2019s no story here.',\n  SOURCE_UNAVAILABLE = 'Oh no! The source is not available.',\n}\n\nexport interface SourceCodeProps {\n  /**\n   * The language the syntax highlighter uses for your story’s code\n   */\n  language?: SupportedLanguage;\n  /**\n   * Use this to override the content of the source block.\n   */\n  code?: string;\n  /**\n   * The (prettier) formatter the syntax highlighter uses for your story’s code.\n   */\n  format?: ComponentProps<typeof SyntaxHighlighter>['format'];\n  /**\n   * Display the source snippet in a dark mode.\n   */\n  dark?: boolean;\n}\n\nexport interface SourceProps extends SourceCodeProps {\n  isLoading?: boolean;\n  error?: SourceError;\n}\n\nconst SourceSkeletonWrapper = styled.div(({ theme }) => ({\n  background: theme.background.content,\n  borderRadius: theme.appBorderRadius,\n  border: `1px solid ${theme.appBorderColor}`,\n  boxShadow:\n    theme.base === 'light' ? 'rgba(0, 0, 0, 0.10) 0 1px 3px 0' : 'rgba(0, 0, 0, 0.20) 0 2px 5px 0',\n  margin: '25px 0 40px',\n  padding: '20px 20px 20px 22px',\n}));\n\nconst SourceSkeletonPlaceholder = styled.div(({ theme }) => ({\n  animation: `${theme.animation.glow} 1.5s ease-in-out infinite`,\n  background: theme.appBorderColor,\n  height: 17,\n  marginTop: 1,\n  width: '60%',\n\n  [`&:first-child${ignoreSsrWarning}`]: {\n    margin: 0,\n  },\n}));\n\nconst SourceSkeleton = () => (\n  <SourceSkeletonWrapper>\n    <SourceSkeletonPlaceholder />\n    <SourceSkeletonPlaceholder style={{ width: '80%' }} />\n    <SourceSkeletonPlaceholder style={{ width: '30%' }} />\n    <SourceSkeletonPlaceholder style={{ width: '80%' }} />\n  </SourceSkeletonWrapper>\n);\n\n/**\n * Syntax-highlighted source code for a component (or anything!)\n */\nconst Source: FunctionComponent<SourceProps> = ({\n  isLoading,\n  error,\n  language,\n  code,\n  dark,\n  format,\n  ...rest\n}) => {\n  const { typography } = useTheme();\n  if (isLoading) {\n    return <SourceSkeleton />;\n  }\n  if (error) {\n    return <EmptyBlock>{error}</EmptyBlock>;\n  }\n\n  const syntaxHighlighter = (\n    <StyledSyntaxHighlighter\n      bordered\n      copyable\n      format={format}\n      language={language}\n      className=\"docblock-source sb-unstyled\"\n      {...rest}\n    >\n      {code}\n    </StyledSyntaxHighlighter>\n  );\n  if (typeof dark === 'undefined') {\n    return syntaxHighlighter;\n  }\n  const overrideTheme = dark ? themes.dark : themes.light;\n  return (\n    <ThemeProvider\n      theme={convert({\n        ...overrideTheme,\n        fontCode: typography.fonts.mono,\n        fontBase: typography.fonts.base,\n      })}\n    >\n      {syntaxHighlighter}\n    </ThemeProvider>\n  );\n};\n\nSource.defaultProps = {\n  format: false,\n};\nexport { Source, StyledSyntaxHighlighter };\n"],"names":["StyledSyntaxHighlighter","styled","SyntaxHighlighter","theme","SourceError","SourceSkeletonWrapper","SourceSkeletonPlaceholder","ignoreSsrWarning","SourceSkeleton","React","Source","isLoading","error","language","code","dark","format","rest","typography","useTheme","EmptyBlock","syntaxHighlighter","overrideTheme","themes","ThemeProvider","convert"],"mappings":"wMAeA,MAAAA,EAAAC,EACAC,CACA,EAAA,CAAA,CAAA,MAAAC,MAAA,CAEA,SAAA,GAAAA,EAAA,WAAA,KAAA,GAAA,CAAA,KACA,WAAA,OACA,OAAA,cACA,aAAAA,EAAA,gBACA,UACAA,EAAA,OAAA,QAAA,kCAAA,kCACA,cAAA,CACA,QAAA,GACA,WAAA,SACA,CACA,EAAA,EAEA,IAAAC,GAAAA,IACAA,EAAA,SAAA,yBACAA,EAAA,mBAAA,sCAFAA,IAAAA,GAAA,CAAA,CAAA,EA6BA,MAAAC,EAAAJ,EAAA,IAAA,CAAA,CAAA,MAAAE,MAAA,CACA,WAAAA,EAAA,WAAA,QACA,aAAAA,EAAA,gBACA,OAAA,aAAAA,EAAA,cAAA,GACA,UACAA,EAAA,OAAA,QAAA,kCAAA,kCACA,OAAA,cACA,QAAA,qBACA,EAAA,EAEAG,EAAAL,EAAA,IAAA,CAAA,CAAA,MAAAE,MAAA,CACA,UAAA,GAAAA,EAAA,UAAA,IAAA,6BACA,WAAAA,EAAA,eACA,OAAA,GACA,UAAA,EACA,MAAA,MAEA,CAAA,gBAAAI,CAAA,EAAA,EAAA,CACA,OAAA,CACA,CACA,EAAA,EAEAC,EAAA,IACAC,EAAA,cAAAJ,EAAA,KACAI,EAAA,cAAAH,EAAA,IAAA,EACAG,EAAA,cAAAH,EAAA,CAAA,MAAA,CAAA,MAAA,KAAA,CAAA,CAAA,EACAG,EAAA,cAAAH,EAAA,CAAA,MAAA,CAAA,MAAA,KAAA,EAAA,EACAG,EAAA,cAAAH,EAAA,CAAA,MAAA,CAAA,MAAA,KAAA,CAAA,CAAA,CACA,EAMAI,EAAA,CAAA,CACA,UAAAC,EACA,MAAAC,EACA,SAAAC,EACA,KAAAC,EACA,KAAAC,EACA,OAAAC,EACA,GAAAC,CACA,IAAA,CACA,KAAA,CAAA,WAAAC,GAAAC,IACA,GAAAR,EACA,uBAAAH,EAAA,IAAA,EAEA,GAAAI,EACA,OAAAH,EAAA,cAAAW,OAAAR,CAAA,EAGA,MAAAS,EACAZ,EAAA,cAAAT,EAAA,CACA,SAAA,GACA,SAAA,GACA,OAAAgB,EACA,SAAAH,EACA,UAAA,8BACA,GAAAI,CAAA,EAEAH,CAAA,EAGA,GAAA,OAAAC,EAAA,IACA,OAAAM,EAEA,MAAAC,EAAAP,EAAAQ,EAAA,KAAAA,EAAA,MAEA,OAAAd,EAAA,cAAAe,EAAA,CACA,MAAAC,EAAA,CACA,GAAAH,EACA,SAAAJ,EAAA,MAAA,KACA,SAAAA,EAAA,MAAA,IAAA,CACA,CAAA,EAEAG,CAAA,CAGA,EAEAX,EAAA,aAAA,CACA,OAAA,EACA"}