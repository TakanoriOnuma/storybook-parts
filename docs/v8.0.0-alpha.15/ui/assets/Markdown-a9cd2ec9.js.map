{"version":3,"file":"Markdown-a9cd2ec9.js","sources":["../../ui/blocks/src/blocks/mdx.tsx","../../ui/blocks/src/blocks/Markdown.tsx"],"sourcesContent":["import type { FC, MouseEvent, PropsWithChildren, SyntheticEvent } from 'react';\nimport React, { useContext } from 'react';\nimport { NAVIGATE_URL } from '@storybook/core-events';\nimport type { SupportedLanguage } from '@storybook/components';\nimport { Code, components, nameSpaceClassNames } from '@storybook/components';\nimport { global } from '@storybook/global';\nimport { styled } from '@storybook/theming';\nimport { LinkIcon } from '@storybook/icons';\nimport { Source } from '../components';\nimport type { DocsContextProps } from './DocsContext';\nimport { DocsContext } from './DocsContext';\n\nconst { document } = global;\n\n// Hacky utility for asserting identifiers in MDX Story elements\nexport const assertIsFn = (val: any) => {\n  if (typeof val !== 'function') {\n    throw new Error(`Expected story function, got: ${val}`);\n  }\n  return val;\n};\n\n// Hacky utility for adding mdxStoryToId to the default context\nexport const AddContext: FC<PropsWithChildren<DocsContextProps>> = (props) => {\n  const { children, ...rest } = props;\n  const parentContext = React.useContext(DocsContext);\n  return (\n    <DocsContext.Provider value={{ ...parentContext, ...rest }}>{children}</DocsContext.Provider>\n  );\n};\n\ninterface CodeOrSourceMdxProps {\n  className?: string;\n}\n\nexport const CodeOrSourceMdx: FC<PropsWithChildren<CodeOrSourceMdxProps>> = ({\n  className,\n  children,\n  ...rest\n}) => {\n  // markdown-to-jsx does not add className to inline code\n  if (\n    typeof className !== 'string' &&\n    (typeof children !== 'string' || !(children as string).match(/[\\n\\r]/g))\n  ) {\n    return <Code>{children}</Code>;\n  }\n  // className: \"lang-jsx\"\n  const language = className && className.split('-');\n  return (\n    <Source\n      language={((language && language[1]) as SupportedLanguage) || 'text'}\n      format={false}\n      code={children as string}\n      {...rest}\n    />\n  );\n};\n\nfunction navigate(context: DocsContextProps, url: string) {\n  context.channel.emit(NAVIGATE_URL, url);\n}\n\nconst A = components.a;\n\ninterface AnchorInPageProps {\n  hash: string;\n}\n\nconst AnchorInPage: FC<PropsWithChildren<AnchorInPageProps>> = ({ hash, children }) => {\n  const context = useContext(DocsContext);\n\n  return (\n    <A\n      href={hash}\n      target=\"_self\"\n      onClick={(event: SyntheticEvent) => {\n        const id = hash.substring(1);\n        const element = document.getElementById(id);\n        if (element) {\n          navigate(context, hash);\n        }\n      }}\n    >\n      {children}\n    </A>\n  );\n};\n\ninterface AnchorMdxProps {\n  href: string;\n  target: string;\n}\n\nexport const AnchorMdx: FC<PropsWithChildren<AnchorMdxProps>> = (props) => {\n  const { href, target, children, ...rest } = props;\n  const context = useContext(DocsContext);\n\n  if (href) {\n    // Enable scrolling for in-page anchors.\n    if (href.startsWith('#')) {\n      return <AnchorInPage hash={href}>{children}</AnchorInPage>;\n    }\n\n    // Links to other pages of SB should use the base URL of the top level iframe instead of the base URL of the preview iframe.\n    if (target !== '_blank' && !href.startsWith('https://')) {\n      return (\n        <A\n          href={href}\n          onClick={(event: MouseEvent<HTMLAnchorElement>) => {\n            // Cmd/Ctrl/Shift/Alt + Click should trigger default browser behaviour. Same applies to non-left clicks\n            const LEFT_BUTTON = 0;\n            const isLeftClick =\n              event.button === LEFT_BUTTON &&\n              !event.altKey &&\n              !event.ctrlKey &&\n              !event.metaKey &&\n              !event.shiftKey;\n\n            if (isLeftClick) {\n              event.preventDefault();\n              // use the A element's href, which has been modified for\n              // local paths without a `?path=` query param prefix\n              navigate(context, event.currentTarget.getAttribute('href'));\n            }\n          }}\n          target={target}\n          {...rest}\n        >\n          {children}\n        </A>\n      );\n    }\n  }\n\n  // External URL dont need any modification.\n  return <A {...props} />;\n};\n\nconst SUPPORTED_MDX_HEADERS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] as const;\n\nconst OcticonHeaders = SUPPORTED_MDX_HEADERS.reduce(\n  (acc, headerType) => ({\n    ...acc,\n    [headerType]: styled(headerType)({\n      '& svg': {\n        position: 'relative',\n        top: '-0.1em',\n        visibility: 'hidden',\n      },\n      '&:hover svg': {\n        visibility: 'visible',\n      },\n    }),\n  }),\n  {}\n);\n\nconst OcticonAnchor = styled.a(() => ({\n  float: 'left',\n  lineHeight: 'inherit',\n  paddingRight: '10px',\n  marginLeft: '-24px',\n  // Allow the theme's text color to override the default link color.\n  color: 'inherit',\n}));\n\ninterface HeaderWithOcticonAnchorProps {\n  as: string;\n  id: string;\n}\n\nconst HeaderWithOcticonAnchor: FC<PropsWithChildren<HeaderWithOcticonAnchorProps>> = ({\n  as,\n  id,\n  children,\n  ...rest\n}) => {\n  const context = useContext(DocsContext);\n\n  // @ts-expect-error (Converted from ts-ignore)\n  const OcticonHeader = OcticonHeaders[as];\n  const hash = `#${id}`;\n\n  return (\n    <OcticonHeader id={id} {...rest}>\n      <OcticonAnchor\n        aria-hidden=\"true\"\n        href={hash}\n        tabIndex={-1}\n        target=\"_self\"\n        onClick={(event: SyntheticEvent) => {\n          const element = document.getElementById(id);\n          if (element) {\n            navigate(context, hash);\n          }\n        }}\n      >\n        <LinkIcon />\n      </OcticonAnchor>\n      {children}\n    </OcticonHeader>\n  );\n};\n\ninterface HeaderMdxProps {\n  as: string;\n  id: string;\n}\n\nexport const HeaderMdx: FC<PropsWithChildren<HeaderMdxProps>> = (props) => {\n  const { as, id, children, ...rest } = props;\n\n  // An id should have been added on every header by the \"remark-slug\" plugin.\n  if (id) {\n    return (\n      <HeaderWithOcticonAnchor as={as} id={id} {...rest}>\n        {children}\n      </HeaderWithOcticonAnchor>\n    );\n  }\n  // Make sure it still work if \"remark-slug\" plugin is not present.\n  const Component = as as React.ElementType;\n  const { as: omittedAs, ...withoutAs } = props;\n  return <Component {...nameSpaceClassNames(withoutAs, as)} />;\n};\n\nexport const HeadersMdx = SUPPORTED_MDX_HEADERS.reduce(\n  (acc, headerType) => ({\n    ...acc,\n    // @ts-expect-error (Converted from ts-ignore)\n    [headerType]: (props: object) => <HeaderMdx as={headerType} {...props} />,\n  }),\n  {}\n);\n","/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport PureMarkdown from 'markdown-to-jsx';\nimport dedent from 'ts-dedent';\nimport { AnchorMdx, CodeOrSourceMdx, HeadersMdx } from './mdx';\n\n// mirror props from markdown-to-jsx. From https://react-typescript-cheatsheet.netlify.app/docs/advanced/patterns_by_usecase#wrappingmirroring-a-component\ntype MarkdownProps = typeof PureMarkdown extends React.ComponentType<infer Props> ? Props : never;\n\nexport const Markdown = (props: MarkdownProps) => {\n  if (!props.children) {\n    return null;\n  }\n  if (typeof props.children !== 'string') {\n    throw new Error(\n      dedent`The Markdown block only accepts children as a single string, but children were of type: '${typeof props.children}'\n        This is often caused by not wrapping the child in a template string.\n        \n        This is invalid:\n        <Markdown>\n          # Some heading\n          A paragraph\n        </Markdown>\n\n        Instead do:\n        <Markdown>\n        {\\`\n          # Some heading\n          A paragraph\n        \\`}\n        </Markdown>\n      `\n    );\n  }\n  return (\n    <PureMarkdown\n      {...props}\n      options={{\n        forceBlock: true,\n        overrides: {\n          code: CodeOrSourceMdx,\n          a: AnchorMdx,\n          ...HeadersMdx,\n          ...props?.options?.overrides,\n        },\n        ...props?.options,\n      }}\n    />\n  );\n};\n"],"names":["NAVIGATE_URL","global","document","CodeOrSourceMdx","className","children","rest","React","Code","language","Source","navigate","context","url","A","components","AnchorInPage","hash","useContext","DocsContext","event","id","AnchorMdx","props","href","target","SUPPORTED_MDX_HEADERS","OcticonHeaders","acc","headerType","styled","OcticonAnchor","HeaderWithOcticonAnchor","as","OcticonHeader","LinkIcon","HeaderMdx","Component","omittedAs","withoutAs","nameSpaceClassNames","HeadersMdx","Markdown","dedent","PureMarkdown","_a"],"mappings":"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"}