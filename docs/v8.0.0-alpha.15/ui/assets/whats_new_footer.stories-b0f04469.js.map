{"version":3,"file":"whats_new_footer.stories-b0f04469.js","sources":["../../ui/manager/src/settings/whats_new.tsx"],"sourcesContent":["import type { ComponentProps, FC } from 'react';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { styled, useTheme } from '@storybook/theming';\nimport { Button, Loader } from '@storybook/components';\nimport { useStorybookApi, useStorybookState } from '@storybook/manager-api';\nimport { global } from '@storybook/global';\nimport { EyeCloseIcon, EyeIcon, HeartIcon, AlertIcon as AlertIconSvg } from '@storybook/icons';\n\nconst Centered = styled.div({\n  top: '50%',\n  position: 'absolute',\n  transform: 'translateY(-50%)',\n  width: '100%',\n  textAlign: 'center',\n});\n\nconst LoaderWrapper = styled.div({\n  position: 'relative',\n  height: '32px',\n});\n\nconst Message = styled.div(({ theme }) => ({\n  paddingTop: '12px',\n  color: theme.textMutedColor,\n  maxWidth: '295px',\n  margin: '0 auto',\n  fontSize: `${theme.typography.size.s1}px`,\n  lineHeight: `16px`,\n}));\n\nconst Container = styled.div(({ theme }) => ({\n  position: 'absolute',\n  width: '100%',\n  bottom: '40px',\n  background: theme.background.bar,\n  fontSize: `13px`,\n  borderTop: '1px solid',\n  borderColor: theme.appBorderColor,\n  padding: '8px 12px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n}));\n\nexport const WhatsNewFooter = ({\n  isNotificationsEnabled,\n  onToggleNotifications,\n  onCopyLink,\n}: {\n  isNotificationsEnabled: boolean;\n  onToggleNotifications?: () => void;\n  onCopyLink?: () => void;\n}) => {\n  const theme = useTheme();\n  const [copyText, setCopyText] = useState('Copy Link');\n  const copyLink = () => {\n    onCopyLink();\n    setCopyText('Copied!');\n    setTimeout(() => setCopyText('Copy Link'), 4000);\n  };\n\n  return (\n    <Container>\n      <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>\n        <HeartIcon color={theme.color.mediumdark} />\n        <div>Share this with your team.</div>\n        <Button onClick={copyLink} size=\"small\" variant=\"ghost\">\n          {copyText}\n        </Button>\n      </div>\n      {isNotificationsEnabled ? (\n        <Button size=\"small\" variant=\"ghost\" onClick={onToggleNotifications}>\n          <EyeCloseIcon />\n          Hide notifications\n        </Button>\n      ) : (\n        <Button size=\"small\" variant=\"ghost\" onClick={onToggleNotifications}>\n          <EyeIcon />\n          Show notifications\n        </Button>\n      )}\n    </Container>\n  );\n};\n\nconst Iframe = styled.iframe<{ isLoaded: boolean }>(\n  {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    border: 0,\n    margin: 0,\n    padding: 0,\n    width: '100%',\n    height: 'calc(100% - 80px)',\n    background: 'white',\n  },\n  ({ isLoaded }) => ({ visibility: isLoaded ? 'visible' : 'hidden' })\n);\n\nconst AlertIcon = styled(((props) => <AlertIconSvg {...props} />) as FC<\n  Omit<ComponentProps<typeof AlertIconSvg>, 'icon'>\n>)(({ theme }) => ({\n  color: theme.textMutedColor,\n  width: 32,\n  height: 32,\n  margin: '0 auto',\n}));\n\nconst WhatsNewLoader: FC = () => (\n  <Centered>\n    <LoaderWrapper>\n      <Loader />\n    </LoaderWrapper>\n    <Message>Loading...</Message>\n  </Centered>\n);\n\nconst MaxWaitTimeMessaging: FC = () => (\n  <Centered>\n    <AlertIcon />\n    <Message>The page couldn't be loaded. Check your internet connection and try again.</Message>\n  </Centered>\n);\n\nexport interface WhatsNewProps {\n  didHitMaxWaitTime: boolean;\n  isLoaded: boolean;\n  onLoad: () => void;\n  url?: string;\n  isNotificationsEnabled: boolean;\n  onCopyLink?: () => void;\n  onToggleNotifications?: () => void;\n}\n\nconst PureWhatsNewScreen: FC<WhatsNewProps> = ({\n  didHitMaxWaitTime,\n  isLoaded,\n  onLoad,\n  url,\n  onCopyLink,\n  onToggleNotifications,\n  isNotificationsEnabled,\n}) => (\n  <Fragment>\n    {!isLoaded && !didHitMaxWaitTime && <WhatsNewLoader />}\n    {didHitMaxWaitTime ? (\n      <MaxWaitTimeMessaging />\n    ) : (\n      <>\n        <Iframe isLoaded={isLoaded} onLoad={onLoad} src={url} title={`What's new?`} />\n        <WhatsNewFooter\n          isNotificationsEnabled={isNotificationsEnabled}\n          onToggleNotifications={onToggleNotifications}\n          onCopyLink={onCopyLink}\n        />\n      </>\n    )}\n  </Fragment>\n);\n\nconst MAX_WAIT_TIME = 10000; // 10 seconds\n\nconst WhatsNewScreen: FC = () => {\n  const api = useStorybookApi();\n  const state = useStorybookState();\n  const { whatsNewData } = state;\n  const [isLoaded, setLoaded] = useState(false);\n  const [didHitMaxWaitTime, setDidHitMaxWaitTime] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => !isLoaded && setDidHitMaxWaitTime(true), MAX_WAIT_TIME);\n    return () => clearTimeout(timer);\n  }, [isLoaded]);\n\n  if (whatsNewData?.status !== 'SUCCESS') return null;\n\n  const isNotificationsEnabled = !whatsNewData.disableWhatsNewNotifications;\n\n  return (\n    <PureWhatsNewScreen\n      didHitMaxWaitTime={didHitMaxWaitTime}\n      isLoaded={isLoaded}\n      onLoad={() => {\n        api.whatsNewHasBeenRead();\n        setLoaded(true);\n      }}\n      url={whatsNewData.url}\n      isNotificationsEnabled={isNotificationsEnabled}\n      onCopyLink={() => {\n        navigator.clipboard?.writeText(whatsNewData.blogUrl ?? whatsNewData.url);\n      }}\n      onToggleNotifications={() => {\n        if (isNotificationsEnabled) {\n          if (global.confirm('All update notifications will no longer be shown. Are you sure?')) {\n            api.toggleWhatsNewNotifications();\n          }\n        } else {\n          api.toggleWhatsNewNotifications();\n        }\n      }}\n    />\n  );\n};\n\nexport { WhatsNewScreen, PureWhatsNewScreen };\n"],"names":["styled","theme","Container","WhatsNewFooter","isNotificationsEnabled","onToggleNotifications","onCopyLink","useTheme","copyText","setCopyText","useState","copyLink","React","HeartIcon","Button","EyeCloseIcon","EyeIcon","isLoaded","props","AlertIconSvg"],"mappings":"s0BAKA,4BAGAA,EAAA,IAAA,CACA,IAAA,MACA,SAAA,WACA,UAAA,mBACA,MAAA,OACA,UAAA,QACA,CAAA,EAEAA,EAAA,IAAA,CACA,SAAA,WACA,OAAA,MACA,CAAA,EAEAA,EAAA,IAAA,CAAA,CAAA,MAAAC,MAAA,CACA,WAAA,OACA,MAAAA,EAAA,eACA,SAAA,QACA,OAAA,SACA,SAAA,GAAAA,EAAA,WAAA,KAAA,EAAA,KACA,WAAA,MACA,EAAA,EAEA,MAAAC,EAAAF,EAAA,IAAA,CAAA,CAAA,MAAAC,MAAA,CACA,SAAA,WACA,MAAA,OACA,OAAA,OACA,WAAAA,EAAA,WAAA,IACA,SAAA,OACA,UAAA,YACA,YAAAA,EAAA,eACA,QAAA,WACA,QAAA,OACA,WAAA,SACA,eAAA,eACA,EAAA,EAEAE,EAAA,CAAA,CACA,uBAAAC,EACA,sBAAAC,EACA,WAAAC,CACA,IAIA,CACA,MAAAL,EAAAM,IACA,CAAAC,EAAAC,CAAA,EAAAC,WAAA,WAAA,EACAC,EAAA,IAAA,CACAL,IACAG,EAAA,SAAA,EACA,WAAA,IAAAA,EAAA,WAAA,EAAA,GAAA,CAAA,EAGA,OACAG,EAAA,cAAAV,EAAA,KACAU,EAAA,cAAA,MAAA,CAAA,MAAA,CAAA,QAAA,OAAA,WAAA,SAAA,IAAA,EAAA,CACA,EAAAA,EAAA,cAAAC,EAAA,CAAA,MAAAZ,EAAA,MAAA,WAAA,EACAW,EAAA,cAAA,MAAA,KAAA,4BAAA,EACAA,EAAA,cAAAE,EAAA,CAAA,QAAAH,EAAA,KAAA,QAAA,QAAA,OAAA,EACAH,CACA,CACA,EACAJ,EACAQ,EAAA,cAAAE,EAAA,CAAA,KAAA,QAAA,QAAA,QAAA,QAAAT,CAAA,EACAO,EAAA,cAAAG,EAAA,IAAA,EAAA,oBAEA,EAEAH,EAAA,cAAAE,EAAA,CAAA,KAAA,QAAA,QAAA,QAAA,QAAAT,CACA,EAAAO,EAAA,cAAAI,EAAA,IAAA,EAAA,oBAEA,CAEA,CAEA,EAEAhB,EAAA,OACA,CACA,SAAA,WACA,IAAA,EACA,KAAA,EACA,MAAA,EACA,OAAA,EACA,OAAA,EACA,OAAA,EACA,QAAA,EACA,MAAA,OACA,OAAA,oBACA,WAAA,OACA,EACA,CAAA,CAAA,SAAAiB,CAAA,KAAA,CAAA,WAAAA,EAAA,UAAA,UACA,EAEAjB,EAAAkB,GAAAN,EAAA,cAAAO,EAAA,CAAA,GAAAD,EAAA,CAEA,EAAA,CAAA,CAAA,MAAAjB,MAAA,CACA,MAAAA,EAAA,eACA,MAAA,GACA,OAAA,GACA,OAAA,QACA,EAAA;;;;;;;;;;"}