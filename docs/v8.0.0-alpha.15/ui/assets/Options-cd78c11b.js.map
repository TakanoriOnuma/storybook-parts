{"version":3,"file":"Options-cd78c11b.js","sources":["../../ui/blocks/src/controls/options/helpers.ts","../../ui/blocks/src/controls/options/Checkbox.tsx","../../ui/blocks/src/controls/options/Radio.tsx","../../ui/blocks/src/controls/options/Select.tsx","../../ui/blocks/src/controls/options/Options.tsx"],"sourcesContent":["import type { OptionsObject } from '../types';\n\nexport const selectedKey = (value: any, options: OptionsObject) => {\n  const entry = options && Object.entries(options).find(([_key, val]) => val === value);\n  return entry ? entry[0] : undefined;\n};\n\nexport const selectedKeys = (value: any[], options: OptionsObject) =>\n  value && options\n    ? Object.entries(options)\n        .filter((entry) => value.includes(entry[1]))\n        .map((entry) => entry[0])\n    : [];\n\nexport const selectedValues = (keys: string[], options: OptionsObject) =>\n  keys && options && keys.map((key) => options[key]);\n","import type { FC, ChangeEvent } from 'react';\nimport React, { useState, useEffect } from 'react';\nimport { styled } from '@storybook/theming';\nimport { logger } from '@storybook/client-logger';\n\nimport type { ControlProps, OptionsMultiSelection, NormalizedOptionsConfig } from '../types';\n\nimport { selectedKeys, selectedValues } from './helpers';\nimport { getControlId } from '../helpers';\n\nconst Wrapper = styled.div<{ isInline: boolean }>(({ isInline }) =>\n  isInline\n    ? {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n\n        label: {\n          display: 'inline-flex',\n          marginRight: 15,\n        },\n      }\n    : {\n        label: {\n          display: 'flex',\n        },\n      }\n);\n\nconst Text = styled.span({});\n\nconst Label = styled.label({\n  lineHeight: '20px',\n  alignItems: 'center',\n  marginBottom: 8,\n\n  '&:last-child': {\n    marginBottom: 0,\n  },\n\n  input: {\n    margin: 0,\n    marginRight: 6,\n  },\n});\n\ntype CheckboxConfig = NormalizedOptionsConfig & { isInline: boolean };\ntype CheckboxProps = ControlProps<OptionsMultiSelection> & CheckboxConfig;\nexport const CheckboxControl: FC<CheckboxProps> = ({\n  name,\n  options,\n  value,\n  onChange,\n  isInline,\n}) => {\n  if (!options) {\n    logger.warn(`Checkbox with no options: ${name}`);\n    return <>-</>;\n  }\n\n  const initial = selectedKeys(value, options);\n  const [selected, setSelected] = useState(initial);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const option = (e.target as HTMLInputElement).value;\n    const updated = [...selected];\n    if (updated.includes(option)) {\n      updated.splice(updated.indexOf(option), 1);\n    } else {\n      updated.push(option);\n    }\n    onChange(selectedValues(updated, options));\n    setSelected(updated);\n  };\n\n  useEffect(() => {\n    setSelected(selectedKeys(value, options));\n  }, [value]);\n\n  const controlId = getControlId(name);\n\n  return (\n    <Wrapper isInline={isInline}>\n      {Object.keys(options).map((key, index) => {\n        const id = `${controlId}-${index}`;\n        return (\n          <Label key={id} htmlFor={id}>\n            <input\n              type=\"checkbox\"\n              id={id}\n              name={id}\n              value={key}\n              onChange={handleChange}\n              checked={selected?.includes(key)}\n            />\n            <Text>{key}</Text>\n          </Label>\n        );\n      })}\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { styled } from '@storybook/theming';\nimport { logger } from '@storybook/client-logger';\n\nimport type { ControlProps, OptionsSingleSelection, NormalizedOptionsConfig } from '../types';\n\nimport { selectedKey } from './helpers';\nimport { getControlId } from '../helpers';\n\nconst Wrapper = styled.div<{ isInline: boolean }>(({ isInline }) =>\n  isInline\n    ? {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n\n        label: {\n          display: 'inline-flex',\n          marginRight: 15,\n        },\n      }\n    : {\n        label: {\n          display: 'flex',\n        },\n      }\n);\n\nconst Text = styled.span({});\n\nconst Label = styled.label({\n  lineHeight: '20px',\n  alignItems: 'center',\n  marginBottom: 8,\n\n  '&:last-child': {\n    marginBottom: 0,\n  },\n\n  input: {\n    margin: 0,\n    marginRight: 6,\n  },\n});\n\ntype RadioConfig = NormalizedOptionsConfig & { isInline: boolean };\ntype RadioProps = ControlProps<OptionsSingleSelection> & RadioConfig;\nexport const RadioControl: FC<RadioProps> = ({ name, options, value, onChange, isInline }) => {\n  if (!options) {\n    logger.warn(`Radio with no options: ${name}`);\n    return <>-</>;\n  }\n  const selection = selectedKey(value, options);\n  const controlId = getControlId(name);\n\n  return (\n    <Wrapper isInline={isInline}>\n      {Object.keys(options).map((key, index) => {\n        const id = `${controlId}-${index}`;\n        return (\n          <Label key={id} htmlFor={id}>\n            <input\n              type=\"radio\"\n              id={id}\n              name={id}\n              value={key}\n              onChange={(e) => onChange(options[e.currentTarget.value])}\n              checked={key === selection}\n            />\n            <Text>{key}</Text>\n          </Label>\n        );\n      })}\n    </Wrapper>\n  );\n};\n","import type { FC, ChangeEvent } from 'react';\nimport React from 'react';\nimport { styled } from '@storybook/theming';\nimport type { CSSObject } from '@storybook/theming';\nimport { logger } from '@storybook/client-logger';\nimport { Icons } from '@storybook/components';\n\nimport type { ControlProps, OptionsSelection, NormalizedOptionsConfig } from '../types';\n\nimport { selectedKey, selectedKeys, selectedValues } from './helpers';\nimport { getControlId } from '../helpers';\n\nconst styleResets: CSSObject = {\n  // resets\n  appearance: 'none',\n  border: '0 none',\n  boxSizing: 'inherit',\n  display: ' block',\n  margin: ' 0',\n  background: 'transparent',\n  padding: 0,\n  fontSize: 'inherit',\n  position: 'relative',\n};\n\nconst OptionsSelect = styled.select(styleResets, ({ theme }) => ({\n  boxSizing: 'border-box',\n  position: 'relative',\n  padding: '6px 10px',\n  width: '100%',\n\n  color: theme.input.color || 'inherit',\n  background: theme.input.background,\n  borderRadius: theme.input.borderRadius,\n  boxShadow: `${theme.input.border} 0 0 0 1px inset`,\n\n  fontSize: theme.typography.size.s2 - 1,\n  lineHeight: '20px',\n\n  '&:focus': {\n    boxShadow: `${theme.color.secondary} 0 0 0 1px inset`,\n    outline: 'none',\n  },\n\n  '&[disabled]': {\n    cursor: 'not-allowed',\n    opacity: 0.5,\n  },\n\n  '::placeholder': {\n    color: theme.textMutedColor,\n  },\n\n  '&[multiple]': {\n    overflow: 'auto',\n    padding: 0,\n\n    option: {\n      display: 'block',\n      padding: '6px 10px',\n      marginLeft: 1,\n      marginRight: 1,\n    },\n  },\n}));\n\nconst SelectWrapper = styled.span(({ theme }) => ({\n  display: 'inline-block',\n  lineHeight: 'normal',\n  overflow: 'hidden',\n  position: 'relative',\n  verticalAlign: 'top',\n  width: '100%',\n\n  svg: {\n    position: 'absolute',\n    zIndex: 1,\n    pointerEvents: 'none',\n    height: '12px',\n    marginTop: '-6px',\n    right: '12px',\n    top: '50%',\n    fill: theme.textMutedColor,\n\n    path: {\n      fill: theme.textMutedColor,\n    },\n  },\n}));\n\ntype SelectConfig = NormalizedOptionsConfig & { isMulti: boolean };\ntype SelectProps = ControlProps<OptionsSelection> & SelectConfig;\n\nconst NO_SELECTION = 'Choose option...';\n\nconst SingleSelect: FC<SelectProps> = ({ name, value, options, onChange }) => {\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    onChange(options[e.currentTarget.value]);\n  };\n  const selection = selectedKey(value, options) || NO_SELECTION;\n  const controlId = getControlId(name);\n\n  return (\n    <SelectWrapper>\n      <Icons icon=\"arrowdown\" />\n      <OptionsSelect id={controlId} value={selection} onChange={handleChange}>\n        <option key=\"no-selection\" disabled>\n          {NO_SELECTION}\n        </option>\n        {Object.keys(options).map((key) => (\n          <option key={key} value={key}>\n            {key}\n          </option>\n        ))}\n      </OptionsSelect>\n    </SelectWrapper>\n  );\n};\n\nconst MultiSelect: FC<SelectProps> = ({ name, value, options, onChange }) => {\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const selection = Array.from(e.currentTarget.options)\n      .filter((option) => option.selected)\n      .map((option) => option.value);\n    onChange(selectedValues(selection, options));\n  };\n  const selection = selectedKeys(value, options);\n  const controlId = getControlId(name);\n\n  return (\n    <SelectWrapper>\n      <OptionsSelect id={controlId} multiple value={selection} onChange={handleChange}>\n        {Object.keys(options).map((key) => (\n          <option key={key} value={key}>\n            {key}\n          </option>\n        ))}\n      </OptionsSelect>\n    </SelectWrapper>\n  );\n};\n\nexport const SelectControl: FC<SelectProps> = (props) => {\n  const { name, options } = props;\n  if (!options) {\n    logger.warn(`Select with no options: ${name}`);\n    return <>-</>;\n  }\n\n  // eslint-disable-next-line react/destructuring-assignment\n  return props.isMulti ? <MultiSelect {...props} /> : <SingleSelect {...props} />;\n};\n","import type { FC } from 'react';\nimport React from 'react';\n\nimport { CheckboxControl } from './Checkbox';\n\nimport { RadioControl } from './Radio';\n\nimport { SelectControl } from './Select';\n\nimport type { ControlProps, OptionsSelection, OptionsConfig, Options } from '../types';\n\n/**\n * Options can accept `options` in two formats:\n * - array: ['a', 'b', 'c'] OR\n * - object: { a: 1, b: 2, c: 3 } (deprecated)\n *\n * We always normalize to the more generalized object format and ONLY handle\n * the object format in the underlying control implementations.\n *\n * While non-primitive values are deprecated, they might still not be valid\n * object keys, so the resulting object is a Label -> Value mapping.\n */\nconst normalizeOptions = (options: Options, labels?: Record<any, string>) => {\n  if (Array.isArray(options)) {\n    return options.reduce((acc, item) => {\n      acc[labels?.[item] || String(item)] = item;\n      return acc;\n    }, {});\n  }\n  return options;\n};\n\nconst Controls = {\n  check: CheckboxControl,\n  'inline-check': CheckboxControl,\n  radio: RadioControl,\n  'inline-radio': RadioControl,\n  select: SelectControl,\n  'multi-select': SelectControl,\n} as const;\n\nexport type OptionsProps = ControlProps<OptionsSelection> & OptionsConfig;\nexport const OptionsControl: FC<OptionsProps> = (props) => {\n  const { type = 'select', labels, argType } = props;\n  const normalized = {\n    ...props,\n    options: argType ? normalizeOptions(argType.options, labels) : {},\n    isInline: type.includes('inline'),\n    isMulti: type.includes('multi'),\n  };\n\n  const Control = Controls[type];\n  if (Control) {\n    return <Control {...normalized} />;\n  }\n  throw new Error(`Unknown options type: ${type}`);\n};\n"],"names":["selectedKey","value","options","entry","_key","val","selectedKeys","selectedValues","keys","key","logger","Wrapper","styled","isInline","Text","Label","CheckboxControl","name","onChange","initial","selected","setSelected","useState","handleChange","e","option","updated","useEffect","controlId","getControlId","React","index","id","RadioControl","selection","styleResets","OptionsSelect","theme","SelectWrapper","NO_SELECTION","SingleSelect","Icons","MultiSelect","SelectControl","props","normalizeOptions","labels","acc","item","Controls","OptionsControl","type","argType","normalized","Control"],"mappings":"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"}