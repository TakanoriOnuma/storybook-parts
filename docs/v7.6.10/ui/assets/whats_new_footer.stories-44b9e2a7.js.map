{"version":3,"file":"whats_new_footer.stories-44b9e2a7.js","sources":["../../ui/manager/src/settings/whats_new.tsx"],"sourcesContent":["import type { ComponentProps, FC } from 'react';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { styled, useTheme } from '@storybook/theming';\nimport { Button, IconButton, Icons, Loader } from '@storybook/components';\nimport { useStorybookApi, useStorybookState } from '@storybook/manager-api';\nimport { global } from '@storybook/global';\n\nconst Centered = styled.div({\n  top: '50%',\n  position: 'absolute',\n  transform: 'translateY(-50%)',\n  width: '100%',\n  textAlign: 'center',\n});\n\nconst LoaderWrapper = styled.div({\n  position: 'relative',\n  height: '32px',\n});\n\nconst Message = styled.div(({ theme }) => ({\n  paddingTop: '12px',\n  color: theme.textMutedColor,\n  maxWidth: '295px',\n  margin: '0 auto',\n  fontSize: `${theme.typography.size.s1}px`,\n  lineHeight: `16px`,\n}));\n\nconst Container = styled.div(({ theme }) => ({\n  position: 'absolute',\n  width: '100%',\n  bottom: '40px',\n  background: theme.background.bar,\n  fontSize: `13px`,\n  borderTop: '1px solid',\n  borderColor: theme.appBorderColor,\n  padding: '8px 12px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n}));\n\nconst ToggleNotificationButton = styled(IconButton)(({ theme }) => ({\n  fontWeight: theme.typography.weight.regular,\n  color: theme.color.mediumdark,\n  margin: 0,\n}));\n\nconst CopyButton = styled(Button)(({ theme }) => ({\n  '&&': {\n    fontSize: `13px`,\n    color: theme.color.defaultText,\n    margin: 0,\n    padding: 0,\n    borderRadius: 0,\n  },\n}));\n\nexport const WhatsNewFooter = ({\n  isNotificationsEnabled,\n  onToggleNotifications,\n  onCopyLink,\n}: {\n  isNotificationsEnabled: boolean;\n  onToggleNotifications?: () => void;\n  onCopyLink?: () => void;\n}) => {\n  const theme = useTheme();\n  const [copyText, setCopyText] = useState('Copy Link');\n  const copyLink = () => {\n    onCopyLink();\n    setCopyText('Copied!');\n    setTimeout(() => setCopyText('Copy Link'), 4000);\n  };\n\n  return (\n    <Container>\n      <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>\n        <Icons icon=\"heart\" color={theme.color.mediumdark} />\n        <div>Share this with your team.</div>\n        <CopyButton onClick={copyLink} small>\n          {copyText}\n        </CopyButton>\n      </div>\n      <ToggleNotificationButton onClick={onToggleNotifications}>\n        {isNotificationsEnabled ? (\n          <>\n            <Icons icon=\"eyeclose\" />\n            &nbsp;Hide notifications\n          </>\n        ) : (\n          <>\n            <Icons icon=\"eye\" />\n            &nbsp;Show notifications\n          </>\n        )}\n      </ToggleNotificationButton>\n    </Container>\n  );\n};\n\nconst Iframe = styled.iframe<{ isLoaded: boolean }>(\n  {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    border: 0,\n    margin: 0,\n    padding: 0,\n    width: '100%',\n    height: 'calc(100% - 80px)',\n    background: 'white',\n  },\n  ({ isLoaded }) => ({ visibility: isLoaded ? 'visible' : 'hidden' })\n);\n\nconst AlertIcon = styled(((props) => <Icons icon=\"alert\" {...props} />) as FC<\n  Omit<ComponentProps<typeof Icons>, 'icon'>\n>)(({ theme }) => ({\n  color: theme.textMutedColor,\n  width: 32,\n  height: 32,\n  margin: '0 auto',\n}));\n\nconst WhatsNewLoader: FC = () => (\n  <Centered>\n    <LoaderWrapper>\n      <Loader />\n    </LoaderWrapper>\n    <Message>Loading...</Message>\n  </Centered>\n);\n\nconst MaxWaitTimeMessaging: FC = () => (\n  <Centered>\n    <AlertIcon />\n    <Message>The page couldn't be loaded. Check your internet connection and try again.</Message>\n  </Centered>\n);\n\nexport interface WhatsNewProps {\n  didHitMaxWaitTime: boolean;\n  isLoaded: boolean;\n  onLoad: () => void;\n  url?: string;\n  isNotificationsEnabled: boolean;\n  onCopyLink?: () => void;\n  onToggleNotifications?: () => void;\n}\n\nconst PureWhatsNewScreen: FC<WhatsNewProps> = ({\n  didHitMaxWaitTime,\n  isLoaded,\n  onLoad,\n  url,\n  onCopyLink,\n  onToggleNotifications,\n  isNotificationsEnabled,\n}) => (\n  <Fragment>\n    {!isLoaded && !didHitMaxWaitTime && <WhatsNewLoader />}\n    {didHitMaxWaitTime ? (\n      <MaxWaitTimeMessaging />\n    ) : (\n      <>\n        <Iframe isLoaded={isLoaded} onLoad={onLoad} src={url} title={`What's new?`} />\n        <WhatsNewFooter\n          isNotificationsEnabled={isNotificationsEnabled}\n          onToggleNotifications={onToggleNotifications}\n          onCopyLink={onCopyLink}\n        />\n      </>\n    )}\n  </Fragment>\n);\n\nconst MAX_WAIT_TIME = 10000; // 10 seconds\n\nconst WhatsNewScreen: FC = () => {\n  const api = useStorybookApi();\n  const state = useStorybookState();\n  const { whatsNewData } = state;\n  const [isLoaded, setLoaded] = useState(false);\n  const [didHitMaxWaitTime, setDidHitMaxWaitTime] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => !isLoaded && setDidHitMaxWaitTime(true), MAX_WAIT_TIME);\n    return () => clearTimeout(timer);\n  }, [isLoaded]);\n\n  if (whatsNewData?.status !== 'SUCCESS') return null;\n\n  const isNotificationsEnabled = !whatsNewData.disableWhatsNewNotifications;\n\n  return (\n    <PureWhatsNewScreen\n      didHitMaxWaitTime={didHitMaxWaitTime}\n      isLoaded={isLoaded}\n      onLoad={() => {\n        api.whatsNewHasBeenRead();\n        setLoaded(true);\n      }}\n      url={whatsNewData.url}\n      isNotificationsEnabled={isNotificationsEnabled}\n      onCopyLink={() => {\n        navigator.clipboard?.writeText(whatsNewData.blogUrl ?? whatsNewData.url);\n      }}\n      onToggleNotifications={() => {\n        if (isNotificationsEnabled) {\n          if (global.confirm('All update notifications will no longer be shown. Are you sure?')) {\n            api.toggleWhatsNewNotifications();\n          }\n        } else {\n          api.toggleWhatsNewNotifications();\n        }\n      }}\n    />\n  );\n};\n\nexport { WhatsNewScreen, PureWhatsNewScreen };\n"],"names":["global","Centered","styled","LoaderWrapper","Message","theme","Container","ToggleNotificationButton","IconButton","CopyButton","Button","WhatsNewFooter","isNotificationsEnabled","onToggleNotifications","onCopyLink","useTheme","copyText","setCopyText","useState","copyLink","jsxs","jsx","Icons","Fragment","Iframe","isLoaded","AlertIcon","props","WhatsNewLoader","Loader","MaxWaitTimeMessaging","PureWhatsNewScreen","didHitMaxWaitTime","onLoad","url","Fragment2","MAX_WAIT_TIME","WhatsNewScreen","api","useStorybookApi","state","useStorybookState","whatsNewData","setLoaded","setDidHitMaxWaitTime","useEffect","timer","_a"],"mappings":"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"}