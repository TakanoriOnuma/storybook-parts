{"version":3,"file":"shortcuts.stories-64ac72cc.js","sources":["../../ui/manager/src/settings/shortcuts.tsx"],"sourcesContent":["import type { ComponentProps, FC } from 'react';\nimport React, { Component } from 'react';\nimport { styled, keyframes } from '@storybook/theming';\n\nimport {\n  eventToShortcut,\n  shortcutToHumanString,\n  shortcutMatchesShortcut,\n} from '@storybook/manager-api';\nimport { Form, Icons } from '@storybook/components';\nimport SettingsFooter from './SettingsFooter';\n\nconst Header = styled.header(({ theme }) => ({\n  marginBottom: 20,\n  fontSize: theme.typography.size.m3,\n  fontWeight: theme.typography.weight.bold,\n  alignItems: 'center',\n  display: 'flex',\n}));\n\n// Grid\nexport const HeaderItem = styled.div(({ theme }) => ({\n  fontWeight: theme.typography.weight.bold,\n}));\n\nexport const GridHeaderRow = styled.div({\n  alignSelf: 'flex-end',\n  display: 'grid',\n  margin: '10px 0',\n  gridTemplateColumns: '1fr 1fr 12px',\n  '& > *:last-of-type': {\n    gridColumn: '2 / 2',\n    justifySelf: 'flex-end',\n    gridRow: '1',\n  },\n});\n\nexport const Row = styled.div(({ theme }) => ({\n  padding: '6px 0',\n  borderTop: `1px solid ${theme.appBorderColor}`,\n  display: 'grid',\n  gridTemplateColumns: '1fr 1fr 0px',\n}));\n\nexport const GridWrapper = styled.div({\n  display: 'grid',\n  gridTemplateColumns: '1fr',\n  gridAutoRows: 'minmax(auto, auto)',\n  marginBottom: 20,\n});\n\n// Form\nexport const Description = styled.div({\n  alignSelf: 'center',\n});\n\nexport type ValidationStates = 'valid' | 'error' | 'warn';\n\nexport const TextInput: FC<ComponentProps<typeof Form.Input> & { valid: ValidationStates }> =\n  styled(Form.Input)<{ valid: ValidationStates }>(\n    ({ valid, theme }) =>\n      valid === 'error'\n        ? {\n            animation: `${theme.animation.jiggle} 700ms ease-out`,\n          }\n        : {},\n    {\n      display: 'flex',\n      width: 80,\n      flexDirection: 'column',\n      justifySelf: 'flex-end',\n      paddingLeft: 4,\n      paddingRight: 4,\n      textAlign: 'center',\n    }\n  );\n\nexport const Fade = keyframes`\n0%,100% { opacity: 0; }\n  50% { opacity: 1; }\n`;\n\nexport const SuccessIcon = styled(Icons)<{ valid: string }>(\n  ({ valid, theme }) =>\n    valid === 'valid'\n      ? {\n          color: theme.color.positive,\n          animation: `${Fade} 2s ease forwards`,\n        }\n      : {\n          opacity: 0,\n        },\n  {\n    alignSelf: 'center',\n    display: 'flex',\n    marginLeft: 10,\n    height: 14,\n    width: 14,\n  }\n);\n\nconst Container = styled.div(({ theme }) => ({\n  fontSize: theme.typography.size.s2,\n  padding: `3rem 20px`,\n  maxWidth: 600,\n  margin: '0 auto',\n}));\n\nconst shortcutLabels = {\n  fullScreen: 'Go full screen',\n  togglePanel: 'Toggle addons',\n  panelPosition: 'Toggle addons orientation',\n  toggleNav: 'Toggle sidebar',\n  toolbar: 'Toggle canvas toolbar',\n  search: 'Focus search',\n  focusNav: 'Focus sidebar',\n  focusIframe: 'Focus canvas',\n  focusPanel: 'Focus addons',\n  prevComponent: 'Previous component',\n  nextComponent: 'Next component',\n  prevStory: 'Previous story',\n  nextStory: 'Next story',\n  shortcutsPage: 'Go to shortcuts page',\n  aboutPage: 'Go to about page',\n  collapseAll: 'Collapse all items on sidebar',\n  expandAll: 'Expand all items on sidebar',\n  remount: 'Remount component',\n};\n\nexport type Feature = keyof typeof shortcutLabels;\n\n// Shortcuts that cannot be configured\nconst fixedShortcuts = ['escape'];\n\nfunction toShortcutState(shortcutKeys: ShortcutsScreenProps['shortcutKeys']) {\n  return Object.entries(shortcutKeys).reduce(\n    (acc, [feature, shortcut]: [Feature, string]) =>\n      fixedShortcuts.includes(feature) ? acc : { ...acc, [feature]: { shortcut, error: false } },\n    {} as Record<Feature, any>\n  );\n}\n\nexport interface ShortcutsScreenState {\n  activeFeature: Feature;\n  successField: Feature;\n  shortcutKeys: Record<Feature, any>;\n  addonsShortcutLabels?: Record<string, string>;\n}\n\nexport interface ShortcutsScreenProps {\n  shortcutKeys: Record<Feature, any>;\n  addonsShortcutLabels?: Record<string, string>;\n  setShortcut: Function;\n  restoreDefaultShortcut: Function;\n  restoreAllDefaultShortcuts: Function;\n}\n\nclass ShortcutsScreen extends Component<ShortcutsScreenProps, ShortcutsScreenState> {\n  constructor(props: ShortcutsScreenProps) {\n    super(props);\n    this.state = {\n      activeFeature: undefined,\n      successField: undefined,\n      // The initial shortcutKeys that come from props are the defaults/what was saved\n      // As the user interacts with the page, the state stores the temporary, unsaved shortcuts\n      // This object also includes the error attached to each shortcut\n      shortcutKeys: toShortcutState(props.shortcutKeys),\n      addonsShortcutLabels: props.addonsShortcutLabels,\n    };\n  }\n\n  onKeyDown = (e: KeyboardEvent) => {\n    const { activeFeature, shortcutKeys } = this.state;\n\n    if (e.key === 'Backspace') {\n      return this.restoreDefault();\n    }\n\n    const shortcut = eventToShortcut(e);\n\n    // Keypress is not a potential shortcut\n    if (!shortcut) {\n      return false;\n    }\n\n    // Check we don't match any other shortcuts\n    const error = !!Object.entries(shortcutKeys).find(\n      ([feature, { shortcut: existingShortcut }]) =>\n        feature !== activeFeature &&\n        existingShortcut &&\n        shortcutMatchesShortcut(shortcut, existingShortcut)\n    );\n\n    return this.setState({\n      shortcutKeys: { ...shortcutKeys, [activeFeature]: { shortcut, error } },\n    });\n  };\n\n  onFocus = (focusedInput: Feature) => () => {\n    const { shortcutKeys } = this.state;\n\n    this.setState({\n      activeFeature: focusedInput,\n      shortcutKeys: {\n        ...shortcutKeys,\n        [focusedInput]: { shortcut: null, error: false },\n      },\n    });\n  };\n\n  onBlur = async () => {\n    const { shortcutKeys, activeFeature } = this.state;\n\n    if (shortcutKeys[activeFeature]) {\n      const { shortcut, error } = shortcutKeys[activeFeature];\n      if (!shortcut || error) {\n        return this.restoreDefault();\n      }\n      return this.saveShortcut();\n    }\n    return false;\n  };\n\n  saveShortcut = async () => {\n    const { activeFeature, shortcutKeys } = this.state;\n\n    const { setShortcut } = this.props;\n    await setShortcut(activeFeature, shortcutKeys[activeFeature].shortcut);\n    this.setState({ successField: activeFeature });\n  };\n\n  restoreDefaults = async () => {\n    const { restoreAllDefaultShortcuts } = this.props;\n\n    const defaultShortcuts = await restoreAllDefaultShortcuts();\n    return this.setState({ shortcutKeys: toShortcutState(defaultShortcuts) });\n  };\n\n  restoreDefault = async () => {\n    const { activeFeature, shortcutKeys } = this.state;\n\n    const { restoreDefaultShortcut } = this.props;\n\n    const defaultShortcut = await restoreDefaultShortcut(activeFeature);\n    return this.setState({\n      shortcutKeys: {\n        ...shortcutKeys,\n        ...toShortcutState({ [activeFeature]: defaultShortcut } as Record<Feature, any>),\n      },\n    });\n  };\n\n  displaySuccessMessage = (activeElement: Feature) => {\n    const { successField, shortcutKeys } = this.state;\n    return activeElement === successField && shortcutKeys[activeElement].error === false\n      ? 'valid'\n      : undefined;\n  };\n\n  displayError = (activeElement: Feature): ValidationStates => {\n    const { activeFeature, shortcutKeys } = this.state;\n    return activeElement === activeFeature && shortcutKeys[activeElement].error === true\n      ? 'error'\n      : undefined;\n  };\n\n  renderKeyInput = () => {\n    const { shortcutKeys, addonsShortcutLabels } = this.state;\n    const arr = Object.entries(shortcutKeys).map(([feature, { shortcut }]: [Feature, any]) => (\n      <Row key={feature}>\n        <Description>{shortcutLabels[feature] || addonsShortcutLabels[feature]}</Description>\n\n        <TextInput\n          spellCheck=\"false\"\n          valid={this.displayError(feature)}\n          className=\"modalInput\"\n          onBlur={this.onBlur}\n          onFocus={this.onFocus(feature)}\n          // @ts-expect-error (Converted from ts-ignore)\n          onKeyDown={this.onKeyDown}\n          value={shortcut ? shortcutToHumanString(shortcut) : ''}\n          placeholder=\"Type keys\"\n          readOnly\n        />\n\n        <SuccessIcon valid={this.displaySuccessMessage(feature)} icon=\"check\" />\n      </Row>\n    ));\n\n    return arr;\n  };\n\n  renderKeyForm = () => (\n    <GridWrapper>\n      <GridHeaderRow>\n        <HeaderItem>Commands</HeaderItem>\n        <HeaderItem>Shortcut</HeaderItem>\n      </GridHeaderRow>\n      {this.renderKeyInput()}\n    </GridWrapper>\n  );\n\n  render() {\n    const layout = this.renderKeyForm();\n    return (\n      <Container>\n        <Header>Keyboard shortcuts</Header>\n\n        {layout}\n        <Form.Button tertiary small id=\"restoreDefaultsHotkeys\" onClick={this.restoreDefaults}>\n          Restore defaults\n        </Form.Button>\n\n        <SettingsFooter />\n      </Container>\n    );\n  }\n}\n\nexport { ShortcutsScreen };\n"],"names":["Header","styled","theme","HeaderItem","GridHeaderRow","Row","GridWrapper","Description","TextInput","Form","valid","Fade","keyframes","SuccessIcon","Icons","Container","shortcutLabels","fixedShortcuts","toShortcutState","shortcutKeys","acc","feature","shortcut","ShortcutsScreen","Component","props","activeFeature","eventToShortcut","error","existingShortcut","shortcutMatchesShortcut","focusedInput","setShortcut","restoreAllDefaultShortcuts","defaultShortcuts","restoreDefaultShortcut","defaultShortcut","activeElement","successField","addonsShortcutLabels","jsxs","jsx","shortcutToHumanString","layout","SettingsFooter"],"mappings":"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"}